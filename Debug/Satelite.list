
Satelite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6ac  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800a844  0800a844  0001a844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a860  0800a860  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a860  0800a860  0001a860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a868  0800a868  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a868  0800a868  0001a868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a86c  0800a86c  0001a86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d8  20000090  0800a900  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000968  0800a900  00020968  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b32  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cd1  00000000  00000000  00039bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  0003d8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001240  00000000  00000000  0003ec68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a142  00000000  00000000  0003fea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b1bc  00000000  00000000  00059fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000910c6  00000000  00000000  000751a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010626c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005590  00000000  00000000  001062bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a82c 	.word	0x0800a82c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	0800a82c 	.word	0x0800a82c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_ldivmod>:
 8000a14:	b97b      	cbnz	r3, 8000a36 <__aeabi_ldivmod+0x22>
 8000a16:	b972      	cbnz	r2, 8000a36 <__aeabi_ldivmod+0x22>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bfbe      	ittt	lt
 8000a1c:	2000      	movlt	r0, #0
 8000a1e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000a22:	e006      	blt.n	8000a32 <__aeabi_ldivmod+0x1e>
 8000a24:	bf08      	it	eq
 8000a26:	2800      	cmpeq	r0, #0
 8000a28:	bf1c      	itt	ne
 8000a2a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000a2e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a32:	f000 b9bf 	b.w	8000db4 <__aeabi_idiv0>
 8000a36:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a3a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a3e:	2900      	cmp	r1, #0
 8000a40:	db09      	blt.n	8000a56 <__aeabi_ldivmod+0x42>
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	db1a      	blt.n	8000a7c <__aeabi_ldivmod+0x68>
 8000a46:	f000 f84d 	bl	8000ae4 <__udivmoddi4>
 8000a4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a52:	b004      	add	sp, #16
 8000a54:	4770      	bx	lr
 8000a56:	4240      	negs	r0, r0
 8000a58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db1b      	blt.n	8000a98 <__aeabi_ldivmod+0x84>
 8000a60:	f000 f840 	bl	8000ae4 <__udivmoddi4>
 8000a64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a6c:	b004      	add	sp, #16
 8000a6e:	4240      	negs	r0, r0
 8000a70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a74:	4252      	negs	r2, r2
 8000a76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a7a:	4770      	bx	lr
 8000a7c:	4252      	negs	r2, r2
 8000a7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a82:	f000 f82f 	bl	8000ae4 <__udivmoddi4>
 8000a86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a8e:	b004      	add	sp, #16
 8000a90:	4240      	negs	r0, r0
 8000a92:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a96:	4770      	bx	lr
 8000a98:	4252      	negs	r2, r2
 8000a9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a9e:	f000 f821 	bl	8000ae4 <__udivmoddi4>
 8000aa2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aaa:	b004      	add	sp, #16
 8000aac:	4252      	negs	r2, r2
 8000aae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_uldivmod>:
 8000ab4:	b953      	cbnz	r3, 8000acc <__aeabi_uldivmod+0x18>
 8000ab6:	b94a      	cbnz	r2, 8000acc <__aeabi_uldivmod+0x18>
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	bf08      	it	eq
 8000abc:	2800      	cmpeq	r0, #0
 8000abe:	bf1c      	itt	ne
 8000ac0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ac4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac8:	f000 b974 	b.w	8000db4 <__aeabi_idiv0>
 8000acc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad4:	f000 f806 	bl	8000ae4 <__udivmoddi4>
 8000ad8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae0:	b004      	add	sp, #16
 8000ae2:	4770      	bx	lr

08000ae4 <__udivmoddi4>:
 8000ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae8:	9d08      	ldr	r5, [sp, #32]
 8000aea:	4604      	mov	r4, r0
 8000aec:	468e      	mov	lr, r1
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d14d      	bne.n	8000b8e <__udivmoddi4+0xaa>
 8000af2:	428a      	cmp	r2, r1
 8000af4:	4694      	mov	ip, r2
 8000af6:	d969      	bls.n	8000bcc <__udivmoddi4+0xe8>
 8000af8:	fab2 f282 	clz	r2, r2
 8000afc:	b152      	cbz	r2, 8000b14 <__udivmoddi4+0x30>
 8000afe:	fa01 f302 	lsl.w	r3, r1, r2
 8000b02:	f1c2 0120 	rsb	r1, r2, #32
 8000b06:	fa20 f101 	lsr.w	r1, r0, r1
 8000b0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b12:	4094      	lsls	r4, r2
 8000b14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b18:	0c21      	lsrs	r1, r4, #16
 8000b1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b1e:	fa1f f78c 	uxth.w	r7, ip
 8000b22:	fb08 e316 	mls	r3, r8, r6, lr
 8000b26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b2a:	fb06 f107 	mul.w	r1, r6, r7
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	d90a      	bls.n	8000b48 <__udivmoddi4+0x64>
 8000b32:	eb1c 0303 	adds.w	r3, ip, r3
 8000b36:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b3a:	f080 811f 	bcs.w	8000d7c <__udivmoddi4+0x298>
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	f240 811c 	bls.w	8000d7c <__udivmoddi4+0x298>
 8000b44:	3e02      	subs	r6, #2
 8000b46:	4463      	add	r3, ip
 8000b48:	1a5b      	subs	r3, r3, r1
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b50:	fb08 3310 	mls	r3, r8, r0, r3
 8000b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b58:	fb00 f707 	mul.w	r7, r0, r7
 8000b5c:	42a7      	cmp	r7, r4
 8000b5e:	d90a      	bls.n	8000b76 <__udivmoddi4+0x92>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b68:	f080 810a 	bcs.w	8000d80 <__udivmoddi4+0x29c>
 8000b6c:	42a7      	cmp	r7, r4
 8000b6e:	f240 8107 	bls.w	8000d80 <__udivmoddi4+0x29c>
 8000b72:	4464      	add	r4, ip
 8000b74:	3802      	subs	r0, #2
 8000b76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7a:	1be4      	subs	r4, r4, r7
 8000b7c:	2600      	movs	r6, #0
 8000b7e:	b11d      	cbz	r5, 8000b88 <__udivmoddi4+0xa4>
 8000b80:	40d4      	lsrs	r4, r2
 8000b82:	2300      	movs	r3, #0
 8000b84:	e9c5 4300 	strd	r4, r3, [r5]
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	428b      	cmp	r3, r1
 8000b90:	d909      	bls.n	8000ba6 <__udivmoddi4+0xc2>
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	f000 80ef 	beq.w	8000d76 <__udivmoddi4+0x292>
 8000b98:	2600      	movs	r6, #0
 8000b9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b9e:	4630      	mov	r0, r6
 8000ba0:	4631      	mov	r1, r6
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	fab3 f683 	clz	r6, r3
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	d14a      	bne.n	8000c44 <__udivmoddi4+0x160>
 8000bae:	428b      	cmp	r3, r1
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xd4>
 8000bb2:	4282      	cmp	r2, r0
 8000bb4:	f200 80f9 	bhi.w	8000daa <__udivmoddi4+0x2c6>
 8000bb8:	1a84      	subs	r4, r0, r2
 8000bba:	eb61 0303 	sbc.w	r3, r1, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	469e      	mov	lr, r3
 8000bc2:	2d00      	cmp	r5, #0
 8000bc4:	d0e0      	beq.n	8000b88 <__udivmoddi4+0xa4>
 8000bc6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bca:	e7dd      	b.n	8000b88 <__udivmoddi4+0xa4>
 8000bcc:	b902      	cbnz	r2, 8000bd0 <__udivmoddi4+0xec>
 8000bce:	deff      	udf	#255	; 0xff
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	2a00      	cmp	r2, #0
 8000bd6:	f040 8092 	bne.w	8000cfe <__udivmoddi4+0x21a>
 8000bda:	eba1 010c 	sub.w	r1, r1, ip
 8000bde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000be2:	fa1f fe8c 	uxth.w	lr, ip
 8000be6:	2601      	movs	r6, #1
 8000be8:	0c20      	lsrs	r0, r4, #16
 8000bea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bee:	fb07 1113 	mls	r1, r7, r3, r1
 8000bf2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bf6:	fb0e f003 	mul.w	r0, lr, r3
 8000bfa:	4288      	cmp	r0, r1
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x12c>
 8000bfe:	eb1c 0101 	adds.w	r1, ip, r1
 8000c02:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x12a>
 8000c08:	4288      	cmp	r0, r1
 8000c0a:	f200 80cb 	bhi.w	8000da4 <__udivmoddi4+0x2c0>
 8000c0e:	4643      	mov	r3, r8
 8000c10:	1a09      	subs	r1, r1, r0
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c18:	fb07 1110 	mls	r1, r7, r0, r1
 8000c1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c20:	fb0e fe00 	mul.w	lr, lr, r0
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d908      	bls.n	8000c3a <__udivmoddi4+0x156>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c30:	d202      	bcs.n	8000c38 <__udivmoddi4+0x154>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f200 80bb 	bhi.w	8000dae <__udivmoddi4+0x2ca>
 8000c38:	4608      	mov	r0, r1
 8000c3a:	eba4 040e 	sub.w	r4, r4, lr
 8000c3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c42:	e79c      	b.n	8000b7e <__udivmoddi4+0x9a>
 8000c44:	f1c6 0720 	rsb	r7, r6, #32
 8000c48:	40b3      	lsls	r3, r6
 8000c4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c52:	fa20 f407 	lsr.w	r4, r0, r7
 8000c56:	fa01 f306 	lsl.w	r3, r1, r6
 8000c5a:	431c      	orrs	r4, r3
 8000c5c:	40f9      	lsrs	r1, r7
 8000c5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c62:	fa00 f306 	lsl.w	r3, r0, r6
 8000c66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c6a:	0c20      	lsrs	r0, r4, #16
 8000c6c:	fa1f fe8c 	uxth.w	lr, ip
 8000c70:	fb09 1118 	mls	r1, r9, r8, r1
 8000c74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c78:	fb08 f00e 	mul.w	r0, r8, lr
 8000c7c:	4288      	cmp	r0, r1
 8000c7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b8>
 8000c84:	eb1c 0101 	adds.w	r1, ip, r1
 8000c88:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c8c:	f080 8088 	bcs.w	8000da0 <__udivmoddi4+0x2bc>
 8000c90:	4288      	cmp	r0, r1
 8000c92:	f240 8085 	bls.w	8000da0 <__udivmoddi4+0x2bc>
 8000c96:	f1a8 0802 	sub.w	r8, r8, #2
 8000c9a:	4461      	add	r1, ip
 8000c9c:	1a09      	subs	r1, r1, r0
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ca4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ca8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb0:	458e      	cmp	lr, r1
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1e2>
 8000cb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000cbc:	d26c      	bcs.n	8000d98 <__udivmoddi4+0x2b4>
 8000cbe:	458e      	cmp	lr, r1
 8000cc0:	d96a      	bls.n	8000d98 <__udivmoddi4+0x2b4>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	4461      	add	r1, ip
 8000cc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cca:	fba0 9402 	umull	r9, r4, r0, r2
 8000cce:	eba1 010e 	sub.w	r1, r1, lr
 8000cd2:	42a1      	cmp	r1, r4
 8000cd4:	46c8      	mov	r8, r9
 8000cd6:	46a6      	mov	lr, r4
 8000cd8:	d356      	bcc.n	8000d88 <__udivmoddi4+0x2a4>
 8000cda:	d053      	beq.n	8000d84 <__udivmoddi4+0x2a0>
 8000cdc:	b15d      	cbz	r5, 8000cf6 <__udivmoddi4+0x212>
 8000cde:	ebb3 0208 	subs.w	r2, r3, r8
 8000ce2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ce6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cea:	fa22 f306 	lsr.w	r3, r2, r6
 8000cee:	40f1      	lsrs	r1, r6
 8000cf0:	431f      	orrs	r7, r3
 8000cf2:	e9c5 7100 	strd	r7, r1, [r5]
 8000cf6:	2600      	movs	r6, #0
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	f1c2 0320 	rsb	r3, r2, #32
 8000d02:	40d8      	lsrs	r0, r3
 8000d04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d08:	fa21 f303 	lsr.w	r3, r1, r3
 8000d0c:	4091      	lsls	r1, r2
 8000d0e:	4301      	orrs	r1, r0
 8000d10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d14:	fa1f fe8c 	uxth.w	lr, ip
 8000d18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d20:	0c0b      	lsrs	r3, r1, #16
 8000d22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d26:	fb00 f60e 	mul.w	r6, r0, lr
 8000d2a:	429e      	cmp	r6, r3
 8000d2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x260>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d3a:	d22f      	bcs.n	8000d9c <__udivmoddi4+0x2b8>
 8000d3c:	429e      	cmp	r6, r3
 8000d3e:	d92d      	bls.n	8000d9c <__udivmoddi4+0x2b8>
 8000d40:	3802      	subs	r0, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	1b9b      	subs	r3, r3, r6
 8000d46:	b289      	uxth	r1, r1
 8000d48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb06 f30e 	mul.w	r3, r6, lr
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x28a>
 8000d5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d60:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d64:	d216      	bcs.n	8000d94 <__udivmoddi4+0x2b0>
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d914      	bls.n	8000d94 <__udivmoddi4+0x2b0>
 8000d6a:	3e02      	subs	r6, #2
 8000d6c:	4461      	add	r1, ip
 8000d6e:	1ac9      	subs	r1, r1, r3
 8000d70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d74:	e738      	b.n	8000be8 <__udivmoddi4+0x104>
 8000d76:	462e      	mov	r6, r5
 8000d78:	4628      	mov	r0, r5
 8000d7a:	e705      	b.n	8000b88 <__udivmoddi4+0xa4>
 8000d7c:	4606      	mov	r6, r0
 8000d7e:	e6e3      	b.n	8000b48 <__udivmoddi4+0x64>
 8000d80:	4618      	mov	r0, r3
 8000d82:	e6f8      	b.n	8000b76 <__udivmoddi4+0x92>
 8000d84:	454b      	cmp	r3, r9
 8000d86:	d2a9      	bcs.n	8000cdc <__udivmoddi4+0x1f8>
 8000d88:	ebb9 0802 	subs.w	r8, r9, r2
 8000d8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d90:	3801      	subs	r0, #1
 8000d92:	e7a3      	b.n	8000cdc <__udivmoddi4+0x1f8>
 8000d94:	4646      	mov	r6, r8
 8000d96:	e7ea      	b.n	8000d6e <__udivmoddi4+0x28a>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	e794      	b.n	8000cc6 <__udivmoddi4+0x1e2>
 8000d9c:	4640      	mov	r0, r8
 8000d9e:	e7d1      	b.n	8000d44 <__udivmoddi4+0x260>
 8000da0:	46d0      	mov	r8, sl
 8000da2:	e77b      	b.n	8000c9c <__udivmoddi4+0x1b8>
 8000da4:	3b02      	subs	r3, #2
 8000da6:	4461      	add	r1, ip
 8000da8:	e732      	b.n	8000c10 <__udivmoddi4+0x12c>
 8000daa:	4630      	mov	r0, r6
 8000dac:	e709      	b.n	8000bc2 <__udivmoddi4+0xde>
 8000dae:	4464      	add	r4, ip
 8000db0:	3802      	subs	r0, #2
 8000db2:	e742      	b.n	8000c3a <__udivmoddi4+0x156>

08000db4 <__aeabi_idiv0>:
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

08000db8 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08c      	sub	sp, #48	; 0x30
 8000dbc:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dc2:	9302      	str	r3, [sp, #8]
 8000dc4:	2319      	movs	r3, #25
 8000dc6:	9301      	str	r3, [sp, #4]
 8000dc8:	463b      	mov	r3, r7
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2301      	movs	r3, #1
 8000dce:	2288      	movs	r2, #136	; 0x88
 8000dd0:	21ec      	movs	r1, #236	; 0xec
 8000dd2:	4857      	ldr	r0, [pc, #348]	; (8000f30 <TrimRead+0x178>)
 8000dd4:	f003 fc8c 	bl	80046f0 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8000dd8:	463b      	mov	r3, r7
 8000dda:	3319      	adds	r3, #25
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000de0:	9202      	str	r2, [sp, #8]
 8000de2:	2207      	movs	r2, #7
 8000de4:	9201      	str	r2, [sp, #4]
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2301      	movs	r3, #1
 8000dea:	22e1      	movs	r2, #225	; 0xe1
 8000dec:	21ec      	movs	r1, #236	; 0xec
 8000dee:	4850      	ldr	r0, [pc, #320]	; (8000f30 <TrimRead+0x178>)
 8000df0:	f003 fc7e 	bl	80046f0 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8000df4:	787b      	ldrb	r3, [r7, #1]
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	783b      	ldrb	r3, [r7, #0]
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	4b4b      	ldr	r3, [pc, #300]	; (8000f34 <TrimRead+0x17c>)
 8000e06:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8000e08:	78fb      	ldrb	r3, [r7, #3]
 8000e0a:	021b      	lsls	r3, r3, #8
 8000e0c:	b21a      	sxth	r2, r3
 8000e0e:	78bb      	ldrb	r3, [r7, #2]
 8000e10:	b21b      	sxth	r3, r3
 8000e12:	4313      	orrs	r3, r2
 8000e14:	b21a      	sxth	r2, r3
 8000e16:	4b48      	ldr	r3, [pc, #288]	; (8000f38 <TrimRead+0x180>)
 8000e18:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8000e1a:	797b      	ldrb	r3, [r7, #5]
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	b21a      	sxth	r2, r3
 8000e20:	793b      	ldrb	r3, [r7, #4]
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	4313      	orrs	r3, r2
 8000e26:	b21a      	sxth	r2, r3
 8000e28:	4b44      	ldr	r3, [pc, #272]	; (8000f3c <TrimRead+0x184>)
 8000e2a:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	797b      	ldrb	r3, [r7, #5]
 8000e34:	b21b      	sxth	r3, r3
 8000e36:	4313      	orrs	r3, r2
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	4b40      	ldr	r3, [pc, #256]	; (8000f40 <TrimRead+0x188>)
 8000e3e:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8000e40:	7a7b      	ldrb	r3, [r7, #9]
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	b21a      	sxth	r2, r3
 8000e46:	79bb      	ldrb	r3, [r7, #6]
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	4b3d      	ldr	r3, [pc, #244]	; (8000f44 <TrimRead+0x18c>)
 8000e50:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8000e52:	7afb      	ldrb	r3, [r7, #11]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	7abb      	ldrb	r3, [r7, #10]
 8000e5a:	b21b      	sxth	r3, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b21a      	sxth	r2, r3
 8000e60:	4b39      	ldr	r3, [pc, #228]	; (8000f48 <TrimRead+0x190>)
 8000e62:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8000e64:	7b7b      	ldrb	r3, [r7, #13]
 8000e66:	021b      	lsls	r3, r3, #8
 8000e68:	b21a      	sxth	r2, r3
 8000e6a:	7b3b      	ldrb	r3, [r7, #12]
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	b21a      	sxth	r2, r3
 8000e72:	4b36      	ldr	r3, [pc, #216]	; (8000f4c <TrimRead+0x194>)
 8000e74:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	b21a      	sxth	r2, r3
 8000e7c:	7bbb      	ldrb	r3, [r7, #14]
 8000e7e:	b21b      	sxth	r3, r3
 8000e80:	4313      	orrs	r3, r2
 8000e82:	b21a      	sxth	r2, r3
 8000e84:	4b32      	ldr	r3, [pc, #200]	; (8000f50 <TrimRead+0x198>)
 8000e86:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8000e88:	7c7b      	ldrb	r3, [r7, #17]
 8000e8a:	021b      	lsls	r3, r3, #8
 8000e8c:	b21a      	sxth	r2, r3
 8000e8e:	7c3b      	ldrb	r3, [r7, #16]
 8000e90:	b21b      	sxth	r3, r3
 8000e92:	4313      	orrs	r3, r2
 8000e94:	b21a      	sxth	r2, r3
 8000e96:	4b2f      	ldr	r3, [pc, #188]	; (8000f54 <TrimRead+0x19c>)
 8000e98:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8000e9a:	7cfb      	ldrb	r3, [r7, #19]
 8000e9c:	021b      	lsls	r3, r3, #8
 8000e9e:	b21a      	sxth	r2, r3
 8000ea0:	7cbb      	ldrb	r3, [r7, #18]
 8000ea2:	b21b      	sxth	r3, r3
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b21a      	sxth	r2, r3
 8000ea8:	4b2b      	ldr	r3, [pc, #172]	; (8000f58 <TrimRead+0x1a0>)
 8000eaa:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8000eac:	7d7b      	ldrb	r3, [r7, #21]
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	b21a      	sxth	r2, r3
 8000eb2:	7d3b      	ldrb	r3, [r7, #20]
 8000eb4:	b21b      	sxth	r3, r3
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	b21a      	sxth	r2, r3
 8000eba:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <TrimRead+0x1a4>)
 8000ebc:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8000ebe:	7dfb      	ldrb	r3, [r7, #23]
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	b21a      	sxth	r2, r3
 8000ec4:	7dbb      	ldrb	r3, [r7, #22]
 8000ec6:	b21b      	sxth	r3, r3
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	b21a      	sxth	r2, r3
 8000ecc:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <TrimRead+0x1a8>)
 8000ece:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8000ed0:	7e3b      	ldrb	r3, [r7, #24]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <TrimRead+0x1ac>)
 8000ed6:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8000ed8:	7ebb      	ldrb	r3, [r7, #26]
 8000eda:	021b      	lsls	r3, r3, #8
 8000edc:	b21a      	sxth	r2, r3
 8000ede:	7e7b      	ldrb	r3, [r7, #25]
 8000ee0:	b21b      	sxth	r3, r3
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	b21a      	sxth	r2, r3
 8000ee6:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <TrimRead+0x1b0>)
 8000ee8:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8000eea:	7efb      	ldrb	r3, [r7, #27]
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <TrimRead+0x1b4>)
 8000ef0:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8000ef2:	7f3b      	ldrb	r3, [r7, #28]
 8000ef4:	011b      	lsls	r3, r3, #4
 8000ef6:	b21a      	sxth	r2, r3
 8000ef8:	7f7b      	ldrb	r3, [r7, #29]
 8000efa:	b21b      	sxth	r3, r3
 8000efc:	f003 030f 	and.w	r3, r3, #15
 8000f00:	b21b      	sxth	r3, r3
 8000f02:	4313      	orrs	r3, r2
 8000f04:	b21a      	sxth	r2, r3
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <TrimRead+0x1b8>)
 8000f08:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8000f0a:	7fbb      	ldrb	r3, [r7, #30]
 8000f0c:	011b      	lsls	r3, r3, #4
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	7f7b      	ldrb	r3, [r7, #29]
 8000f12:	091b      	lsrs	r3, r3, #4
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b21a      	sxth	r2, r3
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <TrimRead+0x1bc>)
 8000f1e:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8000f20:	7ffb      	ldrb	r3, [r7, #31]
 8000f22:	b21a      	sxth	r2, r3
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <TrimRead+0x1c0>)
 8000f26:	801a      	strh	r2, [r3, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200000e4 	.word	0x200000e4
 8000f34:	200000bc 	.word	0x200000bc
 8000f38:	200000c4 	.word	0x200000c4
 8000f3c:	200000c6 	.word	0x200000c6
 8000f40:	200000be 	.word	0x200000be
 8000f44:	200000c8 	.word	0x200000c8
 8000f48:	200000ca 	.word	0x200000ca
 8000f4c:	200000cc 	.word	0x200000cc
 8000f50:	200000ce 	.word	0x200000ce
 8000f54:	200000d0 	.word	0x200000d0
 8000f58:	200000d2 	.word	0x200000d2
 8000f5c:	200000d4 	.word	0x200000d4
 8000f60:	200000d6 	.word	0x200000d6
 8000f64:	200000c0 	.word	0x200000c0
 8000f68:	200000d8 	.word	0x200000d8
 8000f6c:	200000c2 	.word	0x200000c2
 8000f70:	200000da 	.word	0x200000da
 8000f74:	200000dc 	.word	0x200000dc
 8000f78:	200000de 	.word	0x200000de

08000f7c <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af04      	add	r7, sp, #16
 8000f82:	4604      	mov	r4, r0
 8000f84:	4608      	mov	r0, r1
 8000f86:	4611      	mov	r1, r2
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4623      	mov	r3, r4
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71bb      	strb	r3, [r7, #6]
 8000f92:	460b      	mov	r3, r1
 8000f94:	717b      	strb	r3, [r7, #5]
 8000f96:	4613      	mov	r3, r2
 8000f98:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8000f9a:	f7ff ff0d 	bl	8000db8 <TrimRead>


	uint8_t datatowrite = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8000fa6:	23b6      	movs	r3, #182	; 0xb6
 8000fa8:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	f107 030f 	add.w	r3, r7, #15
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	22e0      	movs	r2, #224	; 0xe0
 8000fbe:	21ec      	movs	r1, #236	; 0xec
 8000fc0:	4858      	ldr	r0, [pc, #352]	; (8001124 <BME280_Config+0x1a8>)
 8000fc2:	f003 fa9b 	bl	80044fc <HAL_I2C_Mem_Write>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <BME280_Config+0x56>
	{
		return -1;
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fd0:	e0a3      	b.n	800111a <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 8000fd2:	2064      	movs	r0, #100	; 0x64
 8000fd4:	f001 fa70 	bl	80024b8 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8000fd8:	797b      	ldrb	r3, [r7, #5]
 8000fda:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe0:	9302      	str	r3, [sp, #8]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	9301      	str	r3, [sp, #4]
 8000fe6:	f107 030f 	add.w	r3, r7, #15
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2301      	movs	r3, #1
 8000fee:	22f2      	movs	r2, #242	; 0xf2
 8000ff0:	21ec      	movs	r1, #236	; 0xec
 8000ff2:	484c      	ldr	r0, [pc, #304]	; (8001124 <BME280_Config+0x1a8>)
 8000ff4:	f003 fa82 	bl	80044fc <HAL_I2C_Mem_Write>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d002      	beq.n	8001004 <BME280_Config+0x88>
	{
		return -1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001002:	e08a      	b.n	800111a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001004:	2064      	movs	r0, #100	; 0x64
 8001006:	f001 fa57 	bl	80024b8 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 800100a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100e:	9302      	str	r3, [sp, #8]
 8001010:	2301      	movs	r3, #1
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	f107 030e 	add.w	r3, r7, #14
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2301      	movs	r3, #1
 800101c:	22f2      	movs	r2, #242	; 0xf2
 800101e:	21ec      	movs	r1, #236	; 0xec
 8001020:	4840      	ldr	r0, [pc, #256]	; (8001124 <BME280_Config+0x1a8>)
 8001022:	f003 fb65 	bl	80046f0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001026:	7bba      	ldrb	r2, [r7, #14]
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	429a      	cmp	r2, r3
 800102c:	d002      	beq.n	8001034 <BME280_Config+0xb8>
	{
		return -1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001032:	e072      	b.n	800111a <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001034:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001038:	015b      	lsls	r3, r3, #5
 800103a:	b25a      	sxtb	r2, r3
 800103c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	b25b      	sxtb	r3, r3
 8001044:	4313      	orrs	r3, r2
 8001046:	b25b      	sxtb	r3, r3
 8001048:	b2db      	uxtb	r3, r3
 800104a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800104c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	2301      	movs	r3, #1
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	f107 030f 	add.w	r3, r7, #15
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	22f5      	movs	r2, #245	; 0xf5
 8001060:	21ec      	movs	r1, #236	; 0xec
 8001062:	4830      	ldr	r0, [pc, #192]	; (8001124 <BME280_Config+0x1a8>)
 8001064:	f003 fa4a 	bl	80044fc <HAL_I2C_Mem_Write>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <BME280_Config+0xf8>
	{
		return -1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001072:	e052      	b.n	800111a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001074:	2064      	movs	r0, #100	; 0x64
 8001076:	f001 fa1f 	bl	80024b8 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 800107a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107e:	9302      	str	r3, [sp, #8]
 8001080:	2301      	movs	r3, #1
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	f107 030e 	add.w	r3, r7, #14
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2301      	movs	r3, #1
 800108c:	22f5      	movs	r2, #245	; 0xf5
 800108e:	21ec      	movs	r1, #236	; 0xec
 8001090:	4824      	ldr	r0, [pc, #144]	; (8001124 <BME280_Config+0x1a8>)
 8001092:	f003 fb2d 	bl	80046f0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001096:	7bba      	ldrb	r2, [r7, #14]
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	429a      	cmp	r2, r3
 800109c:	d002      	beq.n	80010a4 <BME280_Config+0x128>
	{
		return -1;
 800109e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010a2:	e03a      	b.n	800111a <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	015b      	lsls	r3, r3, #5
 80010a8:	b25a      	sxtb	r2, r3
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b25a      	sxtb	r2, r3
 80010b4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b25b      	sxtb	r3, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80010c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	2301      	movs	r3, #1
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	f107 030f 	add.w	r3, r7, #15
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	22f4      	movs	r2, #244	; 0xf4
 80010d4:	21ec      	movs	r1, #236	; 0xec
 80010d6:	4813      	ldr	r0, [pc, #76]	; (8001124 <BME280_Config+0x1a8>)
 80010d8:	f003 fa10 	bl	80044fc <HAL_I2C_Mem_Write>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d002      	beq.n	80010e8 <BME280_Config+0x16c>
	{
		return -1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010e6:	e018      	b.n	800111a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80010e8:	2064      	movs	r0, #100	; 0x64
 80010ea:	f001 f9e5 	bl	80024b8 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80010ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	2301      	movs	r3, #1
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	f107 030e 	add.w	r3, r7, #14
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2301      	movs	r3, #1
 8001100:	22f4      	movs	r2, #244	; 0xf4
 8001102:	21ec      	movs	r1, #236	; 0xec
 8001104:	4807      	ldr	r0, [pc, #28]	; (8001124 <BME280_Config+0x1a8>)
 8001106:	f003 faf3 	bl	80046f0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800110a:	7bba      	ldrb	r2, [r7, #14]
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	429a      	cmp	r2, r3
 8001110:	d002      	beq.n	8001118 <BME280_Config+0x19c>
	{
		return -1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001116:	e000      	b.n	800111a <BME280_Config+0x19e>
	}

	return 0;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	bd90      	pop	{r4, r7, pc}
 8001122:	bf00      	nop
 8001124:	200000e4 	.word	0x200000e4

08001128 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800112e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001132:	9302      	str	r3, [sp, #8]
 8001134:	2301      	movs	r3, #1
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <BMEReadRaw+0x8c>)
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2301      	movs	r3, #1
 800113e:	22d0      	movs	r2, #208	; 0xd0
 8001140:	21ec      	movs	r1, #236	; 0xec
 8001142:	481d      	ldr	r0, [pc, #116]	; (80011b8 <BMEReadRaw+0x90>)
 8001144:	f003 fad4 	bl	80046f0 <HAL_I2C_Mem_Read>

	if (chipID == 0x58)
 8001148:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <BMEReadRaw+0x8c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b58      	cmp	r3, #88	; 0x58
 800114e:	d12a      	bne.n	80011a6 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001154:	9302      	str	r3, [sp, #8]
 8001156:	2308      	movs	r3, #8
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	463b      	mov	r3, r7
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2301      	movs	r3, #1
 8001160:	22f7      	movs	r2, #247	; 0xf7
 8001162:	21ec      	movs	r1, #236	; 0xec
 8001164:	4814      	ldr	r0, [pc, #80]	; (80011b8 <BMEReadRaw+0x90>)
 8001166:	f003 fac3 	bl	80046f0 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800116a:	783b      	ldrb	r3, [r7, #0]
 800116c:	031a      	lsls	r2, r3, #12
 800116e:	787b      	ldrb	r3, [r7, #1]
 8001170:	011b      	lsls	r3, r3, #4
 8001172:	4313      	orrs	r3, r2
 8001174:	78ba      	ldrb	r2, [r7, #2]
 8001176:	0912      	lsrs	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	4313      	orrs	r3, r2
 800117c:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <BMEReadRaw+0x94>)
 800117e:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	031a      	lsls	r2, r3, #12
 8001184:	793b      	ldrb	r3, [r7, #4]
 8001186:	011b      	lsls	r3, r3, #4
 8001188:	4313      	orrs	r3, r2
 800118a:	797a      	ldrb	r2, [r7, #5]
 800118c:	0912      	lsrs	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	4313      	orrs	r3, r2
 8001192:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <BMEReadRaw+0x98>)
 8001194:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001196:	79bb      	ldrb	r3, [r7, #6]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	79fa      	ldrb	r2, [r7, #7]
 800119c:	4313      	orrs	r3, r2
 800119e:	4a09      	ldr	r2, [pc, #36]	; (80011c4 <BMEReadRaw+0x9c>)
 80011a0:	6013      	str	r3, [r2, #0]

		return 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e001      	b.n	80011aa <BMEReadRaw+0x82>
	}

	else return -1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200000ac 	.word	0x200000ac
 80011b8:	200000e4 	.word	0x200000e4
 80011bc:	200000b4 	.word	0x200000b4
 80011c0:	200000b0 	.word	0x200000b0
 80011c4:	200000b8 	.word	0x200000b8

080011c8 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	10da      	asrs	r2, r3, #3
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <BME280_compensate_T_int32+0x74>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	4a18      	ldr	r2, [pc, #96]	; (8001240 <BME280_compensate_T_int32+0x78>)
 80011de:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011e2:	fb02 f303 	mul.w	r3, r2, r3
 80011e6:	12db      	asrs	r3, r3, #11
 80011e8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	111b      	asrs	r3, r3, #4
 80011ee:	4a13      	ldr	r2, [pc, #76]	; (800123c <BME280_compensate_T_int32+0x74>)
 80011f0:	8812      	ldrh	r2, [r2, #0]
 80011f2:	1a9b      	subs	r3, r3, r2
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	1112      	asrs	r2, r2, #4
 80011f8:	4910      	ldr	r1, [pc, #64]	; (800123c <BME280_compensate_T_int32+0x74>)
 80011fa:	8809      	ldrh	r1, [r1, #0]
 80011fc:	1a52      	subs	r2, r2, r1
 80011fe:	fb02 f303 	mul.w	r3, r2, r3
 8001202:	131b      	asrs	r3, r3, #12
 8001204:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <BME280_compensate_T_int32+0x7c>)
 8001206:	f9b2 2000 	ldrsh.w	r2, [r2]
 800120a:	fb02 f303 	mul.w	r3, r2, r3
 800120e:	139b      	asrs	r3, r3, #14
 8001210:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4413      	add	r3, r2
 8001218:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <BME280_compensate_T_int32+0x80>)
 800121a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <BME280_compensate_T_int32+0x80>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	3380      	adds	r3, #128	; 0x80
 8001228:	121b      	asrs	r3, r3, #8
 800122a:	60fb      	str	r3, [r7, #12]
	return T;
 800122c:	68fb      	ldr	r3, [r7, #12]
}
 800122e:	4618      	mov	r0, r3
 8001230:	371c      	adds	r7, #28
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	200000bc 	.word	0x200000bc
 8001240:	200000c4 	.word	0x200000c4
 8001244:	200000c6 	.word	0x200000c6
 8001248:	200000e0 	.word	0x200000e0

0800124c <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 800124c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001250:	b0ca      	sub	sp, #296	; 0x128
 8001252:	af00      	add	r7, sp, #0
 8001254:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001258:	4baf      	ldr	r3, [pc, #700]	; (8001518 <BME280_compensate_P_int64+0x2cc>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	17da      	asrs	r2, r3, #31
 800125e:	461c      	mov	r4, r3
 8001260:	4615      	mov	r5, r2
 8001262:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001266:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 800126a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800126e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001272:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001276:	fb03 f102 	mul.w	r1, r3, r2
 800127a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800127e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001282:	fb02 f303 	mul.w	r3, r2, r3
 8001286:	18ca      	adds	r2, r1, r3
 8001288:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800128c:	fba3 8903 	umull	r8, r9, r3, r3
 8001290:	eb02 0309 	add.w	r3, r2, r9
 8001294:	4699      	mov	r9, r3
 8001296:	4ba1      	ldr	r3, [pc, #644]	; (800151c <BME280_compensate_P_int64+0x2d0>)
 8001298:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129c:	b21b      	sxth	r3, r3
 800129e:	17da      	asrs	r2, r3, #31
 80012a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80012a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80012a8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80012ac:	4603      	mov	r3, r0
 80012ae:	fb03 f209 	mul.w	r2, r3, r9
 80012b2:	460b      	mov	r3, r1
 80012b4:	fb08 f303 	mul.w	r3, r8, r3
 80012b8:	4413      	add	r3, r2
 80012ba:	4602      	mov	r2, r0
 80012bc:	fba8 1202 	umull	r1, r2, r8, r2
 80012c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80012c4:	460a      	mov	r2, r1
 80012c6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80012ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80012ce:	4413      	add	r3, r2
 80012d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80012d4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80012d8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80012dc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80012e0:	4b8f      	ldr	r3, [pc, #572]	; (8001520 <BME280_compensate_P_int64+0x2d4>)
 80012e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	17da      	asrs	r2, r3, #31
 80012ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80012ee:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80012f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012f6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80012fa:	462a      	mov	r2, r5
 80012fc:	fb02 f203 	mul.w	r2, r2, r3
 8001300:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001304:	4621      	mov	r1, r4
 8001306:	fb01 f303 	mul.w	r3, r1, r3
 800130a:	441a      	add	r2, r3
 800130c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001310:	4621      	mov	r1, r4
 8001312:	fba3 1301 	umull	r1, r3, r3, r1
 8001316:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800131a:	460b      	mov	r3, r1
 800131c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001324:	18d3      	adds	r3, r2, r3
 8001326:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800132a:	f04f 0000 	mov.w	r0, #0
 800132e:	f04f 0100 	mov.w	r1, #0
 8001332:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001336:	462b      	mov	r3, r5
 8001338:	0459      	lsls	r1, r3, #17
 800133a:	4623      	mov	r3, r4
 800133c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001340:	4623      	mov	r3, r4
 8001342:	0458      	lsls	r0, r3, #17
 8001344:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001348:	1814      	adds	r4, r2, r0
 800134a:	643c      	str	r4, [r7, #64]	; 0x40
 800134c:	414b      	adcs	r3, r1
 800134e:	647b      	str	r3, [r7, #68]	; 0x44
 8001350:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001354:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001358:	4b72      	ldr	r3, [pc, #456]	; (8001524 <BME280_compensate_P_int64+0x2d8>)
 800135a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135e:	b21b      	sxth	r3, r3
 8001360:	17da      	asrs	r2, r3, #31
 8001362:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001366:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800136a:	f04f 0000 	mov.w	r0, #0
 800136e:	f04f 0100 	mov.w	r1, #0
 8001372:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001376:	00d9      	lsls	r1, r3, #3
 8001378:	2000      	movs	r0, #0
 800137a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800137e:	1814      	adds	r4, r2, r0
 8001380:	63bc      	str	r4, [r7, #56]	; 0x38
 8001382:	414b      	adcs	r3, r1
 8001384:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001386:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800138a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800138e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001392:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001396:	fb03 f102 	mul.w	r1, r3, r2
 800139a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800139e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013a2:	fb02 f303 	mul.w	r3, r2, r3
 80013a6:	18ca      	adds	r2, r1, r3
 80013a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013ac:	fba3 1303 	umull	r1, r3, r3, r3
 80013b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80013b4:	460b      	mov	r3, r1
 80013b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80013ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80013be:	18d3      	adds	r3, r2, r3
 80013c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80013c4:	4b58      	ldr	r3, [pc, #352]	; (8001528 <BME280_compensate_P_int64+0x2dc>)
 80013c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	17da      	asrs	r2, r3, #31
 80013ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80013d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80013d6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80013da:	462b      	mov	r3, r5
 80013dc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80013e0:	4642      	mov	r2, r8
 80013e2:	fb02 f203 	mul.w	r2, r2, r3
 80013e6:	464b      	mov	r3, r9
 80013e8:	4621      	mov	r1, r4
 80013ea:	fb01 f303 	mul.w	r3, r1, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	4622      	mov	r2, r4
 80013f2:	4641      	mov	r1, r8
 80013f4:	fba2 1201 	umull	r1, r2, r2, r1
 80013f8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80013fc:	460a      	mov	r2, r1
 80013fe:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001402:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001406:	4413      	add	r3, r2
 8001408:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800140c:	f04f 0000 	mov.w	r0, #0
 8001410:	f04f 0100 	mov.w	r1, #0
 8001414:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001418:	4623      	mov	r3, r4
 800141a:	0a18      	lsrs	r0, r3, #8
 800141c:	462b      	mov	r3, r5
 800141e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001422:	462b      	mov	r3, r5
 8001424:	1219      	asrs	r1, r3, #8
 8001426:	4b41      	ldr	r3, [pc, #260]	; (800152c <BME280_compensate_P_int64+0x2e0>)
 8001428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142c:	b21b      	sxth	r3, r3
 800142e:	17da      	asrs	r2, r3, #31
 8001430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001434:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001438:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800143c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001440:	464a      	mov	r2, r9
 8001442:	fb02 f203 	mul.w	r2, r2, r3
 8001446:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800144a:	4644      	mov	r4, r8
 800144c:	fb04 f303 	mul.w	r3, r4, r3
 8001450:	441a      	add	r2, r3
 8001452:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001456:	4644      	mov	r4, r8
 8001458:	fba3 4304 	umull	r4, r3, r3, r4
 800145c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001460:	4623      	mov	r3, r4
 8001462:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001466:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800146a:	18d3      	adds	r3, r2, r3
 800146c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800147c:	464c      	mov	r4, r9
 800147e:	0323      	lsls	r3, r4, #12
 8001480:	4644      	mov	r4, r8
 8001482:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001486:	4644      	mov	r4, r8
 8001488:	0322      	lsls	r2, r4, #12
 800148a:	1884      	adds	r4, r0, r2
 800148c:	633c      	str	r4, [r7, #48]	; 0x30
 800148e:	eb41 0303 	adc.w	r3, r1, r3
 8001492:	637b      	str	r3, [r7, #52]	; 0x34
 8001494:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001498:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 800149c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80014a0:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80014a4:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80014a8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80014ac:	4b20      	ldr	r3, [pc, #128]	; (8001530 <BME280_compensate_P_int64+0x2e4>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	2200      	movs	r2, #0
 80014b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80014b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80014bc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80014c0:	462b      	mov	r3, r5
 80014c2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80014c6:	4642      	mov	r2, r8
 80014c8:	fb02 f203 	mul.w	r2, r2, r3
 80014cc:	464b      	mov	r3, r9
 80014ce:	4621      	mov	r1, r4
 80014d0:	fb01 f303 	mul.w	r3, r1, r3
 80014d4:	4413      	add	r3, r2
 80014d6:	4622      	mov	r2, r4
 80014d8:	4641      	mov	r1, r8
 80014da:	fba2 1201 	umull	r1, r2, r2, r1
 80014de:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80014e2:	460a      	mov	r2, r1
 80014e4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80014e8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80014ec:	4413      	add	r3, r2
 80014ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80014fe:	4629      	mov	r1, r5
 8001500:	104a      	asrs	r2, r1, #1
 8001502:	4629      	mov	r1, r5
 8001504:	17cb      	asrs	r3, r1, #31
 8001506:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 800150a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800150e:	4313      	orrs	r3, r2
 8001510:	d110      	bne.n	8001534 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001512:	2300      	movs	r3, #0
 8001514:	e154      	b.n	80017c0 <BME280_compensate_P_int64+0x574>
 8001516:	bf00      	nop
 8001518:	200000e0 	.word	0x200000e0
 800151c:	200000d0 	.word	0x200000d0
 8001520:	200000ce 	.word	0x200000ce
 8001524:	200000cc 	.word	0x200000cc
 8001528:	200000ca 	.word	0x200000ca
 800152c:	200000c8 	.word	0x200000c8
 8001530:	200000be 	.word	0x200000be
	}
	p = 1048576-adc_P;
 8001534:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001538:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800153c:	17da      	asrs	r2, r3, #31
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001540:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001542:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001546:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800154a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800154e:	105b      	asrs	r3, r3, #1
 8001550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001554:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001558:	07db      	lsls	r3, r3, #31
 800155a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800155e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001562:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001566:	4621      	mov	r1, r4
 8001568:	1a89      	subs	r1, r1, r2
 800156a:	67b9      	str	r1, [r7, #120]	; 0x78
 800156c:	4629      	mov	r1, r5
 800156e:	eb61 0303 	sbc.w	r3, r1, r3
 8001572:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001574:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001578:	4622      	mov	r2, r4
 800157a:	462b      	mov	r3, r5
 800157c:	1891      	adds	r1, r2, r2
 800157e:	6239      	str	r1, [r7, #32]
 8001580:	415b      	adcs	r3, r3
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
 8001584:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001588:	4621      	mov	r1, r4
 800158a:	1851      	adds	r1, r2, r1
 800158c:	61b9      	str	r1, [r7, #24]
 800158e:	4629      	mov	r1, r5
 8001590:	414b      	adcs	r3, r1
 8001592:	61fb      	str	r3, [r7, #28]
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80015a0:	4649      	mov	r1, r9
 80015a2:	018b      	lsls	r3, r1, #6
 80015a4:	4641      	mov	r1, r8
 80015a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015aa:	4641      	mov	r1, r8
 80015ac:	018a      	lsls	r2, r1, #6
 80015ae:	4641      	mov	r1, r8
 80015b0:	1889      	adds	r1, r1, r2
 80015b2:	6139      	str	r1, [r7, #16]
 80015b4:	4649      	mov	r1, r9
 80015b6:	eb43 0101 	adc.w	r1, r3, r1
 80015ba:	6179      	str	r1, [r7, #20]
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80015c8:	4649      	mov	r1, r9
 80015ca:	008b      	lsls	r3, r1, #2
 80015cc:	4641      	mov	r1, r8
 80015ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015d2:	4641      	mov	r1, r8
 80015d4:	008a      	lsls	r2, r1, #2
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	4603      	mov	r3, r0
 80015dc:	4622      	mov	r2, r4
 80015de:	189b      	adds	r3, r3, r2
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	460b      	mov	r3, r1
 80015e4:	462a      	mov	r2, r5
 80015e6:	eb42 0303 	adc.w	r3, r2, r3
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80015f8:	4649      	mov	r1, r9
 80015fa:	008b      	lsls	r3, r1, #2
 80015fc:	4641      	mov	r1, r8
 80015fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001602:	4641      	mov	r1, r8
 8001604:	008a      	lsls	r2, r1, #2
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	4603      	mov	r3, r0
 800160c:	4622      	mov	r2, r4
 800160e:	189b      	adds	r3, r3, r2
 8001610:	673b      	str	r3, [r7, #112]	; 0x70
 8001612:	462b      	mov	r3, r5
 8001614:	460a      	mov	r2, r1
 8001616:	eb42 0303 	adc.w	r3, r2, r3
 800161a:	677b      	str	r3, [r7, #116]	; 0x74
 800161c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001620:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001624:	f7ff f9f6 	bl	8000a14 <__aeabi_ldivmod>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001630:	4b66      	ldr	r3, [pc, #408]	; (80017cc <BME280_compensate_P_int64+0x580>)
 8001632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001636:	b21b      	sxth	r3, r3
 8001638:	17da      	asrs	r2, r3, #31
 800163a:	66bb      	str	r3, [r7, #104]	; 0x68
 800163c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800163e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001642:	f04f 0000 	mov.w	r0, #0
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	0b50      	lsrs	r0, r2, #13
 800164c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001650:	1359      	asrs	r1, r3, #13
 8001652:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001656:	462b      	mov	r3, r5
 8001658:	fb00 f203 	mul.w	r2, r0, r3
 800165c:	4623      	mov	r3, r4
 800165e:	fb03 f301 	mul.w	r3, r3, r1
 8001662:	4413      	add	r3, r2
 8001664:	4622      	mov	r2, r4
 8001666:	fba2 1200 	umull	r1, r2, r2, r0
 800166a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800166e:	460a      	mov	r2, r1
 8001670:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001674:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001678:	4413      	add	r3, r2
 800167a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800167e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001682:	f04f 0000 	mov.w	r0, #0
 8001686:	f04f 0100 	mov.w	r1, #0
 800168a:	0b50      	lsrs	r0, r2, #13
 800168c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001690:	1359      	asrs	r1, r3, #13
 8001692:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001696:	462b      	mov	r3, r5
 8001698:	fb00 f203 	mul.w	r2, r0, r3
 800169c:	4623      	mov	r3, r4
 800169e:	fb03 f301 	mul.w	r3, r3, r1
 80016a2:	4413      	add	r3, r2
 80016a4:	4622      	mov	r2, r4
 80016a6:	fba2 1200 	umull	r1, r2, r2, r0
 80016aa:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80016ae:	460a      	mov	r2, r1
 80016b0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80016b4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80016b8:	4413      	add	r3, r2
 80016ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80016ca:	4621      	mov	r1, r4
 80016cc:	0e4a      	lsrs	r2, r1, #25
 80016ce:	4629      	mov	r1, r5
 80016d0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80016d4:	4629      	mov	r1, r5
 80016d6:	164b      	asrs	r3, r1, #25
 80016d8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80016dc:	4b3c      	ldr	r3, [pc, #240]	; (80017d0 <BME280_compensate_P_int64+0x584>)
 80016de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	17da      	asrs	r2, r3, #31
 80016e6:	663b      	str	r3, [r7, #96]	; 0x60
 80016e8:	667a      	str	r2, [r7, #100]	; 0x64
 80016ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016ee:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80016f2:	462a      	mov	r2, r5
 80016f4:	fb02 f203 	mul.w	r2, r2, r3
 80016f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016fc:	4621      	mov	r1, r4
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	4413      	add	r3, r2
 8001704:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001708:	4621      	mov	r1, r4
 800170a:	fba2 1201 	umull	r1, r2, r2, r1
 800170e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001712:	460a      	mov	r2, r1
 8001714:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001718:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800171c:	4413      	add	r3, r2
 800171e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800172e:	4621      	mov	r1, r4
 8001730:	0cca      	lsrs	r2, r1, #19
 8001732:	4629      	mov	r1, r5
 8001734:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001738:	4629      	mov	r1, r5
 800173a:	14cb      	asrs	r3, r1, #19
 800173c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001740:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001744:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001748:	1884      	adds	r4, r0, r2
 800174a:	65bc      	str	r4, [r7, #88]	; 0x58
 800174c:	eb41 0303 	adc.w	r3, r1, r3
 8001750:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001752:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001756:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800175a:	4621      	mov	r1, r4
 800175c:	1889      	adds	r1, r1, r2
 800175e:	6539      	str	r1, [r7, #80]	; 0x50
 8001760:	4629      	mov	r1, r5
 8001762:	eb43 0101 	adc.w	r1, r3, r1
 8001766:	6579      	str	r1, [r7, #84]	; 0x54
 8001768:	f04f 0000 	mov.w	r0, #0
 800176c:	f04f 0100 	mov.w	r1, #0
 8001770:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001774:	4623      	mov	r3, r4
 8001776:	0a18      	lsrs	r0, r3, #8
 8001778:	462b      	mov	r3, r5
 800177a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800177e:	462b      	mov	r3, r5
 8001780:	1219      	asrs	r1, r3, #8
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <BME280_compensate_P_int64+0x588>)
 8001784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001788:	b21b      	sxth	r3, r3
 800178a:	17da      	asrs	r2, r3, #31
 800178c:	64bb      	str	r3, [r7, #72]	; 0x48
 800178e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800179c:	464c      	mov	r4, r9
 800179e:	0123      	lsls	r3, r4, #4
 80017a0:	4644      	mov	r4, r8
 80017a2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80017a6:	4644      	mov	r4, r8
 80017a8:	0122      	lsls	r2, r4, #4
 80017aa:	1884      	adds	r4, r0, r2
 80017ac:	603c      	str	r4, [r7, #0]
 80017ae:	eb41 0303 	adc.w	r3, r1, r3
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017b8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 80017bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80017c6:	46bd      	mov	sp, r7
 80017c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017cc:	200000d6 	.word	0x200000d6
 80017d0:	200000d4 	.word	0x200000d4
 80017d4:	200000d2 	.word	0x200000d2

080017d8 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 80017e0:	4b2c      	ldr	r3, [pc, #176]	; (8001894 <bme280_compensate_H_int32+0xbc>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80017e8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	039a      	lsls	r2, r3, #14
 80017ee:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <bme280_compensate_H_int32+0xc0>)
 80017f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f4:	051b      	lsls	r3, r3, #20
 80017f6:	1ad2      	subs	r2, r2, r3
 80017f8:	4b28      	ldr	r3, [pc, #160]	; (800189c <bme280_compensate_H_int32+0xc4>)
 80017fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017fe:	4619      	mov	r1, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	fb01 f303 	mul.w	r3, r1, r3
 8001806:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001808:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800180c:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 800180e:	4a24      	ldr	r2, [pc, #144]	; (80018a0 <bme280_compensate_H_int32+0xc8>)
 8001810:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001814:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 800181c:	1292      	asrs	r2, r2, #10
 800181e:	4921      	ldr	r1, [pc, #132]	; (80018a4 <bme280_compensate_H_int32+0xcc>)
 8001820:	8809      	ldrh	r1, [r1, #0]
 8001822:	4608      	mov	r0, r1
 8001824:	68f9      	ldr	r1, [r7, #12]
 8001826:	fb00 f101 	mul.w	r1, r0, r1
 800182a:	12c9      	asrs	r1, r1, #11
 800182c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001830:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001834:	1292      	asrs	r2, r2, #10
 8001836:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800183a:	491b      	ldr	r1, [pc, #108]	; (80018a8 <bme280_compensate_H_int32+0xd0>)
 800183c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001840:	fb01 f202 	mul.w	r2, r1, r2
 8001844:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001848:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 800184a:	fb02 f303 	mul.w	r3, r2, r3
 800184e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	13db      	asrs	r3, r3, #15
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	13d2      	asrs	r2, r2, #15
 8001858:	fb02 f303 	mul.w	r3, r2, r3
 800185c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 800185e:	4a13      	ldr	r2, [pc, #76]	; (80018ac <bme280_compensate_H_int32+0xd4>)
 8001860:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001862:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001866:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001874:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 800187c:	bfa8      	it	ge
 800187e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001882:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	131b      	asrs	r3, r3, #12
}
 8001888:	4618      	mov	r0, r3
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	200000e0 	.word	0x200000e0
 8001898:	200000da 	.word	0x200000da
 800189c:	200000dc 	.word	0x200000dc
 80018a0:	200000de 	.word	0x200000de
 80018a4:	200000c2 	.word	0x200000c2
 80018a8:	200000d8 	.word	0x200000d8
 80018ac:	200000c0 	.word	0x200000c0

080018b0 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 80018b4:	f7ff fc38 	bl	8001128 <BMEReadRaw>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d163      	bne.n	8001986 <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 80018be:	4b39      	ldr	r3, [pc, #228]	; (80019a4 <BME280_Measure+0xf4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80018c6:	d104      	bne.n	80018d2 <BME280_Measure+0x22>
 80018c8:	4b37      	ldr	r3, [pc, #220]	; (80019a8 <BME280_Measure+0xf8>)
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	e016      	b.n	8001900 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 80018d2:	4b34      	ldr	r3, [pc, #208]	; (80019a4 <BME280_Measure+0xf4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fc76 	bl	80011c8 <BME280_compensate_T_int32>
 80018dc:	4603      	mov	r3, r0
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fdcc 	bl	800047c <__aeabi_i2d>
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	4b30      	ldr	r3, [pc, #192]	; (80019ac <BME280_Measure+0xfc>)
 80018ea:	f7fe ff5b 	bl	80007a4 <__aeabi_ddiv>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f7ff f83d 	bl	8000974 <__aeabi_d2f>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4a2a      	ldr	r2, [pc, #168]	; (80019a8 <BME280_Measure+0xf8>)
 80018fe:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001900:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <BME280_Measure+0x100>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001908:	d104      	bne.n	8001914 <BME280_Measure+0x64>
 800190a:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <BME280_Measure+0x104>)
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	e016      	b.n	8001942 <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001914:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <BME280_Measure+0x100>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fc97 	bl	800124c <BME280_compensate_P_int64>
 800191e:	4603      	mov	r3, r0
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fd9b 	bl	800045c <__aeabi_ui2d>
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <BME280_Measure+0x108>)
 800192c:	f7fe ff3a 	bl	80007a4 <__aeabi_ddiv>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	f7ff f81c 	bl	8000974 <__aeabi_d2f>
 800193c:	4603      	mov	r3, r0
 800193e:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <BME280_Measure+0x104>)
 8001940:	6013      	str	r3, [r2, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001942:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <BME280_Measure+0x10c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800194a:	d104      	bne.n	8001956 <BME280_Measure+0xa6>
 800194c:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <BME280_Measure+0x110>)
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001954:	e023      	b.n	800199e <BME280_Measure+0xee>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001956:	4b19      	ldr	r3, [pc, #100]	; (80019bc <BME280_Measure+0x10c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ff3c 	bl	80017d8 <bme280_compensate_H_int32>
 8001960:	4603      	mov	r3, r0
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fd7a 	bl	800045c <__aeabi_ui2d>
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <BME280_Measure+0x114>)
 800196e:	f7fe ff19 	bl	80007a4 <__aeabi_ddiv>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	f7fe fffb 	bl	8000974 <__aeabi_d2f>
 800197e:	4603      	mov	r3, r0
 8001980:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <BME280_Measure+0x110>)
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	e00b      	b.n	800199e <BME280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <BME280_Measure+0x110>)
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <BME280_Measure+0x110>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <BME280_Measure+0x104>)
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <BME280_Measure+0x104>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a03      	ldr	r2, [pc, #12]	; (80019a8 <BME280_Measure+0xf8>)
 800199c:	6013      	str	r3, [r2, #0]
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200000b0 	.word	0x200000b0
 80019a8:	20000264 	.word	0x20000264
 80019ac:	40590000 	.word	0x40590000
 80019b0:	200000b4 	.word	0x200000b4
 80019b4:	20000268 	.word	0x20000268
 80019b8:	40700000 	.word	0x40700000
 80019bc:	200000b8 	.word	0x200000b8
 80019c0:	2000026c 	.word	0x2000026c
 80019c4:	40900000 	.word	0x40900000

080019c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ce:	f000 fd01 	bl	80023d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019d2:	f000 f837 	bl	8001a44 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80019d6:	f000 f89d 	bl	8001b14 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 80019da:	2304      	movs	r3, #4
 80019dc:	9301      	str	r3, [sp, #4]
 80019de:	2300      	movs	r3, #0
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	2303      	movs	r3, #3
 80019e4:	2201      	movs	r2, #1
 80019e6:	2105      	movs	r1, #5
 80019e8:	2002      	movs	r0, #2
 80019ea:	f7ff fac7 	bl	8000f7c <BME280_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ee:	f000 f99d 	bl	8001d2c <MX_GPIO_Init>
  MX_I2C1_Init();
 80019f2:	f000 f8af 	bl	8001b54 <MX_I2C1_Init>
  MX_I2S2_Init();
 80019f6:	f000 f8db 	bl	8001bb0 <MX_I2S2_Init>
  MX_I2S3_Init();
 80019fa:	f000 f907 	bl	8001c0c <MX_I2S3_Init>
  MX_SPI1_Init();
 80019fe:	f000 f935 	bl	8001c6c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001a02:	f008 facb 	bl	8009f9c <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8001a06:	f000 f967 	bl	8001cd8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_I2C_IsDeviceReady(&hi2c1, 0xEC, 2, 10) == HAL_OK){
 8001a0a:	230a      	movs	r3, #10
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	21ec      	movs	r1, #236	; 0xec
 8001a10:	480a      	ldr	r0, [pc, #40]	; (8001a3c <main+0x74>)
 8001a12:	f003 f893 	bl	8004b3c <HAL_I2C_IsDeviceReady>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d105      	bne.n	8001a28 <main+0x60>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a22:	4807      	ldr	r0, [pc, #28]	; (8001a40 <main+0x78>)
 8001a24:	f001 f802 	bl	8002a2c <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  BME280_Measure();
 8001a28:	f7ff ff42 	bl	80018b0 <BME280_Measure>
	  HAL_Delay(500);
 8001a2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a30:	f000 fd42 	bl	80024b8 <HAL_Delay>
//	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
//	  HAL_Delay(500);


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001a34:	f008 fad8 	bl	8009fe8 <MX_USB_HOST_Process>
	  BME280_Measure();
 8001a38:	e7f6      	b.n	8001a28 <main+0x60>
 8001a3a:	bf00      	nop
 8001a3c:	200000e4 	.word	0x200000e4
 8001a40:	40020c00 	.word	0x40020c00

08001a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b094      	sub	sp, #80	; 0x50
 8001a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a4a:	f107 0320 	add.w	r3, r7, #32
 8001a4e:	2230      	movs	r2, #48	; 0x30
 8001a50:	2100      	movs	r1, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f008 fde4 	bl	800a620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <SystemClock_Config+0xc8>)
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	4a26      	ldr	r2, [pc, #152]	; (8001b0c <SystemClock_Config+0xc8>)
 8001a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a76:	6413      	str	r3, [r2, #64]	; 0x40
 8001a78:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <SystemClock_Config+0xc8>)
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a84:	2300      	movs	r3, #0
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <SystemClock_Config+0xcc>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a20      	ldr	r2, [pc, #128]	; (8001b10 <SystemClock_Config+0xcc>)
 8001a8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	4b1e      	ldr	r3, [pc, #120]	; (8001b10 <SystemClock_Config+0xcc>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ab4:	2304      	movs	r3, #4
 8001ab6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001ab8:	2348      	movs	r3, #72	; 0x48
 8001aba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001abc:	2302      	movs	r3, #2
 8001abe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac4:	f107 0320 	add.w	r3, r7, #32
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f004 f961 	bl	8005d90 <HAL_RCC_OscConfig>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ad4:	f000 fa04 	bl	8001ee0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad8:	230f      	movs	r3, #15
 8001ada:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001adc:	2302      	movs	r3, #2
 8001ade:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aee:	f107 030c 	add.w	r3, r7, #12
 8001af2:	2102      	movs	r1, #2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f004 fbc3 	bl	8006280 <HAL_RCC_ClockConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b00:	f000 f9ee 	bl	8001ee0 <Error_Handler>
  }
}
 8001b04:	bf00      	nop
 8001b06:	3750      	adds	r7, #80	; 0x50
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40007000 	.word	0x40007000

08001b14 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
 8001b28:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001b2e:	23c8      	movs	r3, #200	; 0xc8
 8001b30:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001b32:	2305      	movs	r3, #5
 8001b34:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001b36:	2302      	movs	r3, #2
 8001b38:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f004 fdbf 	bl	80066c0 <HAL_RCCEx_PeriphCLKConfig>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001b48:	f000 f9ca 	bl	8001ee0 <Error_Handler>
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b5a:	4a13      	ldr	r2, [pc, #76]	; (8001ba8 <MX_I2C1_Init+0x54>)
 8001b5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b60:	4a12      	ldr	r2, [pc, #72]	; (8001bac <MX_I2C1_Init+0x58>)
 8001b62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b78:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b84:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b90:	4804      	ldr	r0, [pc, #16]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b92:	f002 fb6f 	bl	8004274 <HAL_I2C_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b9c:	f000 f9a0 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	200000e4 	.word	0x200000e4
 8001ba8:	40005400 	.word	0x40005400
 8001bac:	000186a0 	.word	0x000186a0

08001bb0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <MX_I2S2_Init+0x50>)
 8001bb6:	4a13      	ldr	r2, [pc, #76]	; (8001c04 <MX_I2S2_Init+0x54>)
 8001bb8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <MX_I2S2_Init+0x50>)
 8001bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <MX_I2S2_Init+0x50>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001bc8:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <MX_I2S2_Init+0x50>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001bce:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <MX_I2S2_Init+0x50>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <MX_I2S2_Init+0x50>)
 8001bd6:	4a0c      	ldr	r2, [pc, #48]	; (8001c08 <MX_I2S2_Init+0x58>)
 8001bd8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <MX_I2S2_Init+0x50>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <MX_I2S2_Init+0x50>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <MX_I2S2_Init+0x50>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001bec:	4804      	ldr	r0, [pc, #16]	; (8001c00 <MX_I2S2_Init+0x50>)
 8001bee:	f003 fc2f 	bl	8005450 <HAL_I2S_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8001bf8:	f000 f972 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000138 	.word	0x20000138
 8001c04:	40003800 	.word	0x40003800
 8001c08:	00017700 	.word	0x00017700

08001c0c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <MX_I2S3_Init+0x54>)
 8001c12:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <MX_I2S3_Init+0x58>)
 8001c14:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001c16:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <MX_I2S3_Init+0x54>)
 8001c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c1c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <MX_I2S3_Init+0x54>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <MX_I2S3_Init+0x54>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <MX_I2S3_Init+0x54>)
 8001c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c30:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <MX_I2S3_Init+0x54>)
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <MX_I2S3_Init+0x5c>)
 8001c36:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <MX_I2S3_Init+0x54>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001c3e:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <MX_I2S3_Init+0x54>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <MX_I2S3_Init+0x54>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001c4a:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_I2S3_Init+0x54>)
 8001c4c:	f003 fc00 	bl	8005450 <HAL_I2S_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001c56:	f000 f943 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000180 	.word	0x20000180
 8001c64:	40003c00 	.word	0x40003c00
 8001c68:	00017700 	.word	0x00017700

08001c6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c70:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <MX_SPI1_Init+0x64>)
 8001c72:	4a18      	ldr	r2, [pc, #96]	; (8001cd4 <MX_SPI1_Init+0x68>)
 8001c74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c76:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <MX_SPI1_Init+0x64>)
 8001c78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c7e:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <MX_SPI1_Init+0x64>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <MX_SPI1_Init+0x64>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c8a:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <MX_SPI1_Init+0x64>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <MX_SPI1_Init+0x64>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <MX_SPI1_Init+0x64>)
 8001c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <MX_SPI1_Init+0x64>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ca4:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <MX_SPI1_Init+0x64>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <MX_SPI1_Init+0x64>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <MX_SPI1_Init+0x64>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <MX_SPI1_Init+0x64>)
 8001cb8:	220a      	movs	r2, #10
 8001cba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cbc:	4804      	ldr	r0, [pc, #16]	; (8001cd0 <MX_SPI1_Init+0x64>)
 8001cbe:	f004 fe4f 	bl	8006960 <HAL_SPI_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cc8:	f000 f90a 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	200001c8 	.word	0x200001c8
 8001cd4:	40013000 	.word	0x40013000

08001cd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001cde:	4a12      	ldr	r2, [pc, #72]	; (8001d28 <MX_USART2_UART_Init+0x50>)
 8001ce0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001ce4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ce8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001cfe:	220c      	movs	r2, #12
 8001d00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d0e:	4805      	ldr	r0, [pc, #20]	; (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001d10:	f004 feaf 	bl	8006a72 <HAL_UART_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d1a:	f000 f8e1 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000220 	.word	0x20000220
 8001d28:	40004400 	.word	0x40004400

08001d2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08c      	sub	sp, #48	; 0x30
 8001d30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d32:	f107 031c 	add.w	r3, r7, #28
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	60da      	str	r2, [r3, #12]
 8001d40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	4b61      	ldr	r3, [pc, #388]	; (8001ecc <MX_GPIO_Init+0x1a0>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a60      	ldr	r2, [pc, #384]	; (8001ecc <MX_GPIO_Init+0x1a0>)
 8001d4c:	f043 0310 	orr.w	r3, r3, #16
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b5e      	ldr	r3, [pc, #376]	; (8001ecc <MX_GPIO_Init+0x1a0>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	61bb      	str	r3, [r7, #24]
 8001d5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	4b5a      	ldr	r3, [pc, #360]	; (8001ecc <MX_GPIO_Init+0x1a0>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a59      	ldr	r2, [pc, #356]	; (8001ecc <MX_GPIO_Init+0x1a0>)
 8001d68:	f043 0304 	orr.w	r3, r3, #4
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b57      	ldr	r3, [pc, #348]	; (8001ecc <MX_GPIO_Init+0x1a0>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	4b53      	ldr	r3, [pc, #332]	; (8001ecc <MX_GPIO_Init+0x1a0>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a52      	ldr	r2, [pc, #328]	; (8001ecc <MX_GPIO_Init+0x1a0>)
 8001d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <MX_GPIO_Init+0x1a0>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	4b4c      	ldr	r3, [pc, #304]	; (8001ecc <MX_GPIO_Init+0x1a0>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a4b      	ldr	r2, [pc, #300]	; (8001ecc <MX_GPIO_Init+0x1a0>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b49      	ldr	r3, [pc, #292]	; (8001ecc <MX_GPIO_Init+0x1a0>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	4b45      	ldr	r3, [pc, #276]	; (8001ecc <MX_GPIO_Init+0x1a0>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a44      	ldr	r2, [pc, #272]	; (8001ecc <MX_GPIO_Init+0x1a0>)
 8001dbc:	f043 0302 	orr.w	r3, r3, #2
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b42      	ldr	r3, [pc, #264]	; (8001ecc <MX_GPIO_Init+0x1a0>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ecc <MX_GPIO_Init+0x1a0>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a3d      	ldr	r2, [pc, #244]	; (8001ecc <MX_GPIO_Init+0x1a0>)
 8001dd8:	f043 0308 	orr.w	r3, r3, #8
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b3b      	ldr	r3, [pc, #236]	; (8001ecc <MX_GPIO_Init+0x1a0>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2108      	movs	r1, #8
 8001dee:	4838      	ldr	r0, [pc, #224]	; (8001ed0 <MX_GPIO_Init+0x1a4>)
 8001df0:	f000 fe1c 	bl	8002a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001df4:	2201      	movs	r2, #1
 8001df6:	2101      	movs	r1, #1
 8001df8:	4836      	ldr	r0, [pc, #216]	; (8001ed4 <MX_GPIO_Init+0x1a8>)
 8001dfa:	f000 fe17 	bl	8002a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|GPIO_PIN_15
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001e04:	4834      	ldr	r0, [pc, #208]	; (8001ed8 <MX_GPIO_Init+0x1ac>)
 8001e06:	f000 fe11 	bl	8002a2c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001e16:	f107 031c 	add.w	r3, r7, #28
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	482c      	ldr	r0, [pc, #176]	; (8001ed0 <MX_GPIO_Init+0x1a4>)
 8001e1e:	f000 fc81 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001e22:	2308      	movs	r3, #8
 8001e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e26:	2301      	movs	r3, #1
 8001e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001e32:	f107 031c 	add.w	r3, r7, #28
 8001e36:	4619      	mov	r1, r3
 8001e38:	4825      	ldr	r0, [pc, #148]	; (8001ed0 <MX_GPIO_Init+0x1a4>)
 8001e3a:	f000 fc73 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001e3e:	2332      	movs	r3, #50	; 0x32
 8001e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e42:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e4c:	f107 031c 	add.w	r3, r7, #28
 8001e50:	4619      	mov	r1, r3
 8001e52:	481f      	ldr	r0, [pc, #124]	; (8001ed0 <MX_GPIO_Init+0x1a4>)
 8001e54:	f000 fc66 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4819      	ldr	r0, [pc, #100]	; (8001ed4 <MX_GPIO_Init+0x1a8>)
 8001e70:	f000 fc58 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e74:	2301      	movs	r3, #1
 8001e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e78:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e82:	f107 031c 	add.w	r3, r7, #28
 8001e86:	4619      	mov	r1, r3
 8001e88:	4814      	ldr	r0, [pc, #80]	; (8001edc <MX_GPIO_Init+0x1b0>)
 8001e8a:	f000 fc4b 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin PD15
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|GPIO_PIN_15
 8001e8e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001e92:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e94:	2301      	movs	r3, #1
 8001e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ea0:	f107 031c 	add.w	r3, r7, #28
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	480c      	ldr	r0, [pc, #48]	; (8001ed8 <MX_GPIO_Init+0x1ac>)
 8001ea8:	f000 fc3c 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001eac:	2320      	movs	r3, #32
 8001eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4806      	ldr	r0, [pc, #24]	; (8001ed8 <MX_GPIO_Init+0x1ac>)
 8001ec0:	f000 fc30 	bl	8002724 <HAL_GPIO_Init>

}
 8001ec4:	bf00      	nop
 8001ec6:	3730      	adds	r7, #48	; 0x30
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40020800 	.word	0x40020800
 8001ed8:	40020c00 	.word	0x40020c00
 8001edc:	40020000 	.word	0x40020000

08001ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee4:	b672      	cpsid	i
}
 8001ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <Error_Handler+0x8>
	...

08001eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <HAL_MspInit+0x4c>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	4a0f      	ldr	r2, [pc, #60]	; (8001f38 <HAL_MspInit+0x4c>)
 8001efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f00:	6453      	str	r3, [r2, #68]	; 0x44
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <HAL_MspInit+0x4c>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	603b      	str	r3, [r7, #0]
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <HAL_MspInit+0x4c>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	4a08      	ldr	r2, [pc, #32]	; (8001f38 <HAL_MspInit+0x4c>)
 8001f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_MspInit+0x4c>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f2a:	2007      	movs	r0, #7
 8001f2c:	f000 fbb8 	bl	80026a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40023800 	.word	0x40023800

08001f3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08a      	sub	sp, #40	; 0x28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a19      	ldr	r2, [pc, #100]	; (8001fc0 <HAL_I2C_MspInit+0x84>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d12c      	bne.n	8001fb8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <HAL_I2C_MspInit+0x88>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a17      	ldr	r2, [pc, #92]	; (8001fc4 <HAL_I2C_MspInit+0x88>)
 8001f68:	f043 0302 	orr.w	r3, r3, #2
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <HAL_I2C_MspInit+0x88>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001f7a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f80:	2312      	movs	r3, #18
 8001f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f84:	2301      	movs	r3, #1
 8001f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	4619      	mov	r1, r3
 8001f96:	480c      	ldr	r0, [pc, #48]	; (8001fc8 <HAL_I2C_MspInit+0x8c>)
 8001f98:	f000 fbc4 	bl	8002724 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_I2C_MspInit+0x88>)
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	4a07      	ldr	r2, [pc, #28]	; (8001fc4 <HAL_I2C_MspInit+0x88>)
 8001fa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001faa:	6413      	str	r3, [r2, #64]	; 0x40
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_I2C_MspInit+0x88>)
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fb8:	bf00      	nop
 8001fba:	3728      	adds	r7, #40	; 0x28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40005400 	.word	0x40005400
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40020400 	.word	0x40020400

08001fcc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08e      	sub	sp, #56	; 0x38
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a59      	ldr	r2, [pc, #356]	; (8002150 <HAL_I2S_MspInit+0x184>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d15b      	bne.n	80020a6 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	623b      	str	r3, [r7, #32]
 8001ff2:	4b58      	ldr	r3, [pc, #352]	; (8002154 <HAL_I2S_MspInit+0x188>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	4a57      	ldr	r2, [pc, #348]	; (8002154 <HAL_I2S_MspInit+0x188>)
 8001ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffe:	4b55      	ldr	r3, [pc, #340]	; (8002154 <HAL_I2S_MspInit+0x188>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002006:	623b      	str	r3, [r7, #32]
 8002008:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	4b51      	ldr	r3, [pc, #324]	; (8002154 <HAL_I2S_MspInit+0x188>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a50      	ldr	r2, [pc, #320]	; (8002154 <HAL_I2S_MspInit+0x188>)
 8002014:	f043 0304 	orr.w	r3, r3, #4
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b4e      	ldr	r3, [pc, #312]	; (8002154 <HAL_I2S_MspInit+0x188>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
 800202a:	4b4a      	ldr	r3, [pc, #296]	; (8002154 <HAL_I2S_MspInit+0x188>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a49      	ldr	r2, [pc, #292]	; (8002154 <HAL_I2S_MspInit+0x188>)
 8002030:	f043 0302 	orr.w	r3, r3, #2
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b47      	ldr	r3, [pc, #284]	; (8002154 <HAL_I2S_MspInit+0x188>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	61bb      	str	r3, [r7, #24]
 8002040:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002042:	2304      	movs	r3, #4
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002046:	2302      	movs	r3, #2
 8002048:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204e:	2300      	movs	r3, #0
 8002050:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8002052:	2306      	movs	r3, #6
 8002054:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800205a:	4619      	mov	r1, r3
 800205c:	483e      	ldr	r0, [pc, #248]	; (8002158 <HAL_I2S_MspInit+0x18c>)
 800205e:	f000 fb61 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002062:	2308      	movs	r3, #8
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	2300      	movs	r3, #0
 8002070:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002072:	2305      	movs	r3, #5
 8002074:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207a:	4619      	mov	r1, r3
 800207c:	4836      	ldr	r0, [pc, #216]	; (8002158 <HAL_I2S_MspInit+0x18c>)
 800207e:	f000 fb51 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8002082:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002090:	2300      	movs	r3, #0
 8002092:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002094:	2305      	movs	r3, #5
 8002096:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209c:	4619      	mov	r1, r3
 800209e:	482f      	ldr	r0, [pc, #188]	; (800215c <HAL_I2S_MspInit+0x190>)
 80020a0:	f000 fb40 	bl	8002724 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80020a4:	e04f      	b.n	8002146 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a2d      	ldr	r2, [pc, #180]	; (8002160 <HAL_I2S_MspInit+0x194>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d14a      	bne.n	8002146 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	4b27      	ldr	r3, [pc, #156]	; (8002154 <HAL_I2S_MspInit+0x188>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	4a26      	ldr	r2, [pc, #152]	; (8002154 <HAL_I2S_MspInit+0x188>)
 80020ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020be:	6413      	str	r3, [r2, #64]	; 0x40
 80020c0:	4b24      	ldr	r3, [pc, #144]	; (8002154 <HAL_I2S_MspInit+0x188>)
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	4b20      	ldr	r3, [pc, #128]	; (8002154 <HAL_I2S_MspInit+0x188>)
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	4a1f      	ldr	r2, [pc, #124]	; (8002154 <HAL_I2S_MspInit+0x188>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6313      	str	r3, [r2, #48]	; 0x30
 80020dc:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_I2S_MspInit+0x188>)
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_I2S_MspInit+0x188>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	4a18      	ldr	r2, [pc, #96]	; (8002154 <HAL_I2S_MspInit+0x188>)
 80020f2:	f043 0304 	orr.w	r3, r3, #4
 80020f6:	6313      	str	r3, [r2, #48]	; 0x30
 80020f8:	4b16      	ldr	r3, [pc, #88]	; (8002154 <HAL_I2S_MspInit+0x188>)
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002104:	2310      	movs	r3, #16
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002114:	2306      	movs	r3, #6
 8002116:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211c:	4619      	mov	r1, r3
 800211e:	4811      	ldr	r0, [pc, #68]	; (8002164 <HAL_I2S_MspInit+0x198>)
 8002120:	f000 fb00 	bl	8002724 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002124:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212a:	2302      	movs	r3, #2
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002136:	2306      	movs	r3, #6
 8002138:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800213a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213e:	4619      	mov	r1, r3
 8002140:	4805      	ldr	r0, [pc, #20]	; (8002158 <HAL_I2S_MspInit+0x18c>)
 8002142:	f000 faef 	bl	8002724 <HAL_GPIO_Init>
}
 8002146:	bf00      	nop
 8002148:	3738      	adds	r7, #56	; 0x38
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40003800 	.word	0x40003800
 8002154:	40023800 	.word	0x40023800
 8002158:	40020800 	.word	0x40020800
 800215c:	40020400 	.word	0x40020400
 8002160:	40003c00 	.word	0x40003c00
 8002164:	40020000 	.word	0x40020000

08002168 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	; 0x28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a19      	ldr	r2, [pc, #100]	; (80021ec <HAL_SPI_MspInit+0x84>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d12b      	bne.n	80021e2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <HAL_SPI_MspInit+0x88>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	4a17      	ldr	r2, [pc, #92]	; (80021f0 <HAL_SPI_MspInit+0x88>)
 8002194:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002198:	6453      	str	r3, [r2, #68]	; 0x44
 800219a:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <HAL_SPI_MspInit+0x88>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HAL_SPI_MspInit+0x88>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a10      	ldr	r2, [pc, #64]	; (80021f0 <HAL_SPI_MspInit+0x88>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <HAL_SPI_MspInit+0x88>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80021c2:	23e0      	movs	r3, #224	; 0xe0
 80021c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ce:	2303      	movs	r3, #3
 80021d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021d2:	2305      	movs	r3, #5
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	4805      	ldr	r0, [pc, #20]	; (80021f4 <HAL_SPI_MspInit+0x8c>)
 80021de:	f000 faa1 	bl	8002724 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021e2:	bf00      	nop
 80021e4:	3728      	adds	r7, #40	; 0x28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40013000 	.word	0x40013000
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40020000 	.word	0x40020000

080021f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	; 0x28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a19      	ldr	r2, [pc, #100]	; (800227c <HAL_UART_MspInit+0x84>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d12b      	bne.n	8002272 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	4b18      	ldr	r3, [pc, #96]	; (8002280 <HAL_UART_MspInit+0x88>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	4a17      	ldr	r2, [pc, #92]	; (8002280 <HAL_UART_MspInit+0x88>)
 8002224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002228:	6413      	str	r3, [r2, #64]	; 0x40
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <HAL_UART_MspInit+0x88>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_UART_MspInit+0x88>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a10      	ldr	r2, [pc, #64]	; (8002280 <HAL_UART_MspInit+0x88>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <HAL_UART_MspInit+0x88>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002252:	230c      	movs	r3, #12
 8002254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225e:	2303      	movs	r3, #3
 8002260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002262:	2307      	movs	r3, #7
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002266:	f107 0314 	add.w	r3, r7, #20
 800226a:	4619      	mov	r1, r3
 800226c:	4805      	ldr	r0, [pc, #20]	; (8002284 <HAL_UART_MspInit+0x8c>)
 800226e:	f000 fa59 	bl	8002724 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002272:	bf00      	nop
 8002274:	3728      	adds	r7, #40	; 0x28
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40004400 	.word	0x40004400
 8002280:	40023800 	.word	0x40023800
 8002284:	40020000 	.word	0x40020000

08002288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800228c:	e7fe      	b.n	800228c <NMI_Handler+0x4>

0800228e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002292:	e7fe      	b.n	8002292 <HardFault_Handler+0x4>

08002294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002298:	e7fe      	b.n	8002298 <MemManage_Handler+0x4>

0800229a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800229e:	e7fe      	b.n	800229e <BusFault_Handler+0x4>

080022a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <UsageFault_Handler+0x4>

080022a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022d4:	f000 f8d0 	bl	8002478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}

080022dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <OTG_FS_IRQHandler+0x10>)
 80022e2:	f000 fe27 	bl	8002f34 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000654 	.word	0x20000654

080022f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022f8:	4a14      	ldr	r2, [pc, #80]	; (800234c <_sbrk+0x5c>)
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <_sbrk+0x60>)
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002304:	4b13      	ldr	r3, [pc, #76]	; (8002354 <_sbrk+0x64>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d102      	bne.n	8002312 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <_sbrk+0x64>)
 800230e:	4a12      	ldr	r2, [pc, #72]	; (8002358 <_sbrk+0x68>)
 8002310:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002312:	4b10      	ldr	r3, [pc, #64]	; (8002354 <_sbrk+0x64>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	429a      	cmp	r2, r3
 800231e:	d207      	bcs.n	8002330 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002320:	f008 f944 	bl	800a5ac <__errno>
 8002324:	4603      	mov	r3, r0
 8002326:	220c      	movs	r2, #12
 8002328:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800232a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800232e:	e009      	b.n	8002344 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <_sbrk+0x64>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002336:	4b07      	ldr	r3, [pc, #28]	; (8002354 <_sbrk+0x64>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	4a05      	ldr	r2, [pc, #20]	; (8002354 <_sbrk+0x64>)
 8002340:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002342:	68fb      	ldr	r3, [r7, #12]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20020000 	.word	0x20020000
 8002350:	00000400 	.word	0x00000400
 8002354:	20000270 	.word	0x20000270
 8002358:	20000968 	.word	0x20000968

0800235c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <SystemInit+0x20>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	4a05      	ldr	r2, [pc, #20]	; (800237c <SystemInit+0x20>)
 8002368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800236c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002384:	480d      	ldr	r0, [pc, #52]	; (80023bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002386:	490e      	ldr	r1, [pc, #56]	; (80023c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002388:	4a0e      	ldr	r2, [pc, #56]	; (80023c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800238a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800238c:	e002      	b.n	8002394 <LoopCopyDataInit>

0800238e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800238e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002392:	3304      	adds	r3, #4

08002394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002398:	d3f9      	bcc.n	800238e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800239a:	4a0b      	ldr	r2, [pc, #44]	; (80023c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800239c:	4c0b      	ldr	r4, [pc, #44]	; (80023cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800239e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a0:	e001      	b.n	80023a6 <LoopFillZerobss>

080023a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a4:	3204      	adds	r2, #4

080023a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a8:	d3fb      	bcc.n	80023a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023aa:	f7ff ffd7 	bl	800235c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ae:	f008 f903 	bl	800a5b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023b2:	f7ff fb09 	bl	80019c8 <main>
  bx  lr    
 80023b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023c0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80023c4:	0800a870 	.word	0x0800a870
  ldr r2, =_sbss
 80023c8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80023cc:	20000968 	.word	0x20000968

080023d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023d0:	e7fe      	b.n	80023d0 <ADC_IRQHandler>
	...

080023d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023d8:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <HAL_Init+0x40>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a0d      	ldr	r2, [pc, #52]	; (8002414 <HAL_Init+0x40>)
 80023de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_Init+0x40>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <HAL_Init+0x40>)
 80023ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <HAL_Init+0x40>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a07      	ldr	r2, [pc, #28]	; (8002414 <HAL_Init+0x40>)
 80023f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023fc:	2003      	movs	r0, #3
 80023fe:	f000 f94f 	bl	80026a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002402:	2000      	movs	r0, #0
 8002404:	f000 f808 	bl	8002418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002408:	f7ff fd70 	bl	8001eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40023c00 	.word	0x40023c00

08002418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002420:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_InitTick+0x54>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_InitTick+0x58>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	4619      	mov	r1, r3
 800242a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800242e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002432:	fbb2 f3f3 	udiv	r3, r2, r3
 8002436:	4618      	mov	r0, r3
 8002438:	f000 f967 	bl	800270a <HAL_SYSTICK_Config>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e00e      	b.n	8002464 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b0f      	cmp	r3, #15
 800244a:	d80a      	bhi.n	8002462 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800244c:	2200      	movs	r2, #0
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002454:	f000 f92f 	bl	80026b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002458:	4a06      	ldr	r2, [pc, #24]	; (8002474 <HAL_InitTick+0x5c>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	e000      	b.n	8002464 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
}
 8002464:	4618      	mov	r0, r3
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20000000 	.word	0x20000000
 8002470:	20000008 	.word	0x20000008
 8002474:	20000004 	.word	0x20000004

08002478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_IncTick+0x20>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_IncTick+0x24>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4413      	add	r3, r2
 8002488:	4a04      	ldr	r2, [pc, #16]	; (800249c <HAL_IncTick+0x24>)
 800248a:	6013      	str	r3, [r2, #0]
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000008 	.word	0x20000008
 800249c:	20000274 	.word	0x20000274

080024a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return uwTick;
 80024a4:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <HAL_GetTick+0x14>)
 80024a6:	681b      	ldr	r3, [r3, #0]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	20000274 	.word	0x20000274

080024b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c0:	f7ff ffee 	bl	80024a0 <HAL_GetTick>
 80024c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024d0:	d005      	beq.n	80024de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_Delay+0x44>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4413      	add	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024de:	bf00      	nop
 80024e0:	f7ff ffde 	bl	80024a0 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d8f7      	bhi.n	80024e0 <HAL_Delay+0x28>
  {
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000008 	.word	0x20000008

08002500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <__NVIC_SetPriorityGrouping+0x44>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800251c:	4013      	ands	r3, r2
 800251e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002528:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800252c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002532:	4a04      	ldr	r2, [pc, #16]	; (8002544 <__NVIC_SetPriorityGrouping+0x44>)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	60d3      	str	r3, [r2, #12]
}
 8002538:	bf00      	nop
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <__NVIC_GetPriorityGrouping+0x18>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	f003 0307 	and.w	r3, r3, #7
}
 8002556:	4618      	mov	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	2b00      	cmp	r3, #0
 8002574:	db0b      	blt.n	800258e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	f003 021f 	and.w	r2, r3, #31
 800257c:	4907      	ldr	r1, [pc, #28]	; (800259c <__NVIC_EnableIRQ+0x38>)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	095b      	lsrs	r3, r3, #5
 8002584:	2001      	movs	r0, #1
 8002586:	fa00 f202 	lsl.w	r2, r0, r2
 800258a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	e000e100 	.word	0xe000e100

080025a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	db0a      	blt.n	80025ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	490c      	ldr	r1, [pc, #48]	; (80025ec <__NVIC_SetPriority+0x4c>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	0112      	lsls	r2, r2, #4
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	440b      	add	r3, r1
 80025c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c8:	e00a      	b.n	80025e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4908      	ldr	r1, [pc, #32]	; (80025f0 <__NVIC_SetPriority+0x50>)
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	3b04      	subs	r3, #4
 80025d8:	0112      	lsls	r2, r2, #4
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	440b      	add	r3, r1
 80025de:	761a      	strb	r2, [r3, #24]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000e100 	.word	0xe000e100
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b089      	sub	sp, #36	; 0x24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f1c3 0307 	rsb	r3, r3, #7
 800260e:	2b04      	cmp	r3, #4
 8002610:	bf28      	it	cs
 8002612:	2304      	movcs	r3, #4
 8002614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3304      	adds	r3, #4
 800261a:	2b06      	cmp	r3, #6
 800261c:	d902      	bls.n	8002624 <NVIC_EncodePriority+0x30>
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3b03      	subs	r3, #3
 8002622:	e000      	b.n	8002626 <NVIC_EncodePriority+0x32>
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002628:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43da      	mvns	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	401a      	ands	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800263c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	43d9      	mvns	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264c:	4313      	orrs	r3, r2
         );
}
 800264e:	4618      	mov	r0, r3
 8002650:	3724      	adds	r7, #36	; 0x24
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
	...

0800265c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3b01      	subs	r3, #1
 8002668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800266c:	d301      	bcc.n	8002672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800266e:	2301      	movs	r3, #1
 8002670:	e00f      	b.n	8002692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002672:	4a0a      	ldr	r2, [pc, #40]	; (800269c <SysTick_Config+0x40>)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3b01      	subs	r3, #1
 8002678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800267a:	210f      	movs	r1, #15
 800267c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002680:	f7ff ff8e 	bl	80025a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <SysTick_Config+0x40>)
 8002686:	2200      	movs	r2, #0
 8002688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800268a:	4b04      	ldr	r3, [pc, #16]	; (800269c <SysTick_Config+0x40>)
 800268c:	2207      	movs	r2, #7
 800268e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	e000e010 	.word	0xe000e010

080026a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff ff29 	bl	8002500 <__NVIC_SetPriorityGrouping>
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b086      	sub	sp, #24
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	4603      	mov	r3, r0
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
 80026c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026c8:	f7ff ff3e 	bl	8002548 <__NVIC_GetPriorityGrouping>
 80026cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	6978      	ldr	r0, [r7, #20]
 80026d4:	f7ff ff8e 	bl	80025f4 <NVIC_EncodePriority>
 80026d8:	4602      	mov	r2, r0
 80026da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026de:	4611      	mov	r1, r2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff ff5d 	bl	80025a0 <__NVIC_SetPriority>
}
 80026e6:	bf00      	nop
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	4603      	mov	r3, r0
 80026f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff ff31 	bl	8002564 <__NVIC_EnableIRQ>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff ffa2 	bl	800265c <SysTick_Config>
 8002718:	4603      	mov	r3, r0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002724:	b480      	push	{r7}
 8002726:	b089      	sub	sp, #36	; 0x24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002736:	2300      	movs	r3, #0
 8002738:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	e159      	b.n	80029f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002740:	2201      	movs	r2, #1
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	429a      	cmp	r2, r3
 800275a:	f040 8148 	bne.w	80029ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	2b01      	cmp	r3, #1
 8002768:	d005      	beq.n	8002776 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002772:	2b02      	cmp	r3, #2
 8002774:	d130      	bne.n	80027d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	2203      	movs	r2, #3
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027ac:	2201      	movs	r2, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f003 0201 	and.w	r2, r3, #1
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d017      	beq.n	8002814 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	2203      	movs	r2, #3
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d123      	bne.n	8002868 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	08da      	lsrs	r2, r3, #3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3208      	adds	r2, #8
 8002828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	220f      	movs	r2, #15
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	08da      	lsrs	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3208      	adds	r2, #8
 8002862:	69b9      	ldr	r1, [r7, #24]
 8002864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	2203      	movs	r2, #3
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0203 	and.w	r2, r3, #3
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80a2 	beq.w	80029ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	4b57      	ldr	r3, [pc, #348]	; (8002a0c <HAL_GPIO_Init+0x2e8>)
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	4a56      	ldr	r2, [pc, #344]	; (8002a0c <HAL_GPIO_Init+0x2e8>)
 80028b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ba:	4b54      	ldr	r3, [pc, #336]	; (8002a0c <HAL_GPIO_Init+0x2e8>)
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028c6:	4a52      	ldr	r2, [pc, #328]	; (8002a10 <HAL_GPIO_Init+0x2ec>)
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	089b      	lsrs	r3, r3, #2
 80028cc:	3302      	adds	r3, #2
 80028ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	220f      	movs	r2, #15
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a49      	ldr	r2, [pc, #292]	; (8002a14 <HAL_GPIO_Init+0x2f0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d019      	beq.n	8002926 <HAL_GPIO_Init+0x202>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a48      	ldr	r2, [pc, #288]	; (8002a18 <HAL_GPIO_Init+0x2f4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d013      	beq.n	8002922 <HAL_GPIO_Init+0x1fe>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a47      	ldr	r2, [pc, #284]	; (8002a1c <HAL_GPIO_Init+0x2f8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00d      	beq.n	800291e <HAL_GPIO_Init+0x1fa>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a46      	ldr	r2, [pc, #280]	; (8002a20 <HAL_GPIO_Init+0x2fc>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d007      	beq.n	800291a <HAL_GPIO_Init+0x1f6>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a45      	ldr	r2, [pc, #276]	; (8002a24 <HAL_GPIO_Init+0x300>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d101      	bne.n	8002916 <HAL_GPIO_Init+0x1f2>
 8002912:	2304      	movs	r3, #4
 8002914:	e008      	b.n	8002928 <HAL_GPIO_Init+0x204>
 8002916:	2307      	movs	r3, #7
 8002918:	e006      	b.n	8002928 <HAL_GPIO_Init+0x204>
 800291a:	2303      	movs	r3, #3
 800291c:	e004      	b.n	8002928 <HAL_GPIO_Init+0x204>
 800291e:	2302      	movs	r3, #2
 8002920:	e002      	b.n	8002928 <HAL_GPIO_Init+0x204>
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <HAL_GPIO_Init+0x204>
 8002926:	2300      	movs	r3, #0
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	f002 0203 	and.w	r2, r2, #3
 800292e:	0092      	lsls	r2, r2, #2
 8002930:	4093      	lsls	r3, r2
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002938:	4935      	ldr	r1, [pc, #212]	; (8002a10 <HAL_GPIO_Init+0x2ec>)
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	089b      	lsrs	r3, r3, #2
 800293e:	3302      	adds	r3, #2
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002946:	4b38      	ldr	r3, [pc, #224]	; (8002a28 <HAL_GPIO_Init+0x304>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800296a:	4a2f      	ldr	r2, [pc, #188]	; (8002a28 <HAL_GPIO_Init+0x304>)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002970:	4b2d      	ldr	r3, [pc, #180]	; (8002a28 <HAL_GPIO_Init+0x304>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002994:	4a24      	ldr	r2, [pc, #144]	; (8002a28 <HAL_GPIO_Init+0x304>)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800299a:	4b23      	ldr	r3, [pc, #140]	; (8002a28 <HAL_GPIO_Init+0x304>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029be:	4a1a      	ldr	r2, [pc, #104]	; (8002a28 <HAL_GPIO_Init+0x304>)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029c4:	4b18      	ldr	r3, [pc, #96]	; (8002a28 <HAL_GPIO_Init+0x304>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029e8:	4a0f      	ldr	r2, [pc, #60]	; (8002a28 <HAL_GPIO_Init+0x304>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3301      	adds	r3, #1
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	2b0f      	cmp	r3, #15
 80029f8:	f67f aea2 	bls.w	8002740 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	3724      	adds	r7, #36	; 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40013800 	.word	0x40013800
 8002a14:	40020000 	.word	0x40020000
 8002a18:	40020400 	.word	0x40020400
 8002a1c:	40020800 	.word	0x40020800
 8002a20:	40020c00 	.word	0x40020c00
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40013c00 	.word	0x40013c00

08002a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	807b      	strh	r3, [r7, #2]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a3c:	787b      	ldrb	r3, [r7, #1]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a42:	887a      	ldrh	r2, [r7, #2]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a48:	e003      	b.n	8002a52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a4a:	887b      	ldrh	r3, [r7, #2]
 8002a4c:	041a      	lsls	r2, r3, #16
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	619a      	str	r2, [r3, #24]
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002a5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a60:	b08f      	sub	sp, #60	; 0x3c
 8002a62:	af0a      	add	r7, sp, #40	; 0x28
 8002a64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e054      	b.n	8002b1a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d106      	bne.n	8002a90 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f007 fae4 	bl	800a058 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2203      	movs	r2, #3
 8002a94:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d102      	bne.n	8002aaa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f004 fb12 	bl	80070d8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	603b      	str	r3, [r7, #0]
 8002aba:	687e      	ldr	r6, [r7, #4]
 8002abc:	466d      	mov	r5, sp
 8002abe:	f106 0410 	add.w	r4, r6, #16
 8002ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ace:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ad2:	1d33      	adds	r3, r6, #4
 8002ad4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ad6:	6838      	ldr	r0, [r7, #0]
 8002ad8:	f004 fa8c 	bl	8006ff4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f004 fb09 	bl	80070fa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	603b      	str	r3, [r7, #0]
 8002aee:	687e      	ldr	r6, [r7, #4]
 8002af0:	466d      	mov	r5, sp
 8002af2:	f106 0410 	add.w	r4, r6, #16
 8002af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002af8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002afa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002afc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002afe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b02:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b06:	1d33      	adds	r3, r6, #4
 8002b08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b0a:	6838      	ldr	r0, [r7, #0]
 8002b0c:	f004 fc92 	bl	8007434 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b22 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002b22:	b590      	push	{r4, r7, lr}
 8002b24:	b089      	sub	sp, #36	; 0x24
 8002b26:	af04      	add	r7, sp, #16
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	4608      	mov	r0, r1
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	461a      	mov	r2, r3
 8002b30:	4603      	mov	r3, r0
 8002b32:	70fb      	strb	r3, [r7, #3]
 8002b34:	460b      	mov	r3, r1
 8002b36:	70bb      	strb	r3, [r7, #2]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_HCD_HC_Init+0x28>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e076      	b.n	8002c38 <HAL_HCD_HC_Init+0x116>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002b52:	78fb      	ldrb	r3, [r7, #3]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	212c      	movs	r1, #44	; 0x2c
 8002b58:	fb01 f303 	mul.w	r3, r1, r3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	333d      	adds	r3, #61	; 0x3d
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	212c      	movs	r1, #44	; 0x2c
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	3338      	adds	r3, #56	; 0x38
 8002b72:	787a      	ldrb	r2, [r7, #1]
 8002b74:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002b76:	78fb      	ldrb	r3, [r7, #3]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	3340      	adds	r3, #64	; 0x40
 8002b84:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002b86:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	212c      	movs	r1, #44	; 0x2c
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	3339      	adds	r3, #57	; 0x39
 8002b96:	78fa      	ldrb	r2, [r7, #3]
 8002b98:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	212c      	movs	r1, #44	; 0x2c
 8002ba0:	fb01 f303 	mul.w	r3, r1, r3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	333f      	adds	r3, #63	; 0x3f
 8002ba8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002bac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002bae:	78fb      	ldrb	r3, [r7, #3]
 8002bb0:	78ba      	ldrb	r2, [r7, #2]
 8002bb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bb6:	b2d0      	uxtb	r0, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	212c      	movs	r1, #44	; 0x2c
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	333a      	adds	r3, #58	; 0x3a
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002bc8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	da09      	bge.n	8002be4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	212c      	movs	r1, #44	; 0x2c
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	333b      	adds	r3, #59	; 0x3b
 8002bde:	2201      	movs	r2, #1
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	e008      	b.n	8002bf6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	212c      	movs	r1, #44	; 0x2c
 8002bea:	fb01 f303 	mul.w	r3, r1, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	333b      	adds	r3, #59	; 0x3b
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	212c      	movs	r1, #44	; 0x2c
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	333c      	adds	r3, #60	; 0x3c
 8002c04:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002c08:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	787c      	ldrb	r4, [r7, #1]
 8002c10:	78ba      	ldrb	r2, [r7, #2]
 8002c12:	78f9      	ldrb	r1, [r7, #3]
 8002c14:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002c16:	9302      	str	r3, [sp, #8]
 8002c18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c1c:	9301      	str	r3, [sp, #4]
 8002c1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	4623      	mov	r3, r4
 8002c26:	f004 fd8b 	bl	8007740 <USB_HC_Init>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd90      	pop	{r4, r7, pc}

08002c40 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_HCD_HC_Halt+0x1e>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e00f      	b.n	8002c7e <HAL_HCD_HC_Halt+0x3e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f004 ffdb 	bl	8007c2a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	4608      	mov	r0, r1
 8002c92:	4611      	mov	r1, r2
 8002c94:	461a      	mov	r2, r3
 8002c96:	4603      	mov	r3, r0
 8002c98:	70fb      	strb	r3, [r7, #3]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	70bb      	strb	r3, [r7, #2]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	212c      	movs	r1, #44	; 0x2c
 8002ca8:	fb01 f303 	mul.w	r3, r1, r3
 8002cac:	4413      	add	r3, r2
 8002cae:	333b      	adds	r3, #59	; 0x3b
 8002cb0:	78ba      	ldrb	r2, [r7, #2]
 8002cb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	212c      	movs	r1, #44	; 0x2c
 8002cba:	fb01 f303 	mul.w	r3, r1, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	333f      	adds	r3, #63	; 0x3f
 8002cc2:	787a      	ldrb	r2, [r7, #1]
 8002cc4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002cc6:	7c3b      	ldrb	r3, [r7, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d112      	bne.n	8002cf2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	212c      	movs	r1, #44	; 0x2c
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3342      	adds	r3, #66	; 0x42
 8002cda:	2203      	movs	r2, #3
 8002cdc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002cde:	78fb      	ldrb	r3, [r7, #3]
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	212c      	movs	r1, #44	; 0x2c
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	333d      	adds	r3, #61	; 0x3d
 8002cec:	7f3a      	ldrb	r2, [r7, #28]
 8002cee:	701a      	strb	r2, [r3, #0]
 8002cf0:	e008      	b.n	8002d04 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	212c      	movs	r1, #44	; 0x2c
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	3342      	adds	r3, #66	; 0x42
 8002d00:	2202      	movs	r2, #2
 8002d02:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002d04:	787b      	ldrb	r3, [r7, #1]
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	f200 80c6 	bhi.w	8002e98 <HAL_HCD_HC_SubmitRequest+0x210>
 8002d0c:	a201      	add	r2, pc, #4	; (adr r2, 8002d14 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d12:	bf00      	nop
 8002d14:	08002d25 	.word	0x08002d25
 8002d18:	08002e85 	.word	0x08002e85
 8002d1c:	08002d89 	.word	0x08002d89
 8002d20:	08002e07 	.word	0x08002e07
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002d24:	7c3b      	ldrb	r3, [r7, #16]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	f040 80b8 	bne.w	8002e9c <HAL_HCD_HC_SubmitRequest+0x214>
 8002d2c:	78bb      	ldrb	r3, [r7, #2]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f040 80b4 	bne.w	8002e9c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002d34:	8b3b      	ldrh	r3, [r7, #24]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d108      	bne.n	8002d4c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	212c      	movs	r1, #44	; 0x2c
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	3355      	adds	r3, #85	; 0x55
 8002d48:	2201      	movs	r2, #1
 8002d4a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d4c:	78fb      	ldrb	r3, [r7, #3]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	212c      	movs	r1, #44	; 0x2c
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	3355      	adds	r3, #85	; 0x55
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d109      	bne.n	8002d74 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d60:	78fb      	ldrb	r3, [r7, #3]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3342      	adds	r3, #66	; 0x42
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d72:	e093      	b.n	8002e9c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	3342      	adds	r3, #66	; 0x42
 8002d82:	2202      	movs	r2, #2
 8002d84:	701a      	strb	r2, [r3, #0]
      break;
 8002d86:	e089      	b.n	8002e9c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002d88:	78bb      	ldrb	r3, [r7, #2]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d11d      	bne.n	8002dca <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d8e:	78fb      	ldrb	r3, [r7, #3]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	212c      	movs	r1, #44	; 0x2c
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	3355      	adds	r3, #85	; 0x55
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d109      	bne.n	8002db6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	212c      	movs	r1, #44	; 0x2c
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	3342      	adds	r3, #66	; 0x42
 8002db0:	2200      	movs	r2, #0
 8002db2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002db4:	e073      	b.n	8002e9e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002db6:	78fb      	ldrb	r3, [r7, #3]
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	212c      	movs	r1, #44	; 0x2c
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3342      	adds	r3, #66	; 0x42
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	701a      	strb	r2, [r3, #0]
      break;
 8002dc8:	e069      	b.n	8002e9e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002dca:	78fb      	ldrb	r3, [r7, #3]
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	212c      	movs	r1, #44	; 0x2c
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3354      	adds	r3, #84	; 0x54
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d109      	bne.n	8002df2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dde:	78fb      	ldrb	r3, [r7, #3]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	212c      	movs	r1, #44	; 0x2c
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	3342      	adds	r3, #66	; 0x42
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
      break;
 8002df0:	e055      	b.n	8002e9e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002df2:	78fb      	ldrb	r3, [r7, #3]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	212c      	movs	r1, #44	; 0x2c
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3342      	adds	r3, #66	; 0x42
 8002e00:	2202      	movs	r2, #2
 8002e02:	701a      	strb	r2, [r3, #0]
      break;
 8002e04:	e04b      	b.n	8002e9e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002e06:	78bb      	ldrb	r3, [r7, #2]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d11d      	bne.n	8002e48 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e0c:	78fb      	ldrb	r3, [r7, #3]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	212c      	movs	r1, #44	; 0x2c
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	3355      	adds	r3, #85	; 0x55
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d109      	bne.n	8002e34 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	212c      	movs	r1, #44	; 0x2c
 8002e26:	fb01 f303 	mul.w	r3, r1, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3342      	adds	r3, #66	; 0x42
 8002e2e:	2200      	movs	r2, #0
 8002e30:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002e32:	e034      	b.n	8002e9e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	212c      	movs	r1, #44	; 0x2c
 8002e3a:	fb01 f303 	mul.w	r3, r1, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	3342      	adds	r3, #66	; 0x42
 8002e42:	2202      	movs	r2, #2
 8002e44:	701a      	strb	r2, [r3, #0]
      break;
 8002e46:	e02a      	b.n	8002e9e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	212c      	movs	r1, #44	; 0x2c
 8002e4e:	fb01 f303 	mul.w	r3, r1, r3
 8002e52:	4413      	add	r3, r2
 8002e54:	3354      	adds	r3, #84	; 0x54
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d109      	bne.n	8002e70 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	212c      	movs	r1, #44	; 0x2c
 8002e62:	fb01 f303 	mul.w	r3, r1, r3
 8002e66:	4413      	add	r3, r2
 8002e68:	3342      	adds	r3, #66	; 0x42
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
      break;
 8002e6e:	e016      	b.n	8002e9e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e70:	78fb      	ldrb	r3, [r7, #3]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	212c      	movs	r1, #44	; 0x2c
 8002e76:	fb01 f303 	mul.w	r3, r1, r3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3342      	adds	r3, #66	; 0x42
 8002e7e:	2202      	movs	r2, #2
 8002e80:	701a      	strb	r2, [r3, #0]
      break;
 8002e82:	e00c      	b.n	8002e9e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	212c      	movs	r1, #44	; 0x2c
 8002e8a:	fb01 f303 	mul.w	r3, r1, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	3342      	adds	r3, #66	; 0x42
 8002e92:	2200      	movs	r2, #0
 8002e94:	701a      	strb	r2, [r3, #0]
      break;
 8002e96:	e002      	b.n	8002e9e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002e98:	bf00      	nop
 8002e9a:	e000      	b.n	8002e9e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002e9c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002e9e:	78fb      	ldrb	r3, [r7, #3]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	212c      	movs	r1, #44	; 0x2c
 8002ea4:	fb01 f303 	mul.w	r3, r1, r3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3344      	adds	r3, #68	; 0x44
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002eb0:	78fb      	ldrb	r3, [r7, #3]
 8002eb2:	8b3a      	ldrh	r2, [r7, #24]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	202c      	movs	r0, #44	; 0x2c
 8002eb8:	fb00 f303 	mul.w	r3, r0, r3
 8002ebc:	440b      	add	r3, r1
 8002ebe:	334c      	adds	r3, #76	; 0x4c
 8002ec0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	212c      	movs	r1, #44	; 0x2c
 8002ec8:	fb01 f303 	mul.w	r3, r1, r3
 8002ecc:	4413      	add	r3, r2
 8002ece:	3360      	adds	r3, #96	; 0x60
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	212c      	movs	r1, #44	; 0x2c
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	3350      	adds	r3, #80	; 0x50
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ee6:	78fb      	ldrb	r3, [r7, #3]
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	212c      	movs	r1, #44	; 0x2c
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3339      	adds	r3, #57	; 0x39
 8002ef4:	78fa      	ldrb	r2, [r7, #3]
 8002ef6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	212c      	movs	r1, #44	; 0x2c
 8002efe:	fb01 f303 	mul.w	r3, r1, r3
 8002f02:	4413      	add	r3, r2
 8002f04:	3361      	adds	r3, #97	; 0x61
 8002f06:	2200      	movs	r2, #0
 8002f08:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	222c      	movs	r2, #44	; 0x2c
 8002f12:	fb02 f303 	mul.w	r3, r2, r3
 8002f16:	3338      	adds	r3, #56	; 0x38
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	18d1      	adds	r1, r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	461a      	mov	r2, r3
 8002f24:	f004 fd2e 	bl	8007984 <USB_HC_StartXfer>
 8002f28:	4603      	mov	r3, r0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop

08002f34 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f004 fa2f 	bl	80073ae <USB_GetMode>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	f040 80f6 	bne.w	8003144 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f004 fa13 	bl	8007388 <USB_ReadInterrupts>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 80ec 	beq.w	8003142 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f004 fa0a 	bl	8007388 <USB_ReadInterrupts>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f7e:	d104      	bne.n	8002f8a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002f88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f004 f9fa 	bl	8007388 <USB_ReadInterrupts>
 8002f94:	4603      	mov	r3, r0
 8002f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f9e:	d104      	bne.n	8002faa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fa8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f004 f9ea 	bl	8007388 <USB_ReadInterrupts>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fbe:	d104      	bne.n	8002fca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002fc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f004 f9da 	bl	8007388 <USB_ReadInterrupts>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d103      	bne.n	8002fe6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f004 f9cc 	bl	8007388 <USB_ReadInterrupts>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ffa:	d11c      	bne.n	8003036 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003004:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10f      	bne.n	8003036 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003016:	2110      	movs	r1, #16
 8003018:	6938      	ldr	r0, [r7, #16]
 800301a:	f004 f8bb 	bl	8007194 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800301e:	6938      	ldr	r0, [r7, #16]
 8003020:	f004 f8ec 	bl	80071fc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2101      	movs	r1, #1
 800302a:	4618      	mov	r0, r3
 800302c:	f004 fac2 	bl	80075b4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f007 f88f 	bl	800a154 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f004 f9a4 	bl	8007388 <USB_ReadInterrupts>
 8003040:	4603      	mov	r3, r0
 8003042:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003046:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800304a:	d102      	bne.n	8003052 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f001 f89e 	bl	800418e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f004 f996 	bl	8007388 <USB_ReadInterrupts>
 800305c:	4603      	mov	r3, r0
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b08      	cmp	r3, #8
 8003064:	d106      	bne.n	8003074 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f007 f858 	bl	800a11c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2208      	movs	r2, #8
 8003072:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f004 f985 	bl	8007388 <USB_ReadInterrupts>
 800307e:	4603      	mov	r3, r0
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2b10      	cmp	r3, #16
 8003086:	d101      	bne.n	800308c <HAL_HCD_IRQHandler+0x158>
 8003088:	2301      	movs	r3, #1
 800308a:	e000      	b.n	800308e <HAL_HCD_IRQHandler+0x15a>
 800308c:	2300      	movs	r3, #0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d012      	beq.n	80030b8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699a      	ldr	r2, [r3, #24]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0210 	bic.w	r2, r2, #16
 80030a0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 ffa1 	bl	8003fea <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699a      	ldr	r2, [r3, #24]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0210 	orr.w	r2, r2, #16
 80030b6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f004 f963 	bl	8007388 <USB_ReadInterrupts>
 80030c2:	4603      	mov	r3, r0
 80030c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030cc:	d13a      	bne.n	8003144 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f004 fd98 	bl	8007c08 <USB_HC_ReadInterrupt>
 80030d8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	e025      	b.n	800312c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	fa22 f303 	lsr.w	r3, r2, r3
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d018      	beq.n	8003126 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	015a      	lsls	r2, r3, #5
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800310a:	d106      	bne.n	800311a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	4619      	mov	r1, r3
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f8ab 	bl	800326e <HCD_HC_IN_IRQHandler>
 8003118:	e005      	b.n	8003126 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	b2db      	uxtb	r3, r3
 800311e:	4619      	mov	r1, r3
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 fbf9 	bl	8003918 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	3301      	adds	r3, #1
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	429a      	cmp	r2, r3
 8003134:	d3d4      	bcc.n	80030e0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800313e:	615a      	str	r2, [r3, #20]
 8003140:	e000      	b.n	8003144 <HAL_HCD_IRQHandler+0x210>
      return;
 8003142:	bf00      	nop
    }
  }
}
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_HCD_Start+0x16>
 800315c:	2302      	movs	r3, #2
 800315e:	e013      	b.n	8003188 <HAL_HCD_Start+0x3e>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2101      	movs	r1, #1
 800316e:	4618      	mov	r0, r3
 8003170:	f004 fa84 	bl	800767c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f003 ff9c 	bl	80070b6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_HCD_Stop+0x16>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e00d      	b.n	80031c2 <HAL_HCD_Stop+0x32>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f004 fe72 	bl	8007e9c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f004 fa26 	bl	8007628 <USB_ResetPort>
 80031dc:	4603      	mov	r3, r0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	460b      	mov	r3, r1
 80031f0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	212c      	movs	r1, #44	; 0x2c
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	3360      	adds	r3, #96	; 0x60
 8003200:	781b      	ldrb	r3, [r3, #0]
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	460b      	mov	r3, r1
 8003218:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800321a:	78fb      	ldrb	r3, [r7, #3]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	212c      	movs	r1, #44	; 0x2c
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	4413      	add	r3, r2
 8003226:	3350      	adds	r3, #80	; 0x50
 8003228:	681b      	ldr	r3, [r3, #0]
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f004 fa6a 	bl	800771c <USB_GetCurrentFrame>
 8003248:	4603      	mov	r3, r0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f004 fa45 	bl	80076ee <USB_GetHostSpeed>
 8003264:	4603      	mov	r3, r0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b086      	sub	sp, #24
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	460b      	mov	r3, r1
 8003278:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4413      	add	r3, r2
 8003290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b04      	cmp	r3, #4
 800329c:	d11a      	bne.n	80032d4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032aa:	461a      	mov	r2, r3
 80032ac:	2304      	movs	r3, #4
 80032ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	212c      	movs	r1, #44	; 0x2c
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	4413      	add	r3, r2
 80032bc:	3361      	adds	r3, #97	; 0x61
 80032be:	2206      	movs	r2, #6
 80032c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	4611      	mov	r1, r2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f004 fcac 	bl	8007c2a <USB_HC_Halt>
 80032d2:	e0af      	b.n	8003434 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ea:	d11b      	bne.n	8003324 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f8:	461a      	mov	r2, r3
 80032fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	212c      	movs	r1, #44	; 0x2c
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	4413      	add	r3, r2
 800330c:	3361      	adds	r3, #97	; 0x61
 800330e:	2207      	movs	r2, #7
 8003310:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f004 fc84 	bl	8007c2a <USB_HC_Halt>
 8003322:	e087      	b.n	8003434 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	4413      	add	r3, r2
 800332c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 0320 	and.w	r3, r3, #32
 8003336:	2b20      	cmp	r3, #32
 8003338:	d109      	bne.n	800334e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4413      	add	r3, r2
 8003342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003346:	461a      	mov	r2, r3
 8003348:	2320      	movs	r3, #32
 800334a:	6093      	str	r3, [r2, #8]
 800334c:	e072      	b.n	8003434 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4413      	add	r3, r2
 8003356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b08      	cmp	r3, #8
 8003362:	d11a      	bne.n	800339a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003370:	461a      	mov	r2, r3
 8003372:	2308      	movs	r3, #8
 8003374:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	212c      	movs	r1, #44	; 0x2c
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	4413      	add	r3, r2
 8003382:	3361      	adds	r3, #97	; 0x61
 8003384:	2205      	movs	r2, #5
 8003386:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	4611      	mov	r1, r2
 8003392:	4618      	mov	r0, r3
 8003394:	f004 fc49 	bl	8007c2a <USB_HC_Halt>
 8003398:	e04c      	b.n	8003434 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b0:	d11b      	bne.n	80033ea <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033be:	461a      	mov	r2, r3
 80033c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	212c      	movs	r1, #44	; 0x2c
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	4413      	add	r3, r2
 80033d2:	3361      	adds	r3, #97	; 0x61
 80033d4:	2208      	movs	r2, #8
 80033d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	4611      	mov	r1, r2
 80033e2:	4618      	mov	r0, r3
 80033e4:	f004 fc21 	bl	8007c2a <USB_HC_Halt>
 80033e8:	e024      	b.n	8003434 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fc:	2b80      	cmp	r3, #128	; 0x80
 80033fe:	d119      	bne.n	8003434 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4413      	add	r3, r2
 8003408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340c:	461a      	mov	r2, r3
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	212c      	movs	r1, #44	; 0x2c
 8003418:	fb01 f303 	mul.w	r3, r1, r3
 800341c:	4413      	add	r3, r2
 800341e:	3361      	adds	r3, #97	; 0x61
 8003420:	2206      	movs	r2, #6
 8003422:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	4611      	mov	r1, r2
 800342e:	4618      	mov	r0, r3
 8003430:	f004 fbfb 	bl	8007c2a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4413      	add	r3, r2
 800343c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800344a:	d112      	bne.n	8003472 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	4611      	mov	r1, r2
 8003456:	4618      	mov	r0, r3
 8003458:	f004 fbe7 	bl	8007c2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4413      	add	r3, r2
 8003464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003468:	461a      	mov	r2, r3
 800346a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800346e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003470:	e24e      	b.n	8003910 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4413      	add	r3, r2
 800347a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b01      	cmp	r3, #1
 8003486:	f040 80df 	bne.w	8003648 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d019      	beq.n	80034c6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	212c      	movs	r1, #44	; 0x2c
 8003498:	fb01 f303 	mul.w	r3, r1, r3
 800349c:	4413      	add	r3, r2
 800349e:	3348      	adds	r3, #72	; 0x48
 80034a0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	0159      	lsls	r1, r3, #5
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	440b      	add	r3, r1
 80034aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80034b4:	1ad2      	subs	r2, r2, r3
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	202c      	movs	r0, #44	; 0x2c
 80034bc:	fb00 f303 	mul.w	r3, r0, r3
 80034c0:	440b      	add	r3, r1
 80034c2:	3350      	adds	r3, #80	; 0x50
 80034c4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	212c      	movs	r1, #44	; 0x2c
 80034cc:	fb01 f303 	mul.w	r3, r1, r3
 80034d0:	4413      	add	r3, r2
 80034d2:	3361      	adds	r3, #97	; 0x61
 80034d4:	2201      	movs	r2, #1
 80034d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	212c      	movs	r1, #44	; 0x2c
 80034de:	fb01 f303 	mul.w	r3, r1, r3
 80034e2:	4413      	add	r3, r2
 80034e4:	335c      	adds	r3, #92	; 0x5c
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f6:	461a      	mov	r2, r3
 80034f8:	2301      	movs	r3, #1
 80034fa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	212c      	movs	r1, #44	; 0x2c
 8003502:	fb01 f303 	mul.w	r3, r1, r3
 8003506:	4413      	add	r3, r2
 8003508:	333f      	adds	r3, #63	; 0x3f
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d009      	beq.n	8003524 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	212c      	movs	r1, #44	; 0x2c
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	4413      	add	r3, r2
 800351c:	333f      	adds	r3, #63	; 0x3f
 800351e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003520:	2b02      	cmp	r3, #2
 8003522:	d111      	bne.n	8003548 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	4611      	mov	r1, r2
 800352e:	4618      	mov	r0, r3
 8003530:	f004 fb7b 	bl	8007c2a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4413      	add	r3, r2
 800353c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003540:	461a      	mov	r2, r3
 8003542:	2310      	movs	r3, #16
 8003544:	6093      	str	r3, [r2, #8]
 8003546:	e03a      	b.n	80035be <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	212c      	movs	r1, #44	; 0x2c
 800354e:	fb01 f303 	mul.w	r3, r1, r3
 8003552:	4413      	add	r3, r2
 8003554:	333f      	adds	r3, #63	; 0x3f
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b03      	cmp	r3, #3
 800355a:	d009      	beq.n	8003570 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	212c      	movs	r1, #44	; 0x2c
 8003562:	fb01 f303 	mul.w	r3, r1, r3
 8003566:	4413      	add	r3, r2
 8003568:	333f      	adds	r3, #63	; 0x3f
 800356a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800356c:	2b01      	cmp	r3, #1
 800356e:	d126      	bne.n	80035be <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	4413      	add	r3, r2
 8003578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	0151      	lsls	r1, r2, #5
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	440a      	add	r2, r1
 8003586:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800358a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800358e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	212c      	movs	r1, #44	; 0x2c
 8003596:	fb01 f303 	mul.w	r3, r1, r3
 800359a:	4413      	add	r3, r2
 800359c:	3360      	adds	r3, #96	; 0x60
 800359e:	2201      	movs	r2, #1
 80035a0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	b2d9      	uxtb	r1, r3
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	202c      	movs	r0, #44	; 0x2c
 80035ac:	fb00 f303 	mul.w	r3, r0, r3
 80035b0:	4413      	add	r3, r2
 80035b2:	3360      	adds	r3, #96	; 0x60
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	461a      	mov	r2, r3
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f006 fdd9 	bl	800a170 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d12b      	bne.n	800361e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	212c      	movs	r1, #44	; 0x2c
 80035cc:	fb01 f303 	mul.w	r3, r1, r3
 80035d0:	4413      	add	r3, r2
 80035d2:	3348      	adds	r3, #72	; 0x48
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	202c      	movs	r0, #44	; 0x2c
 80035dc:	fb00 f202 	mul.w	r2, r0, r2
 80035e0:	440a      	add	r2, r1
 80035e2:	3240      	adds	r2, #64	; 0x40
 80035e4:	8812      	ldrh	r2, [r2, #0]
 80035e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 818e 	beq.w	8003910 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	212c      	movs	r1, #44	; 0x2c
 80035fa:	fb01 f303 	mul.w	r3, r1, r3
 80035fe:	4413      	add	r3, r2
 8003600:	3354      	adds	r3, #84	; 0x54
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	f083 0301 	eor.w	r3, r3, #1
 8003608:	b2d8      	uxtb	r0, r3
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	212c      	movs	r1, #44	; 0x2c
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	4413      	add	r3, r2
 8003616:	3354      	adds	r3, #84	; 0x54
 8003618:	4602      	mov	r2, r0
 800361a:	701a      	strb	r2, [r3, #0]
}
 800361c:	e178      	b.n	8003910 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	212c      	movs	r1, #44	; 0x2c
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	4413      	add	r3, r2
 800362a:	3354      	adds	r3, #84	; 0x54
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	f083 0301 	eor.w	r3, r3, #1
 8003632:	b2d8      	uxtb	r0, r3
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	212c      	movs	r1, #44	; 0x2c
 800363a:	fb01 f303 	mul.w	r3, r1, r3
 800363e:	4413      	add	r3, r2
 8003640:	3354      	adds	r3, #84	; 0x54
 8003642:	4602      	mov	r2, r0
 8003644:	701a      	strb	r2, [r3, #0]
}
 8003646:	e163      	b.n	8003910 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	4413      	add	r3, r2
 8003650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b02      	cmp	r3, #2
 800365c:	f040 80f6 	bne.w	800384c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	212c      	movs	r1, #44	; 0x2c
 8003666:	fb01 f303 	mul.w	r3, r1, r3
 800366a:	4413      	add	r3, r2
 800366c:	3361      	adds	r3, #97	; 0x61
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d109      	bne.n	8003688 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	212c      	movs	r1, #44	; 0x2c
 800367a:	fb01 f303 	mul.w	r3, r1, r3
 800367e:	4413      	add	r3, r2
 8003680:	3360      	adds	r3, #96	; 0x60
 8003682:	2201      	movs	r2, #1
 8003684:	701a      	strb	r2, [r3, #0]
 8003686:	e0c9      	b.n	800381c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	212c      	movs	r1, #44	; 0x2c
 800368e:	fb01 f303 	mul.w	r3, r1, r3
 8003692:	4413      	add	r3, r2
 8003694:	3361      	adds	r3, #97	; 0x61
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b05      	cmp	r3, #5
 800369a:	d109      	bne.n	80036b0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	212c      	movs	r1, #44	; 0x2c
 80036a2:	fb01 f303 	mul.w	r3, r1, r3
 80036a6:	4413      	add	r3, r2
 80036a8:	3360      	adds	r3, #96	; 0x60
 80036aa:	2205      	movs	r2, #5
 80036ac:	701a      	strb	r2, [r3, #0]
 80036ae:	e0b5      	b.n	800381c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	212c      	movs	r1, #44	; 0x2c
 80036b6:	fb01 f303 	mul.w	r3, r1, r3
 80036ba:	4413      	add	r3, r2
 80036bc:	3361      	adds	r3, #97	; 0x61
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b06      	cmp	r3, #6
 80036c2:	d009      	beq.n	80036d8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	212c      	movs	r1, #44	; 0x2c
 80036ca:	fb01 f303 	mul.w	r3, r1, r3
 80036ce:	4413      	add	r3, r2
 80036d0:	3361      	adds	r3, #97	; 0x61
 80036d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d150      	bne.n	800377a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	212c      	movs	r1, #44	; 0x2c
 80036de:	fb01 f303 	mul.w	r3, r1, r3
 80036e2:	4413      	add	r3, r2
 80036e4:	335c      	adds	r3, #92	; 0x5c
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	202c      	movs	r0, #44	; 0x2c
 80036f0:	fb00 f303 	mul.w	r3, r0, r3
 80036f4:	440b      	add	r3, r1
 80036f6:	335c      	adds	r3, #92	; 0x5c
 80036f8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	212c      	movs	r1, #44	; 0x2c
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	4413      	add	r3, r2
 8003706:	335c      	adds	r3, #92	; 0x5c
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d912      	bls.n	8003734 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	212c      	movs	r1, #44	; 0x2c
 8003714:	fb01 f303 	mul.w	r3, r1, r3
 8003718:	4413      	add	r3, r2
 800371a:	335c      	adds	r3, #92	; 0x5c
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	212c      	movs	r1, #44	; 0x2c
 8003726:	fb01 f303 	mul.w	r3, r1, r3
 800372a:	4413      	add	r3, r2
 800372c:	3360      	adds	r3, #96	; 0x60
 800372e:	2204      	movs	r2, #4
 8003730:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003732:	e073      	b.n	800381c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	212c      	movs	r1, #44	; 0x2c
 800373a:	fb01 f303 	mul.w	r3, r1, r3
 800373e:	4413      	add	r3, r2
 8003740:	3360      	adds	r3, #96	; 0x60
 8003742:	2202      	movs	r2, #2
 8003744:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	4413      	add	r3, r2
 800374e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800375c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003764:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4413      	add	r3, r2
 800376e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003772:	461a      	mov	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003778:	e050      	b.n	800381c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	212c      	movs	r1, #44	; 0x2c
 8003780:	fb01 f303 	mul.w	r3, r1, r3
 8003784:	4413      	add	r3, r2
 8003786:	3361      	adds	r3, #97	; 0x61
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b03      	cmp	r3, #3
 800378c:	d122      	bne.n	80037d4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	212c      	movs	r1, #44	; 0x2c
 8003794:	fb01 f303 	mul.w	r3, r1, r3
 8003798:	4413      	add	r3, r2
 800379a:	3360      	adds	r3, #96	; 0x60
 800379c:	2202      	movs	r2, #2
 800379e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037b6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037be:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037cc:	461a      	mov	r2, r3
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e023      	b.n	800381c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	212c      	movs	r1, #44	; 0x2c
 80037da:	fb01 f303 	mul.w	r3, r1, r3
 80037de:	4413      	add	r3, r2
 80037e0:	3361      	adds	r3, #97	; 0x61
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b07      	cmp	r3, #7
 80037e6:	d119      	bne.n	800381c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	212c      	movs	r1, #44	; 0x2c
 80037ee:	fb01 f303 	mul.w	r3, r1, r3
 80037f2:	4413      	add	r3, r2
 80037f4:	335c      	adds	r3, #92	; 0x5c
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	202c      	movs	r0, #44	; 0x2c
 8003800:	fb00 f303 	mul.w	r3, r0, r3
 8003804:	440b      	add	r3, r1
 8003806:	335c      	adds	r3, #92	; 0x5c
 8003808:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	212c      	movs	r1, #44	; 0x2c
 8003810:	fb01 f303 	mul.w	r3, r1, r3
 8003814:	4413      	add	r3, r2
 8003816:	3360      	adds	r3, #96	; 0x60
 8003818:	2204      	movs	r2, #4
 800381a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4413      	add	r3, r2
 8003824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003828:	461a      	mov	r2, r3
 800382a:	2302      	movs	r3, #2
 800382c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	b2d9      	uxtb	r1, r3
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	202c      	movs	r0, #44	; 0x2c
 8003838:	fb00 f303 	mul.w	r3, r0, r3
 800383c:	4413      	add	r3, r2
 800383e:	3360      	adds	r3, #96	; 0x60
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f006 fc93 	bl	800a170 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800384a:	e061      	b.n	8003910 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4413      	add	r3, r2
 8003854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 0310 	and.w	r3, r3, #16
 800385e:	2b10      	cmp	r3, #16
 8003860:	d156      	bne.n	8003910 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	212c      	movs	r1, #44	; 0x2c
 8003868:	fb01 f303 	mul.w	r3, r1, r3
 800386c:	4413      	add	r3, r2
 800386e:	333f      	adds	r3, #63	; 0x3f
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b03      	cmp	r3, #3
 8003874:	d111      	bne.n	800389a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	212c      	movs	r1, #44	; 0x2c
 800387c:	fb01 f303 	mul.w	r3, r1, r3
 8003880:	4413      	add	r3, r2
 8003882:	335c      	adds	r3, #92	; 0x5c
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	4611      	mov	r1, r2
 8003892:	4618      	mov	r0, r3
 8003894:	f004 f9c9 	bl	8007c2a <USB_HC_Halt>
 8003898:	e031      	b.n	80038fe <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	212c      	movs	r1, #44	; 0x2c
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	4413      	add	r3, r2
 80038a6:	333f      	adds	r3, #63	; 0x3f
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d009      	beq.n	80038c2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	212c      	movs	r1, #44	; 0x2c
 80038b4:	fb01 f303 	mul.w	r3, r1, r3
 80038b8:	4413      	add	r3, r2
 80038ba:	333f      	adds	r3, #63	; 0x3f
 80038bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d11d      	bne.n	80038fe <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	212c      	movs	r1, #44	; 0x2c
 80038c8:	fb01 f303 	mul.w	r3, r1, r3
 80038cc:	4413      	add	r3, r2
 80038ce:	335c      	adds	r3, #92	; 0x5c
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d110      	bne.n	80038fe <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	212c      	movs	r1, #44	; 0x2c
 80038e2:	fb01 f303 	mul.w	r3, r1, r3
 80038e6:	4413      	add	r3, r2
 80038e8:	3361      	adds	r3, #97	; 0x61
 80038ea:	2203      	movs	r2, #3
 80038ec:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f004 f996 	bl	8007c2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4413      	add	r3, r2
 8003906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800390a:	461a      	mov	r2, r3
 800390c:	2310      	movs	r3, #16
 800390e:	6093      	str	r3, [r2, #8]
}
 8003910:	bf00      	nop
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800392e:	78fb      	ldrb	r3, [r7, #3]
 8003930:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	4413      	add	r3, r2
 800393a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b04      	cmp	r3, #4
 8003946:	d11a      	bne.n	800397e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	4413      	add	r3, r2
 8003950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003954:	461a      	mov	r2, r3
 8003956:	2304      	movs	r3, #4
 8003958:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	212c      	movs	r1, #44	; 0x2c
 8003960:	fb01 f303 	mul.w	r3, r1, r3
 8003964:	4413      	add	r3, r2
 8003966:	3361      	adds	r3, #97	; 0x61
 8003968:	2206      	movs	r2, #6
 800396a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	4611      	mov	r1, r2
 8003976:	4618      	mov	r0, r3
 8003978:	f004 f957 	bl	8007c2a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800397c:	e331      	b.n	8003fe2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	4413      	add	r3, r2
 8003986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	2b20      	cmp	r3, #32
 8003992:	d12e      	bne.n	80039f2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	4413      	add	r3, r2
 800399c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a0:	461a      	mov	r2, r3
 80039a2:	2320      	movs	r3, #32
 80039a4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	212c      	movs	r1, #44	; 0x2c
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	4413      	add	r3, r2
 80039b2:	333d      	adds	r3, #61	; 0x3d
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	f040 8313 	bne.w	8003fe2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	212c      	movs	r1, #44	; 0x2c
 80039c2:	fb01 f303 	mul.w	r3, r1, r3
 80039c6:	4413      	add	r3, r2
 80039c8:	333d      	adds	r3, #61	; 0x3d
 80039ca:	2200      	movs	r2, #0
 80039cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	212c      	movs	r1, #44	; 0x2c
 80039d4:	fb01 f303 	mul.w	r3, r1, r3
 80039d8:	4413      	add	r3, r2
 80039da:	3360      	adds	r3, #96	; 0x60
 80039dc:	2202      	movs	r2, #2
 80039de:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	4611      	mov	r1, r2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f004 f91d 	bl	8007c2a <USB_HC_Halt>
}
 80039f0:	e2f7      	b.n	8003fe2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a08:	d112      	bne.n	8003a30 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a16:	461a      	mov	r2, r3
 8003a18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a1c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	4611      	mov	r1, r2
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f004 f8fe 	bl	8007c2a <USB_HC_Halt>
}
 8003a2e:	e2d8      	b.n	8003fe2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d140      	bne.n	8003ac8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	212c      	movs	r1, #44	; 0x2c
 8003a4c:	fb01 f303 	mul.w	r3, r1, r3
 8003a50:	4413      	add	r3, r2
 8003a52:	335c      	adds	r3, #92	; 0x5c
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6a:	2b40      	cmp	r3, #64	; 0x40
 8003a6c:	d111      	bne.n	8003a92 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	212c      	movs	r1, #44	; 0x2c
 8003a74:	fb01 f303 	mul.w	r3, r1, r3
 8003a78:	4413      	add	r3, r2
 8003a7a:	333d      	adds	r3, #61	; 0x3d
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	2340      	movs	r3, #64	; 0x40
 8003a90:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	212c      	movs	r1, #44	; 0x2c
 8003aaa:	fb01 f303 	mul.w	r3, r1, r3
 8003aae:	4413      	add	r3, r2
 8003ab0:	3361      	adds	r3, #97	; 0x61
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	4611      	mov	r1, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f004 f8b2 	bl	8007c2a <USB_HC_Halt>
}
 8003ac6:	e28c      	b.n	8003fe2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ada:	2b40      	cmp	r3, #64	; 0x40
 8003adc:	d12c      	bne.n	8003b38 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	212c      	movs	r1, #44	; 0x2c
 8003ae4:	fb01 f303 	mul.w	r3, r1, r3
 8003ae8:	4413      	add	r3, r2
 8003aea:	3361      	adds	r3, #97	; 0x61
 8003aec:	2204      	movs	r2, #4
 8003aee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	212c      	movs	r1, #44	; 0x2c
 8003af6:	fb01 f303 	mul.w	r3, r1, r3
 8003afa:	4413      	add	r3, r2
 8003afc:	333d      	adds	r3, #61	; 0x3d
 8003afe:	2201      	movs	r2, #1
 8003b00:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	212c      	movs	r1, #44	; 0x2c
 8003b08:	fb01 f303 	mul.w	r3, r1, r3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	335c      	adds	r3, #92	; 0x5c
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	4611      	mov	r1, r2
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f004 f883 	bl	8007c2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b30:	461a      	mov	r2, r3
 8003b32:	2340      	movs	r3, #64	; 0x40
 8003b34:	6093      	str	r3, [r2, #8]
}
 8003b36:	e254      	b.n	8003fe2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d11a      	bne.n	8003b84 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	2308      	movs	r3, #8
 8003b5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	212c      	movs	r1, #44	; 0x2c
 8003b66:	fb01 f303 	mul.w	r3, r1, r3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3361      	adds	r3, #97	; 0x61
 8003b6e:	2205      	movs	r2, #5
 8003b70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f004 f854 	bl	8007c2a <USB_HC_Halt>
}
 8003b82:	e22e      	b.n	8003fe2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	2b10      	cmp	r3, #16
 8003b98:	d140      	bne.n	8003c1c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	212c      	movs	r1, #44	; 0x2c
 8003ba0:	fb01 f303 	mul.w	r3, r1, r3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	335c      	adds	r3, #92	; 0x5c
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	212c      	movs	r1, #44	; 0x2c
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3361      	adds	r3, #97	; 0x61
 8003bba:	2203      	movs	r2, #3
 8003bbc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	212c      	movs	r1, #44	; 0x2c
 8003bc4:	fb01 f303 	mul.w	r3, r1, r3
 8003bc8:	4413      	add	r3, r2
 8003bca:	333d      	adds	r3, #61	; 0x3d
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d112      	bne.n	8003bf8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	212c      	movs	r1, #44	; 0x2c
 8003bd8:	fb01 f303 	mul.w	r3, r1, r3
 8003bdc:	4413      	add	r3, r2
 8003bde:	333c      	adds	r3, #60	; 0x3c
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d108      	bne.n	8003bf8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	212c      	movs	r1, #44	; 0x2c
 8003bec:	fb01 f303 	mul.w	r3, r1, r3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	333d      	adds	r3, #61	; 0x3d
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	4611      	mov	r1, r2
 8003c02:	4618      	mov	r0, r3
 8003c04:	f004 f811 	bl	8007c2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c14:	461a      	mov	r2, r3
 8003c16:	2310      	movs	r3, #16
 8003c18:	6093      	str	r3, [r2, #8]
}
 8003c1a:	e1e2      	b.n	8003fe2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2e:	2b80      	cmp	r3, #128	; 0x80
 8003c30:	d164      	bne.n	8003cfc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d111      	bne.n	8003c5e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	212c      	movs	r1, #44	; 0x2c
 8003c40:	fb01 f303 	mul.w	r3, r1, r3
 8003c44:	4413      	add	r3, r2
 8003c46:	3361      	adds	r3, #97	; 0x61
 8003c48:	2206      	movs	r2, #6
 8003c4a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	4611      	mov	r1, r2
 8003c56:	4618      	mov	r0, r3
 8003c58:	f003 ffe7 	bl	8007c2a <USB_HC_Halt>
 8003c5c:	e044      	b.n	8003ce8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	212c      	movs	r1, #44	; 0x2c
 8003c64:	fb01 f303 	mul.w	r3, r1, r3
 8003c68:	4413      	add	r3, r2
 8003c6a:	335c      	adds	r3, #92	; 0x5c
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	202c      	movs	r0, #44	; 0x2c
 8003c76:	fb00 f303 	mul.w	r3, r0, r3
 8003c7a:	440b      	add	r3, r1
 8003c7c:	335c      	adds	r3, #92	; 0x5c
 8003c7e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	212c      	movs	r1, #44	; 0x2c
 8003c86:	fb01 f303 	mul.w	r3, r1, r3
 8003c8a:	4413      	add	r3, r2
 8003c8c:	335c      	adds	r3, #92	; 0x5c
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d920      	bls.n	8003cd6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	212c      	movs	r1, #44	; 0x2c
 8003c9a:	fb01 f303 	mul.w	r3, r1, r3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	335c      	adds	r3, #92	; 0x5c
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	212c      	movs	r1, #44	; 0x2c
 8003cac:	fb01 f303 	mul.w	r3, r1, r3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	3360      	adds	r3, #96	; 0x60
 8003cb4:	2204      	movs	r2, #4
 8003cb6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	b2d9      	uxtb	r1, r3
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	202c      	movs	r0, #44	; 0x2c
 8003cc2:	fb00 f303 	mul.w	r3, r0, r3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3360      	adds	r3, #96	; 0x60
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f006 fa4e 	bl	800a170 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003cd4:	e008      	b.n	8003ce8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	212c      	movs	r1, #44	; 0x2c
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3360      	adds	r3, #96	; 0x60
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	6093      	str	r3, [r2, #8]
}
 8003cfa:	e172      	b.n	8003fe2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	015a      	lsls	r2, r3, #5
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d12:	d11b      	bne.n	8003d4c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	212c      	movs	r1, #44	; 0x2c
 8003d1a:	fb01 f303 	mul.w	r3, r1, r3
 8003d1e:	4413      	add	r3, r2
 8003d20:	3361      	adds	r3, #97	; 0x61
 8003d22:	2208      	movs	r2, #8
 8003d24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	4611      	mov	r1, r2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f003 ff7a 	bl	8007c2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	015a      	lsls	r2, r3, #5
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d42:	461a      	mov	r2, r3
 8003d44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d48:	6093      	str	r3, [r2, #8]
}
 8003d4a:	e14a      	b.n	8003fe2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	f040 813f 	bne.w	8003fe2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	212c      	movs	r1, #44	; 0x2c
 8003d6a:	fb01 f303 	mul.w	r3, r1, r3
 8003d6e:	4413      	add	r3, r2
 8003d70:	3361      	adds	r3, #97	; 0x61
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d17d      	bne.n	8003e74 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	212c      	movs	r1, #44	; 0x2c
 8003d7e:	fb01 f303 	mul.w	r3, r1, r3
 8003d82:	4413      	add	r3, r2
 8003d84:	3360      	adds	r3, #96	; 0x60
 8003d86:	2201      	movs	r2, #1
 8003d88:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	212c      	movs	r1, #44	; 0x2c
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	4413      	add	r3, r2
 8003d96:	333f      	adds	r3, #63	; 0x3f
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d00a      	beq.n	8003db4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	212c      	movs	r1, #44	; 0x2c
 8003da4:	fb01 f303 	mul.w	r3, r1, r3
 8003da8:	4413      	add	r3, r2
 8003daa:	333f      	adds	r3, #63	; 0x3f
 8003dac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	f040 8100 	bne.w	8003fb4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d113      	bne.n	8003de4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	212c      	movs	r1, #44	; 0x2c
 8003dc2:	fb01 f303 	mul.w	r3, r1, r3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	3355      	adds	r3, #85	; 0x55
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	f083 0301 	eor.w	r3, r3, #1
 8003dd0:	b2d8      	uxtb	r0, r3
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	212c      	movs	r1, #44	; 0x2c
 8003dd8:	fb01 f303 	mul.w	r3, r1, r3
 8003ddc:	4413      	add	r3, r2
 8003dde:	3355      	adds	r3, #85	; 0x55
 8003de0:	4602      	mov	r2, r0
 8003de2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	f040 80e3 	bne.w	8003fb4 <HCD_HC_OUT_IRQHandler+0x69c>
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	212c      	movs	r1, #44	; 0x2c
 8003df4:	fb01 f303 	mul.w	r3, r1, r3
 8003df8:	4413      	add	r3, r2
 8003dfa:	334c      	adds	r3, #76	; 0x4c
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 80d8 	beq.w	8003fb4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	212c      	movs	r1, #44	; 0x2c
 8003e0a:	fb01 f303 	mul.w	r3, r1, r3
 8003e0e:	4413      	add	r3, r2
 8003e10:	334c      	adds	r3, #76	; 0x4c
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	202c      	movs	r0, #44	; 0x2c
 8003e1a:	fb00 f202 	mul.w	r2, r0, r2
 8003e1e:	440a      	add	r2, r1
 8003e20:	3240      	adds	r2, #64	; 0x40
 8003e22:	8812      	ldrh	r2, [r2, #0]
 8003e24:	4413      	add	r3, r2
 8003e26:	3b01      	subs	r3, #1
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	202c      	movs	r0, #44	; 0x2c
 8003e2e:	fb00 f202 	mul.w	r2, r0, r2
 8003e32:	440a      	add	r2, r1
 8003e34:	3240      	adds	r2, #64	; 0x40
 8003e36:	8812      	ldrh	r2, [r2, #0]
 8003e38:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 80b5 	beq.w	8003fb4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	212c      	movs	r1, #44	; 0x2c
 8003e50:	fb01 f303 	mul.w	r3, r1, r3
 8003e54:	4413      	add	r3, r2
 8003e56:	3355      	adds	r3, #85	; 0x55
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	f083 0301 	eor.w	r3, r3, #1
 8003e5e:	b2d8      	uxtb	r0, r3
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	212c      	movs	r1, #44	; 0x2c
 8003e66:	fb01 f303 	mul.w	r3, r1, r3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3355      	adds	r3, #85	; 0x55
 8003e6e:	4602      	mov	r2, r0
 8003e70:	701a      	strb	r2, [r3, #0]
 8003e72:	e09f      	b.n	8003fb4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	212c      	movs	r1, #44	; 0x2c
 8003e7a:	fb01 f303 	mul.w	r3, r1, r3
 8003e7e:	4413      	add	r3, r2
 8003e80:	3361      	adds	r3, #97	; 0x61
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b03      	cmp	r3, #3
 8003e86:	d109      	bne.n	8003e9c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	212c      	movs	r1, #44	; 0x2c
 8003e8e:	fb01 f303 	mul.w	r3, r1, r3
 8003e92:	4413      	add	r3, r2
 8003e94:	3360      	adds	r3, #96	; 0x60
 8003e96:	2202      	movs	r2, #2
 8003e98:	701a      	strb	r2, [r3, #0]
 8003e9a:	e08b      	b.n	8003fb4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	212c      	movs	r1, #44	; 0x2c
 8003ea2:	fb01 f303 	mul.w	r3, r1, r3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3361      	adds	r3, #97	; 0x61
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d109      	bne.n	8003ec4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	212c      	movs	r1, #44	; 0x2c
 8003eb6:	fb01 f303 	mul.w	r3, r1, r3
 8003eba:	4413      	add	r3, r2
 8003ebc:	3360      	adds	r3, #96	; 0x60
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	e077      	b.n	8003fb4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	212c      	movs	r1, #44	; 0x2c
 8003eca:	fb01 f303 	mul.w	r3, r1, r3
 8003ece:	4413      	add	r3, r2
 8003ed0:	3361      	adds	r3, #97	; 0x61
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b05      	cmp	r3, #5
 8003ed6:	d109      	bne.n	8003eec <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	212c      	movs	r1, #44	; 0x2c
 8003ede:	fb01 f303 	mul.w	r3, r1, r3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3360      	adds	r3, #96	; 0x60
 8003ee6:	2205      	movs	r2, #5
 8003ee8:	701a      	strb	r2, [r3, #0]
 8003eea:	e063      	b.n	8003fb4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	212c      	movs	r1, #44	; 0x2c
 8003ef2:	fb01 f303 	mul.w	r3, r1, r3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3361      	adds	r3, #97	; 0x61
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b06      	cmp	r3, #6
 8003efe:	d009      	beq.n	8003f14 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	212c      	movs	r1, #44	; 0x2c
 8003f06:	fb01 f303 	mul.w	r3, r1, r3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3361      	adds	r3, #97	; 0x61
 8003f0e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d14f      	bne.n	8003fb4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	212c      	movs	r1, #44	; 0x2c
 8003f1a:	fb01 f303 	mul.w	r3, r1, r3
 8003f1e:	4413      	add	r3, r2
 8003f20:	335c      	adds	r3, #92	; 0x5c
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	202c      	movs	r0, #44	; 0x2c
 8003f2c:	fb00 f303 	mul.w	r3, r0, r3
 8003f30:	440b      	add	r3, r1
 8003f32:	335c      	adds	r3, #92	; 0x5c
 8003f34:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	212c      	movs	r1, #44	; 0x2c
 8003f3c:	fb01 f303 	mul.w	r3, r1, r3
 8003f40:	4413      	add	r3, r2
 8003f42:	335c      	adds	r3, #92	; 0x5c
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d912      	bls.n	8003f70 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	212c      	movs	r1, #44	; 0x2c
 8003f50:	fb01 f303 	mul.w	r3, r1, r3
 8003f54:	4413      	add	r3, r2
 8003f56:	335c      	adds	r3, #92	; 0x5c
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	212c      	movs	r1, #44	; 0x2c
 8003f62:	fb01 f303 	mul.w	r3, r1, r3
 8003f66:	4413      	add	r3, r2
 8003f68:	3360      	adds	r3, #96	; 0x60
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	701a      	strb	r2, [r3, #0]
 8003f6e:	e021      	b.n	8003fb4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	212c      	movs	r1, #44	; 0x2c
 8003f76:	fb01 f303 	mul.w	r3, r1, r3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	3360      	adds	r3, #96	; 0x60
 8003f7e:	2202      	movs	r2, #2
 8003f80:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f98:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fa0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fae:	461a      	mov	r2, r3
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	b2d9      	uxtb	r1, r3
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	202c      	movs	r0, #44	; 0x2c
 8003fd0:	fb00 f303 	mul.w	r3, r0, r3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	3360      	adds	r3, #96	; 0x60
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f006 f8c7 	bl	800a170 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003fe2:	bf00      	nop
 8003fe4:	3720      	adds	r7, #32
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b08a      	sub	sp, #40	; 0x28
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	0c5b      	lsrs	r3, r3, #17
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	091b      	lsrs	r3, r3, #4
 800401a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800401e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d004      	beq.n	8004030 <HCD_RXQLVL_IRQHandler+0x46>
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b05      	cmp	r3, #5
 800402a:	f000 80a9 	beq.w	8004180 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800402e:	e0aa      	b.n	8004186 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 80a6 	beq.w	8004184 <HCD_RXQLVL_IRQHandler+0x19a>
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	212c      	movs	r1, #44	; 0x2c
 800403e:	fb01 f303 	mul.w	r3, r1, r3
 8004042:	4413      	add	r3, r2
 8004044:	3344      	adds	r3, #68	; 0x44
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 809b 	beq.w	8004184 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	212c      	movs	r1, #44	; 0x2c
 8004054:	fb01 f303 	mul.w	r3, r1, r3
 8004058:	4413      	add	r3, r2
 800405a:	3350      	adds	r3, #80	; 0x50
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	441a      	add	r2, r3
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	202c      	movs	r0, #44	; 0x2c
 8004068:	fb00 f303 	mul.w	r3, r0, r3
 800406c:	440b      	add	r3, r1
 800406e:	334c      	adds	r3, #76	; 0x4c
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d87a      	bhi.n	800416c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	212c      	movs	r1, #44	; 0x2c
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	4413      	add	r3, r2
 8004086:	3344      	adds	r3, #68	; 0x44
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	b292      	uxth	r2, r2
 800408e:	4619      	mov	r1, r3
 8004090:	f003 f922 	bl	80072d8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	212c      	movs	r1, #44	; 0x2c
 800409a:	fb01 f303 	mul.w	r3, r1, r3
 800409e:	4413      	add	r3, r2
 80040a0:	3344      	adds	r3, #68	; 0x44
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	441a      	add	r2, r3
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	202c      	movs	r0, #44	; 0x2c
 80040ae:	fb00 f303 	mul.w	r3, r0, r3
 80040b2:	440b      	add	r3, r1
 80040b4:	3344      	adds	r3, #68	; 0x44
 80040b6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	212c      	movs	r1, #44	; 0x2c
 80040be:	fb01 f303 	mul.w	r3, r1, r3
 80040c2:	4413      	add	r3, r2
 80040c4:	3350      	adds	r3, #80	; 0x50
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	441a      	add	r2, r3
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	202c      	movs	r0, #44	; 0x2c
 80040d2:	fb00 f303 	mul.w	r3, r0, r3
 80040d6:	440b      	add	r3, r1
 80040d8:	3350      	adds	r3, #80	; 0x50
 80040da:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	0cdb      	lsrs	r3, r3, #19
 80040ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040f0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	212c      	movs	r1, #44	; 0x2c
 80040f8:	fb01 f303 	mul.w	r3, r1, r3
 80040fc:	4413      	add	r3, r2
 80040fe:	3340      	adds	r3, #64	; 0x40
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	4293      	cmp	r3, r2
 8004108:	d13c      	bne.n	8004184 <HCD_RXQLVL_IRQHandler+0x19a>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d039      	beq.n	8004184 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	4413      	add	r3, r2
 8004118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004126:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800412e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	4413      	add	r3, r2
 8004138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413c:	461a      	mov	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	212c      	movs	r1, #44	; 0x2c
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	4413      	add	r3, r2
 800414e:	3354      	adds	r3, #84	; 0x54
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	f083 0301 	eor.w	r3, r3, #1
 8004156:	b2d8      	uxtb	r0, r3
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	212c      	movs	r1, #44	; 0x2c
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	4413      	add	r3, r2
 8004164:	3354      	adds	r3, #84	; 0x54
 8004166:	4602      	mov	r2, r0
 8004168:	701a      	strb	r2, [r3, #0]
      break;
 800416a:	e00b      	b.n	8004184 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	212c      	movs	r1, #44	; 0x2c
 8004172:	fb01 f303 	mul.w	r3, r1, r3
 8004176:	4413      	add	r3, r2
 8004178:	3360      	adds	r3, #96	; 0x60
 800417a:	2204      	movs	r2, #4
 800417c:	701a      	strb	r2, [r3, #0]
      break;
 800417e:	e001      	b.n	8004184 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004180:	bf00      	nop
 8004182:	e000      	b.n	8004186 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004184:	bf00      	nop
  }
}
 8004186:	bf00      	nop
 8004188:	3728      	adds	r7, #40	; 0x28
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b086      	sub	sp, #24
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80041ba:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d10b      	bne.n	80041de <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d102      	bne.n	80041d6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f005 ffb1 	bl	800a138 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f043 0302 	orr.w	r3, r3, #2
 80041dc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d132      	bne.n	800424e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f043 0308 	orr.w	r3, r3, #8
 80041ee:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d126      	bne.n	8004248 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d113      	bne.n	800422a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004208:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800420c:	d106      	bne.n	800421c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2102      	movs	r1, #2
 8004214:	4618      	mov	r0, r3
 8004216:	f003 f9cd 	bl	80075b4 <USB_InitFSLSPClkSel>
 800421a:	e011      	b.n	8004240 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2101      	movs	r1, #1
 8004222:	4618      	mov	r0, r3
 8004224:	f003 f9c6 	bl	80075b4 <USB_InitFSLSPClkSel>
 8004228:	e00a      	b.n	8004240 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d106      	bne.n	8004240 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004238:	461a      	mov	r2, r3
 800423a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800423e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f005 ffa3 	bl	800a18c <HAL_HCD_PortEnabled_Callback>
 8004246:	e002      	b.n	800424e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f005 ffad 	bl	800a1a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f003 0320 	and.w	r3, r3, #32
 8004254:	2b20      	cmp	r3, #32
 8004256:	d103      	bne.n	8004260 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f043 0320 	orr.w	r3, r3, #32
 800425e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004266:	461a      	mov	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	6013      	str	r3, [r2, #0]
}
 800426c:	bf00      	nop
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e12b      	b.n	80044de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d106      	bne.n	80042a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fd fe4e 	bl	8001f3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2224      	movs	r2, #36	; 0x24
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0201 	bic.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042d8:	f002 f9ca 	bl	8006670 <HAL_RCC_GetPCLK1Freq>
 80042dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	4a81      	ldr	r2, [pc, #516]	; (80044e8 <HAL_I2C_Init+0x274>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d807      	bhi.n	80042f8 <HAL_I2C_Init+0x84>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4a80      	ldr	r2, [pc, #512]	; (80044ec <HAL_I2C_Init+0x278>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	bf94      	ite	ls
 80042f0:	2301      	movls	r3, #1
 80042f2:	2300      	movhi	r3, #0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	e006      	b.n	8004306 <HAL_I2C_Init+0x92>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4a7d      	ldr	r2, [pc, #500]	; (80044f0 <HAL_I2C_Init+0x27c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	bf94      	ite	ls
 8004300:	2301      	movls	r3, #1
 8004302:	2300      	movhi	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e0e7      	b.n	80044de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4a78      	ldr	r2, [pc, #480]	; (80044f4 <HAL_I2C_Init+0x280>)
 8004312:	fba2 2303 	umull	r2, r3, r2, r3
 8004316:	0c9b      	lsrs	r3, r3, #18
 8004318:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	430a      	orrs	r2, r1
 800432c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	4a6a      	ldr	r2, [pc, #424]	; (80044e8 <HAL_I2C_Init+0x274>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d802      	bhi.n	8004348 <HAL_I2C_Init+0xd4>
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	3301      	adds	r3, #1
 8004346:	e009      	b.n	800435c <HAL_I2C_Init+0xe8>
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800434e:	fb02 f303 	mul.w	r3, r2, r3
 8004352:	4a69      	ldr	r2, [pc, #420]	; (80044f8 <HAL_I2C_Init+0x284>)
 8004354:	fba2 2303 	umull	r2, r3, r2, r3
 8004358:	099b      	lsrs	r3, r3, #6
 800435a:	3301      	adds	r3, #1
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6812      	ldr	r2, [r2, #0]
 8004360:	430b      	orrs	r3, r1
 8004362:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800436e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	495c      	ldr	r1, [pc, #368]	; (80044e8 <HAL_I2C_Init+0x274>)
 8004378:	428b      	cmp	r3, r1
 800437a:	d819      	bhi.n	80043b0 <HAL_I2C_Init+0x13c>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	1e59      	subs	r1, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	fbb1 f3f3 	udiv	r3, r1, r3
 800438a:	1c59      	adds	r1, r3, #1
 800438c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004390:	400b      	ands	r3, r1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00a      	beq.n	80043ac <HAL_I2C_Init+0x138>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1e59      	subs	r1, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80043a4:	3301      	adds	r3, #1
 80043a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043aa:	e051      	b.n	8004450 <HAL_I2C_Init+0x1dc>
 80043ac:	2304      	movs	r3, #4
 80043ae:	e04f      	b.n	8004450 <HAL_I2C_Init+0x1dc>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d111      	bne.n	80043dc <HAL_I2C_Init+0x168>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	1e58      	subs	r0, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6859      	ldr	r1, [r3, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	440b      	add	r3, r1
 80043c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ca:	3301      	adds	r3, #1
 80043cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	bf0c      	ite	eq
 80043d4:	2301      	moveq	r3, #1
 80043d6:	2300      	movne	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	e012      	b.n	8004402 <HAL_I2C_Init+0x18e>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	1e58      	subs	r0, r3, #1
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6859      	ldr	r1, [r3, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	0099      	lsls	r1, r3, #2
 80043ec:	440b      	add	r3, r1
 80043ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80043f2:	3301      	adds	r3, #1
 80043f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	bf0c      	ite	eq
 80043fc:	2301      	moveq	r3, #1
 80043fe:	2300      	movne	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_I2C_Init+0x196>
 8004406:	2301      	movs	r3, #1
 8004408:	e022      	b.n	8004450 <HAL_I2C_Init+0x1dc>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10e      	bne.n	8004430 <HAL_I2C_Init+0x1bc>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	1e58      	subs	r0, r3, #1
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6859      	ldr	r1, [r3, #4]
 800441a:	460b      	mov	r3, r1
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	440b      	add	r3, r1
 8004420:	fbb0 f3f3 	udiv	r3, r0, r3
 8004424:	3301      	adds	r3, #1
 8004426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800442a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800442e:	e00f      	b.n	8004450 <HAL_I2C_Init+0x1dc>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	1e58      	subs	r0, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6859      	ldr	r1, [r3, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	0099      	lsls	r1, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	fbb0 f3f3 	udiv	r3, r0, r3
 8004446:	3301      	adds	r3, #1
 8004448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800444c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	6809      	ldr	r1, [r1, #0]
 8004454:	4313      	orrs	r3, r2
 8004456:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69da      	ldr	r2, [r3, #28]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800447e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6911      	ldr	r1, [r2, #16]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	68d2      	ldr	r2, [r2, #12]
 800448a:	4311      	orrs	r1, r2
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6812      	ldr	r2, [r2, #0]
 8004490:	430b      	orrs	r3, r1
 8004492:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695a      	ldr	r2, [r3, #20]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	000186a0 	.word	0x000186a0
 80044ec:	001e847f 	.word	0x001e847f
 80044f0:	003d08ff 	.word	0x003d08ff
 80044f4:	431bde83 	.word	0x431bde83
 80044f8:	10624dd3 	.word	0x10624dd3

080044fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af02      	add	r7, sp, #8
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	4608      	mov	r0, r1
 8004506:	4611      	mov	r1, r2
 8004508:	461a      	mov	r2, r3
 800450a:	4603      	mov	r3, r0
 800450c:	817b      	strh	r3, [r7, #10]
 800450e:	460b      	mov	r3, r1
 8004510:	813b      	strh	r3, [r7, #8]
 8004512:	4613      	mov	r3, r2
 8004514:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004516:	f7fd ffc3 	bl	80024a0 <HAL_GetTick>
 800451a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b20      	cmp	r3, #32
 8004526:	f040 80d9 	bne.w	80046dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	2319      	movs	r3, #25
 8004530:	2201      	movs	r2, #1
 8004532:	496d      	ldr	r1, [pc, #436]	; (80046e8 <HAL_I2C_Mem_Write+0x1ec>)
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 fdad 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004540:	2302      	movs	r3, #2
 8004542:	e0cc      	b.n	80046de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <HAL_I2C_Mem_Write+0x56>
 800454e:	2302      	movs	r3, #2
 8004550:	e0c5      	b.n	80046de <HAL_I2C_Mem_Write+0x1e2>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b01      	cmp	r3, #1
 8004566:	d007      	beq.n	8004578 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0201 	orr.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004586:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2221      	movs	r2, #33	; 0x21
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2240      	movs	r2, #64	; 0x40
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a3a      	ldr	r2, [r7, #32]
 80045a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4a4d      	ldr	r2, [pc, #308]	; (80046ec <HAL_I2C_Mem_Write+0x1f0>)
 80045b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045ba:	88f8      	ldrh	r0, [r7, #6]
 80045bc:	893a      	ldrh	r2, [r7, #8]
 80045be:	8979      	ldrh	r1, [r7, #10]
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	9301      	str	r3, [sp, #4]
 80045c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	4603      	mov	r3, r0
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 fbe4 	bl	8004d98 <I2C_RequestMemoryWrite>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d052      	beq.n	800467c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e081      	b.n	80046de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 fe2e 	bl	8005240 <I2C_WaitOnTXEFlagUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00d      	beq.n	8004606 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d107      	bne.n	8004602 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004600:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e06b      	b.n	80046de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	781a      	ldrb	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462c:	b29b      	uxth	r3, r3
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b04      	cmp	r3, #4
 8004642:	d11b      	bne.n	800467c <HAL_I2C_Mem_Write+0x180>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004648:	2b00      	cmp	r3, #0
 800464a:	d017      	beq.n	800467c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	781a      	ldrb	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1aa      	bne.n	80045da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 fe1a 	bl	80052c2 <I2C_WaitOnBTFFlagUntilTimeout>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00d      	beq.n	80046b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	2b04      	cmp	r3, #4
 800469a:	d107      	bne.n	80046ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e016      	b.n	80046de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	e000      	b.n	80046de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80046dc:	2302      	movs	r3, #2
  }
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	00100002 	.word	0x00100002
 80046ec:	ffff0000 	.word	0xffff0000

080046f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08c      	sub	sp, #48	; 0x30
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	4608      	mov	r0, r1
 80046fa:	4611      	mov	r1, r2
 80046fc:	461a      	mov	r2, r3
 80046fe:	4603      	mov	r3, r0
 8004700:	817b      	strh	r3, [r7, #10]
 8004702:	460b      	mov	r3, r1
 8004704:	813b      	strh	r3, [r7, #8]
 8004706:	4613      	mov	r3, r2
 8004708:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800470a:	f7fd fec9 	bl	80024a0 <HAL_GetTick>
 800470e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b20      	cmp	r3, #32
 800471a:	f040 8208 	bne.w	8004b2e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	2319      	movs	r3, #25
 8004724:	2201      	movs	r2, #1
 8004726:	497b      	ldr	r1, [pc, #492]	; (8004914 <HAL_I2C_Mem_Read+0x224>)
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 fcb3 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004734:	2302      	movs	r3, #2
 8004736:	e1fb      	b.n	8004b30 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <HAL_I2C_Mem_Read+0x56>
 8004742:	2302      	movs	r3, #2
 8004744:	e1f4      	b.n	8004b30 <HAL_I2C_Mem_Read+0x440>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b01      	cmp	r3, #1
 800475a:	d007      	beq.n	800476c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800477a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2222      	movs	r2, #34	; 0x22
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2240      	movs	r2, #64	; 0x40
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004796:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800479c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4a5b      	ldr	r2, [pc, #364]	; (8004918 <HAL_I2C_Mem_Read+0x228>)
 80047ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047ae:	88f8      	ldrh	r0, [r7, #6]
 80047b0:	893a      	ldrh	r2, [r7, #8]
 80047b2:	8979      	ldrh	r1, [r7, #10]
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	9301      	str	r3, [sp, #4]
 80047b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	4603      	mov	r3, r0
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 fb80 	bl	8004ec4 <I2C_RequestMemoryRead>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e1b0      	b.n	8004b30 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d113      	bne.n	80047fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d6:	2300      	movs	r3, #0
 80047d8:	623b      	str	r3, [r7, #32]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	623b      	str	r3, [r7, #32]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	623b      	str	r3, [r7, #32]
 80047ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	e184      	b.n	8004b08 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004802:	2b01      	cmp	r3, #1
 8004804:	d11b      	bne.n	800483e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004814:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	61fb      	str	r3, [r7, #28]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	e164      	b.n	8004b08 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004842:	2b02      	cmp	r3, #2
 8004844:	d11b      	bne.n	800487e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004854:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004864:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004866:	2300      	movs	r3, #0
 8004868:	61bb      	str	r3, [r7, #24]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	61bb      	str	r3, [r7, #24]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	61bb      	str	r3, [r7, #24]
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	e144      	b.n	8004b08 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800487e:	2300      	movs	r3, #0
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004894:	e138      	b.n	8004b08 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489a:	2b03      	cmp	r3, #3
 800489c:	f200 80f1 	bhi.w	8004a82 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d123      	bne.n	80048f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 fd49 	bl	8005344 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e139      	b.n	8004b30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691a      	ldr	r2, [r3, #16]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048ee:	e10b      	b.n	8004b08 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d14e      	bne.n	8004996 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fe:	2200      	movs	r2, #0
 8004900:	4906      	ldr	r1, [pc, #24]	; (800491c <HAL_I2C_Mem_Read+0x22c>)
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 fbc6 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d008      	beq.n	8004920 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e10e      	b.n	8004b30 <HAL_I2C_Mem_Read+0x440>
 8004912:	bf00      	nop
 8004914:	00100002 	.word	0x00100002
 8004918:	ffff0000 	.word	0xffff0000
 800491c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691a      	ldr	r2, [r3, #16]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498a:	b29b      	uxth	r3, r3
 800498c:	3b01      	subs	r3, #1
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004994:	e0b8      	b.n	8004b08 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499c:	2200      	movs	r2, #0
 800499e:	4966      	ldr	r1, [pc, #408]	; (8004b38 <HAL_I2C_Mem_Read+0x448>)
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 fb77 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e0bf      	b.n	8004b30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f8:	2200      	movs	r2, #0
 80049fa:	494f      	ldr	r1, [pc, #316]	; (8004b38 <HAL_I2C_Mem_Read+0x448>)
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 fb49 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e091      	b.n	8004b30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691a      	ldr	r2, [r3, #16]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	b2d2      	uxtb	r2, r2
 8004a5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	1c5a      	adds	r2, r3, #1
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a80:	e042      	b.n	8004b08 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 fc5c 	bl	8005344 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e04c      	b.n	8004b30 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d118      	bne.n	8004b08 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3b01      	subs	r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f47f aec2 	bne.w	8004896 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	e000      	b.n	8004b30 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004b2e:	2302      	movs	r3, #2
  }
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3728      	adds	r7, #40	; 0x28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	00010004 	.word	0x00010004

08004b3c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08a      	sub	sp, #40	; 0x28
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	607a      	str	r2, [r7, #4]
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004b4c:	f7fd fca8 	bl	80024a0 <HAL_GetTick>
 8004b50:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b20      	cmp	r3, #32
 8004b60:	f040 8111 	bne.w	8004d86 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	2319      	movs	r3, #25
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	4988      	ldr	r1, [pc, #544]	; (8004d90 <HAL_I2C_IsDeviceReady+0x254>)
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 fa90 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e104      	b.n	8004d88 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d101      	bne.n	8004b8c <HAL_I2C_IsDeviceReady+0x50>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e0fd      	b.n	8004d88 <HAL_I2C_IsDeviceReady+0x24c>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d007      	beq.n	8004bb2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0201 	orr.w	r2, r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2224      	movs	r2, #36	; 0x24
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4a70      	ldr	r2, [pc, #448]	; (8004d94 <HAL_I2C_IsDeviceReady+0x258>)
 8004bd4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004be4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 fa4e 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00d      	beq.n	8004c1a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c0c:	d103      	bne.n	8004c16 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c14:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e0b6      	b.n	8004d88 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c1a:	897b      	ldrh	r3, [r7, #10]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	461a      	mov	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c28:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004c2a:	f7fd fc39 	bl	80024a0 <HAL_GetTick>
 8004c2e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	bf0c      	ite	eq
 8004c3e:	2301      	moveq	r3, #1
 8004c40:	2300      	movne	r3, #0
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c54:	bf0c      	ite	eq
 8004c56:	2301      	moveq	r3, #1
 8004c58:	2300      	movne	r3, #0
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004c5e:	e025      	b.n	8004cac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c60:	f7fd fc1e 	bl	80024a0 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d302      	bcc.n	8004c76 <HAL_I2C_IsDeviceReady+0x13a>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d103      	bne.n	8004c7e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	22a0      	movs	r2, #160	; 0xa0
 8004c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	bf0c      	ite	eq
 8004c8c:	2301      	moveq	r3, #1
 8004c8e:	2300      	movne	r3, #0
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca2:	bf0c      	ite	eq
 8004ca4:	2301      	moveq	r3, #1
 8004ca6:	2300      	movne	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2ba0      	cmp	r3, #160	; 0xa0
 8004cb6:	d005      	beq.n	8004cc4 <HAL_I2C_IsDeviceReady+0x188>
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d102      	bne.n	8004cc4 <HAL_I2C_IsDeviceReady+0x188>
 8004cbe:	7dbb      	ldrb	r3, [r7, #22]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0cd      	beq.n	8004c60 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d129      	bne.n	8004d2e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ce8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cea:	2300      	movs	r3, #0
 8004cec:	613b      	str	r3, [r7, #16]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	613b      	str	r3, [r7, #16]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	613b      	str	r3, [r7, #16]
 8004cfe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	2319      	movs	r3, #25
 8004d06:	2201      	movs	r2, #1
 8004d08:	4921      	ldr	r1, [pc, #132]	; (8004d90 <HAL_I2C_IsDeviceReady+0x254>)
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 f9c2 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e036      	b.n	8004d88 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e02c      	b.n	8004d88 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d3c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d46:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	2319      	movs	r3, #25
 8004d4e:	2201      	movs	r2, #1
 8004d50:	490f      	ldr	r1, [pc, #60]	; (8004d90 <HAL_I2C_IsDeviceReady+0x254>)
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 f99e 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e012      	b.n	8004d88 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	3301      	adds	r3, #1
 8004d66:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	f4ff af32 	bcc.w	8004bd6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e000      	b.n	8004d88 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004d86:	2302      	movs	r3, #2
  }
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3720      	adds	r7, #32
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	00100002 	.word	0x00100002
 8004d94:	ffff0000 	.word	0xffff0000

08004d98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af02      	add	r7, sp, #8
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	4608      	mov	r0, r1
 8004da2:	4611      	mov	r1, r2
 8004da4:	461a      	mov	r2, r3
 8004da6:	4603      	mov	r3, r0
 8004da8:	817b      	strh	r3, [r7, #10]
 8004daa:	460b      	mov	r3, r1
 8004dac:	813b      	strh	r3, [r7, #8]
 8004dae:	4613      	mov	r3, r2
 8004db0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 f960 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00d      	beq.n	8004df6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004de8:	d103      	bne.n	8004df2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004df0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e05f      	b.n	8004eb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004df6:	897b      	ldrh	r3, [r7, #10]
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	6a3a      	ldr	r2, [r7, #32]
 8004e0a:	492d      	ldr	r1, [pc, #180]	; (8004ec0 <I2C_RequestMemoryWrite+0x128>)
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 f998 	bl	8005142 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e04c      	b.n	8004eb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e34:	6a39      	ldr	r1, [r7, #32]
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 fa02 	bl	8005240 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00d      	beq.n	8004e5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d107      	bne.n	8004e5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e02b      	b.n	8004eb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e5e:	88fb      	ldrh	r3, [r7, #6]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d105      	bne.n	8004e70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e64:	893b      	ldrh	r3, [r7, #8]
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	611a      	str	r2, [r3, #16]
 8004e6e:	e021      	b.n	8004eb4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e70:	893b      	ldrh	r3, [r7, #8]
 8004e72:	0a1b      	lsrs	r3, r3, #8
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e80:	6a39      	ldr	r1, [r7, #32]
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 f9dc 	bl	8005240 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00d      	beq.n	8004eaa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d107      	bne.n	8004ea6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ea4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e005      	b.n	8004eb6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004eaa:	893b      	ldrh	r3, [r7, #8]
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	00010002 	.word	0x00010002

08004ec4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	4608      	mov	r0, r1
 8004ece:	4611      	mov	r1, r2
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	817b      	strh	r3, [r7, #10]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	813b      	strh	r3, [r7, #8]
 8004eda:	4613      	mov	r3, r2
 8004edc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004eec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004efc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 f8c2 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00d      	beq.n	8004f32 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f24:	d103      	bne.n	8004f2e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e0aa      	b.n	8005088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f32:	897b      	ldrh	r3, [r7, #10]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	461a      	mov	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	6a3a      	ldr	r2, [r7, #32]
 8004f46:	4952      	ldr	r1, [pc, #328]	; (8005090 <I2C_RequestMemoryRead+0x1cc>)
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f8fa 	bl	8005142 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e097      	b.n	8005088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f70:	6a39      	ldr	r1, [r7, #32]
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 f964 	bl	8005240 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00d      	beq.n	8004f9a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d107      	bne.n	8004f96 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e076      	b.n	8005088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f9a:	88fb      	ldrh	r3, [r7, #6]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d105      	bne.n	8004fac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fa0:	893b      	ldrh	r3, [r7, #8]
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	611a      	str	r2, [r3, #16]
 8004faa:	e021      	b.n	8004ff0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004fac:	893b      	ldrh	r3, [r7, #8]
 8004fae:	0a1b      	lsrs	r3, r3, #8
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fbc:	6a39      	ldr	r1, [r7, #32]
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f000 f93e 	bl	8005240 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00d      	beq.n	8004fe6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	d107      	bne.n	8004fe2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e050      	b.n	8005088 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fe6:	893b      	ldrh	r3, [r7, #8]
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff2:	6a39      	ldr	r1, [r7, #32]
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f923 	bl	8005240 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00d      	beq.n	800501c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	2b04      	cmp	r3, #4
 8005006:	d107      	bne.n	8005018 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005016:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e035      	b.n	8005088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800502a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	2200      	movs	r2, #0
 8005034:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 f82b 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00d      	beq.n	8005060 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005052:	d103      	bne.n	800505c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800505a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e013      	b.n	8005088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005060:	897b      	ldrh	r3, [r7, #10]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	f043 0301 	orr.w	r3, r3, #1
 8005068:	b2da      	uxtb	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	6a3a      	ldr	r2, [r7, #32]
 8005074:	4906      	ldr	r1, [pc, #24]	; (8005090 <I2C_RequestMemoryRead+0x1cc>)
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 f863 	bl	8005142 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	00010002 	.word	0x00010002

08005094 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	603b      	str	r3, [r7, #0]
 80050a0:	4613      	mov	r3, r2
 80050a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050a4:	e025      	b.n	80050f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050ac:	d021      	beq.n	80050f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ae:	f7fd f9f7 	bl	80024a0 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d302      	bcc.n	80050c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d116      	bne.n	80050f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2220      	movs	r2, #32
 80050ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	f043 0220 	orr.w	r2, r3, #32
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e023      	b.n	800513a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	0c1b      	lsrs	r3, r3, #16
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d10d      	bne.n	8005118 <I2C_WaitOnFlagUntilTimeout+0x84>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	43da      	mvns	r2, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	4013      	ands	r3, r2
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	bf0c      	ite	eq
 800510e:	2301      	moveq	r3, #1
 8005110:	2300      	movne	r3, #0
 8005112:	b2db      	uxtb	r3, r3
 8005114:	461a      	mov	r2, r3
 8005116:	e00c      	b.n	8005132 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	43da      	mvns	r2, r3
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4013      	ands	r3, r2
 8005124:	b29b      	uxth	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	bf0c      	ite	eq
 800512a:	2301      	moveq	r3, #1
 800512c:	2300      	movne	r3, #0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	461a      	mov	r2, r3
 8005132:	79fb      	ldrb	r3, [r7, #7]
 8005134:	429a      	cmp	r2, r3
 8005136:	d0b6      	beq.n	80050a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	60b9      	str	r1, [r7, #8]
 800514c:	607a      	str	r2, [r7, #4]
 800514e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005150:	e051      	b.n	80051f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800515c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005160:	d123      	bne.n	80051aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005170:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800517a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2220      	movs	r2, #32
 8005186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	f043 0204 	orr.w	r2, r3, #4
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e046      	b.n	8005238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051b0:	d021      	beq.n	80051f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b2:	f7fd f975 	bl	80024a0 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d302      	bcc.n	80051c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d116      	bne.n	80051f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2220      	movs	r2, #32
 80051d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	f043 0220 	orr.w	r2, r3, #32
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e020      	b.n	8005238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	0c1b      	lsrs	r3, r3, #16
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d10c      	bne.n	800521a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	43da      	mvns	r2, r3
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4013      	ands	r3, r2
 800520c:	b29b      	uxth	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	bf14      	ite	ne
 8005212:	2301      	movne	r3, #1
 8005214:	2300      	moveq	r3, #0
 8005216:	b2db      	uxtb	r3, r3
 8005218:	e00b      	b.n	8005232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	43da      	mvns	r2, r3
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	4013      	ands	r3, r2
 8005226:	b29b      	uxth	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	bf14      	ite	ne
 800522c:	2301      	movne	r3, #1
 800522e:	2300      	moveq	r3, #0
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d18d      	bne.n	8005152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800524c:	e02d      	b.n	80052aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 f8ce 	bl	80053f0 <I2C_IsAcknowledgeFailed>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e02d      	b.n	80052ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005264:	d021      	beq.n	80052aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005266:	f7fd f91b 	bl	80024a0 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	429a      	cmp	r2, r3
 8005274:	d302      	bcc.n	800527c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d116      	bne.n	80052aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2220      	movs	r2, #32
 8005286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	f043 0220 	orr.w	r2, r3, #32
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e007      	b.n	80052ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b4:	2b80      	cmp	r3, #128	; 0x80
 80052b6:	d1ca      	bne.n	800524e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	60f8      	str	r0, [r7, #12]
 80052ca:	60b9      	str	r1, [r7, #8]
 80052cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052ce:	e02d      	b.n	800532c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 f88d 	bl	80053f0 <I2C_IsAcknowledgeFailed>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e02d      	b.n	800533c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052e6:	d021      	beq.n	800532c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e8:	f7fd f8da 	bl	80024a0 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d302      	bcc.n	80052fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d116      	bne.n	800532c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005318:	f043 0220 	orr.w	r2, r3, #32
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e007      	b.n	800533c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	2b04      	cmp	r3, #4
 8005338:	d1ca      	bne.n	80052d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005350:	e042      	b.n	80053d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	f003 0310 	and.w	r3, r3, #16
 800535c:	2b10      	cmp	r3, #16
 800535e:	d119      	bne.n	8005394 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0210 	mvn.w	r2, #16
 8005368:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2220      	movs	r2, #32
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e029      	b.n	80053e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005394:	f7fd f884 	bl	80024a0 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d302      	bcc.n	80053aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d116      	bne.n	80053d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	f043 0220 	orr.w	r2, r3, #32
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e007      	b.n	80053e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e2:	2b40      	cmp	r3, #64	; 0x40
 80053e4:	d1b5      	bne.n	8005352 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005406:	d11b      	bne.n	8005440 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005410:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2220      	movs	r2, #32
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	f043 0204 	orr.w	r2, r3, #4
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e000      	b.n	8005442 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
	...

08005450 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e128      	b.n	80056b4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d109      	bne.n	8005482 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a90      	ldr	r2, [pc, #576]	; (80056bc <HAL_I2S_Init+0x26c>)
 800547a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7fc fda5 	bl	8001fcc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2202      	movs	r2, #2
 8005486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005498:	f023 030f 	bic.w	r3, r3, #15
 800549c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2202      	movs	r2, #2
 80054a4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d060      	beq.n	8005570 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d102      	bne.n	80054bc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80054b6:	2310      	movs	r3, #16
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	e001      	b.n	80054c0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80054bc:	2320      	movs	r3, #32
 80054be:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d802      	bhi.n	80054ce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80054ce:	2001      	movs	r0, #1
 80054d0:	f001 f9e6 	bl	80068a0 <HAL_RCCEx_GetPeriphCLKFreq>
 80054d4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054de:	d125      	bne.n	800552c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d010      	beq.n	800550a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80054f2:	4613      	mov	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	461a      	mov	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	fbb2 f3f3 	udiv	r3, r2, r3
 8005504:	3305      	adds	r3, #5
 8005506:	613b      	str	r3, [r7, #16]
 8005508:	e01f      	b.n	800554a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	fbb2 f2f3 	udiv	r2, r2, r3
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	461a      	mov	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	fbb2 f3f3 	udiv	r3, r2, r3
 8005526:	3305      	adds	r3, #5
 8005528:	613b      	str	r3, [r7, #16]
 800552a:	e00e      	b.n	800554a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	fbb2 f2f3 	udiv	r2, r2, r3
 8005534:	4613      	mov	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	461a      	mov	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	fbb2 f3f3 	udiv	r3, r2, r3
 8005546:	3305      	adds	r3, #5
 8005548:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	4a5c      	ldr	r2, [pc, #368]	; (80056c0 <HAL_I2S_Init+0x270>)
 800554e:	fba2 2303 	umull	r2, r3, r2, r3
 8005552:	08db      	lsrs	r3, r3, #3
 8005554:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	085b      	lsrs	r3, r3, #1
 8005566:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	021b      	lsls	r3, r3, #8
 800556c:	61bb      	str	r3, [r7, #24]
 800556e:	e003      	b.n	8005578 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005570:	2302      	movs	r3, #2
 8005572:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d902      	bls.n	8005584 <HAL_I2S_Init+0x134>
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	2bff      	cmp	r3, #255	; 0xff
 8005582:	d907      	bls.n	8005594 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005588:	f043 0210 	orr.w	r2, r3, #16
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e08f      	b.n	80056b4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	ea42 0103 	orr.w	r1, r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80055b2:	f023 030f 	bic.w	r3, r3, #15
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6851      	ldr	r1, [r2, #4]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6892      	ldr	r2, [r2, #8]
 80055be:	4311      	orrs	r1, r2
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	68d2      	ldr	r2, [r2, #12]
 80055c4:	4311      	orrs	r1, r2
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6992      	ldr	r2, [r2, #24]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	431a      	orrs	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055d6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d161      	bne.n	80056a4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a38      	ldr	r2, [pc, #224]	; (80056c4 <HAL_I2S_Init+0x274>)
 80055e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a37      	ldr	r2, [pc, #220]	; (80056c8 <HAL_I2S_Init+0x278>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d101      	bne.n	80055f4 <HAL_I2S_Init+0x1a4>
 80055f0:	4b36      	ldr	r3, [pc, #216]	; (80056cc <HAL_I2S_Init+0x27c>)
 80055f2:	e001      	b.n	80055f8 <HAL_I2S_Init+0x1a8>
 80055f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6812      	ldr	r2, [r2, #0]
 80055fe:	4932      	ldr	r1, [pc, #200]	; (80056c8 <HAL_I2S_Init+0x278>)
 8005600:	428a      	cmp	r2, r1
 8005602:	d101      	bne.n	8005608 <HAL_I2S_Init+0x1b8>
 8005604:	4a31      	ldr	r2, [pc, #196]	; (80056cc <HAL_I2S_Init+0x27c>)
 8005606:	e001      	b.n	800560c <HAL_I2S_Init+0x1bc>
 8005608:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800560c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005610:	f023 030f 	bic.w	r3, r3, #15
 8005614:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a2b      	ldr	r2, [pc, #172]	; (80056c8 <HAL_I2S_Init+0x278>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d101      	bne.n	8005624 <HAL_I2S_Init+0x1d4>
 8005620:	4b2a      	ldr	r3, [pc, #168]	; (80056cc <HAL_I2S_Init+0x27c>)
 8005622:	e001      	b.n	8005628 <HAL_I2S_Init+0x1d8>
 8005624:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005628:	2202      	movs	r2, #2
 800562a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a25      	ldr	r2, [pc, #148]	; (80056c8 <HAL_I2S_Init+0x278>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d101      	bne.n	800563a <HAL_I2S_Init+0x1ea>
 8005636:	4b25      	ldr	r3, [pc, #148]	; (80056cc <HAL_I2S_Init+0x27c>)
 8005638:	e001      	b.n	800563e <HAL_I2S_Init+0x1ee>
 800563a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800564a:	d003      	beq.n	8005654 <HAL_I2S_Init+0x204>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d103      	bne.n	800565c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005658:	613b      	str	r3, [r7, #16]
 800565a:	e001      	b.n	8005660 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800565c:	2300      	movs	r3, #0
 800565e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800566a:	4313      	orrs	r3, r2
 800566c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005674:	4313      	orrs	r3, r2
 8005676:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800567e:	4313      	orrs	r3, r2
 8005680:	b29a      	uxth	r2, r3
 8005682:	897b      	ldrh	r3, [r7, #10]
 8005684:	4313      	orrs	r3, r2
 8005686:	b29b      	uxth	r3, r3
 8005688:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800568c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a0d      	ldr	r2, [pc, #52]	; (80056c8 <HAL_I2S_Init+0x278>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d101      	bne.n	800569c <HAL_I2S_Init+0x24c>
 8005698:	4b0c      	ldr	r3, [pc, #48]	; (80056cc <HAL_I2S_Init+0x27c>)
 800569a:	e001      	b.n	80056a0 <HAL_I2S_Init+0x250>
 800569c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056a0:	897a      	ldrh	r2, [r7, #10]
 80056a2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3720      	adds	r7, #32
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	080057c7 	.word	0x080057c7
 80056c0:	cccccccd 	.word	0xcccccccd
 80056c4:	080058dd 	.word	0x080058dd
 80056c8:	40003800 	.word	0x40003800
 80056cc:	40003400 	.word	0x40003400

080056d0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	881a      	ldrh	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	1c9a      	adds	r2, r3, #2
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572e:	b29b      	uxth	r3, r3
 8005730:	3b01      	subs	r3, #1
 8005732:	b29a      	uxth	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10e      	bne.n	8005760 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005750:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff ffb8 	bl	80056d0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005760:	bf00      	nop
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577a:	b292      	uxth	r2, r2
 800577c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	1c9a      	adds	r2, r3, #2
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800578c:	b29b      	uxth	r3, r3
 800578e:	3b01      	subs	r3, #1
 8005790:	b29a      	uxth	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800579a:	b29b      	uxth	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10e      	bne.n	80057be <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80057ae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7ff ff93 	bl	80056e4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80057be:	bf00      	nop
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b086      	sub	sp, #24
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d13a      	bne.n	8005858 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d109      	bne.n	8005800 <I2S_IRQHandler+0x3a>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f6:	2b40      	cmp	r3, #64	; 0x40
 80057f8:	d102      	bne.n	8005800 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7ff ffb4 	bl	8005768 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005806:	2b40      	cmp	r3, #64	; 0x40
 8005808:	d126      	bne.n	8005858 <I2S_IRQHandler+0x92>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f003 0320 	and.w	r3, r3, #32
 8005814:	2b20      	cmp	r3, #32
 8005816:	d11f      	bne.n	8005858 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005826:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005828:	2300      	movs	r3, #0
 800582a:	613b      	str	r3, [r7, #16]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	613b      	str	r3, [r7, #16]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584a:	f043 0202 	orr.w	r2, r3, #2
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7ff ff50 	bl	80056f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b03      	cmp	r3, #3
 8005862:	d136      	bne.n	80058d2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b02      	cmp	r3, #2
 800586c:	d109      	bne.n	8005882 <I2S_IRQHandler+0xbc>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005878:	2b80      	cmp	r3, #128	; 0x80
 800587a:	d102      	bne.n	8005882 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7ff ff45 	bl	800570c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f003 0308 	and.w	r3, r3, #8
 8005888:	2b08      	cmp	r3, #8
 800588a:	d122      	bne.n	80058d2 <I2S_IRQHandler+0x10c>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	2b20      	cmp	r3, #32
 8005898:	d11b      	bne.n	80058d2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058a8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80058aa:	2300      	movs	r3, #0
 80058ac:	60fb      	str	r3, [r7, #12]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c4:	f043 0204 	orr.w	r2, r3, #4
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff ff13 	bl	80056f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80058d2:	bf00      	nop
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b088      	sub	sp, #32
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a92      	ldr	r2, [pc, #584]	; (8005b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d101      	bne.n	80058fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80058f6:	4b92      	ldr	r3, [pc, #584]	; (8005b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058f8:	e001      	b.n	80058fe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80058fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a8b      	ldr	r2, [pc, #556]	; (8005b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d101      	bne.n	8005918 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005914:	4b8a      	ldr	r3, [pc, #552]	; (8005b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005916:	e001      	b.n	800591c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005918:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005928:	d004      	beq.n	8005934 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	f040 8099 	bne.w	8005a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b02      	cmp	r3, #2
 800593c:	d107      	bne.n	800594e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f925 	bl	8005b98 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b01      	cmp	r3, #1
 8005956:	d107      	bne.n	8005968 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f9c8 	bl	8005cf8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596e:	2b40      	cmp	r3, #64	; 0x40
 8005970:	d13a      	bne.n	80059e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	2b00      	cmp	r3, #0
 800597a:	d035      	beq.n	80059e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a6e      	ldr	r2, [pc, #440]	; (8005b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d101      	bne.n	800598a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005986:	4b6e      	ldr	r3, [pc, #440]	; (8005b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005988:	e001      	b.n	800598e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800598a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4969      	ldr	r1, [pc, #420]	; (8005b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005996:	428b      	cmp	r3, r1
 8005998:	d101      	bne.n	800599e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800599a:	4b69      	ldr	r3, [pc, #420]	; (8005b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800599c:	e001      	b.n	80059a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800599e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80059a6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80059b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80059b8:	2300      	movs	r3, #0
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059da:	f043 0202 	orr.w	r2, r3, #2
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7ff fe88 	bl	80056f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b08      	cmp	r3, #8
 80059f0:	f040 80c3 	bne.w	8005b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f003 0320 	and.w	r3, r3, #32
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 80bd 	beq.w	8005b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a0e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a49      	ldr	r2, [pc, #292]	; (8005b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d101      	bne.n	8005a1e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005a1a:	4b49      	ldr	r3, [pc, #292]	; (8005b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a1c:	e001      	b.n	8005a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005a1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4944      	ldr	r1, [pc, #272]	; (8005b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a2a:	428b      	cmp	r3, r1
 8005a2c:	d101      	bne.n	8005a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005a2e:	4b44      	ldr	r3, [pc, #272]	; (8005b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a30:	e001      	b.n	8005a36 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005a32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a3a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	60bb      	str	r3, [r7, #8]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	60bb      	str	r3, [r7, #8]
 8005a48:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a56:	f043 0204 	orr.w	r2, r3, #4
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff fe4a 	bl	80056f8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005a64:	e089      	b.n	8005b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d107      	bne.n	8005a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f8be 	bl	8005bfc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d107      	bne.n	8005a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f8fd 	bl	8005c94 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa0:	2b40      	cmp	r3, #64	; 0x40
 8005aa2:	d12f      	bne.n	8005b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d02a      	beq.n	8005b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005abc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a1e      	ldr	r2, [pc, #120]	; (8005b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d101      	bne.n	8005acc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005ac8:	4b1d      	ldr	r3, [pc, #116]	; (8005b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005aca:	e001      	b.n	8005ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005acc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4919      	ldr	r1, [pc, #100]	; (8005b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ad8:	428b      	cmp	r3, r1
 8005ada:	d101      	bne.n	8005ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005adc:	4b18      	ldr	r3, [pc, #96]	; (8005b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ade:	e001      	b.n	8005ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005ae0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ae4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ae8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af6:	f043 0202 	orr.w	r2, r3, #2
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7ff fdfa 	bl	80056f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	f003 0308 	and.w	r3, r3, #8
 8005b0a:	2b08      	cmp	r3, #8
 8005b0c:	d136      	bne.n	8005b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f003 0320 	and.w	r3, r3, #32
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d031      	beq.n	8005b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a07      	ldr	r2, [pc, #28]	; (8005b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d101      	bne.n	8005b26 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005b22:	4b07      	ldr	r3, [pc, #28]	; (8005b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b24:	e001      	b.n	8005b2a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005b26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4902      	ldr	r1, [pc, #8]	; (8005b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b32:	428b      	cmp	r3, r1
 8005b34:	d106      	bne.n	8005b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005b36:	4b02      	ldr	r3, [pc, #8]	; (8005b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b38:	e006      	b.n	8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005b3a:	bf00      	nop
 8005b3c:	40003800 	.word	0x40003800
 8005b40:	40003400 	.word	0x40003400
 8005b44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b4c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b5c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b6a:	f043 0204 	orr.w	r2, r3, #4
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7ff fdc0 	bl	80056f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b78:	e000      	b.n	8005b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b7a:	bf00      	nop
}
 8005b7c:	bf00      	nop
 8005b7e:	3720      	adds	r7, #32
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	1c99      	adds	r1, r3, #2
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	6251      	str	r1, [r2, #36]	; 0x24
 8005baa:	881a      	ldrh	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d113      	bne.n	8005bf2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005bd8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d106      	bne.n	8005bf2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7ff ffc9 	bl	8005b84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005bf2:	bf00      	nop
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	1c99      	adds	r1, r3, #2
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	6251      	str	r1, [r2, #36]	; 0x24
 8005c0e:	8819      	ldrh	r1, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a1d      	ldr	r2, [pc, #116]	; (8005c8c <I2SEx_TxISR_I2SExt+0x90>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d101      	bne.n	8005c1e <I2SEx_TxISR_I2SExt+0x22>
 8005c1a:	4b1d      	ldr	r3, [pc, #116]	; (8005c90 <I2SEx_TxISR_I2SExt+0x94>)
 8005c1c:	e001      	b.n	8005c22 <I2SEx_TxISR_I2SExt+0x26>
 8005c1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c22:	460a      	mov	r2, r1
 8005c24:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d121      	bne.n	8005c82 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a12      	ldr	r2, [pc, #72]	; (8005c8c <I2SEx_TxISR_I2SExt+0x90>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d101      	bne.n	8005c4c <I2SEx_TxISR_I2SExt+0x50>
 8005c48:	4b11      	ldr	r3, [pc, #68]	; (8005c90 <I2SEx_TxISR_I2SExt+0x94>)
 8005c4a:	e001      	b.n	8005c50 <I2SEx_TxISR_I2SExt+0x54>
 8005c4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	490d      	ldr	r1, [pc, #52]	; (8005c8c <I2SEx_TxISR_I2SExt+0x90>)
 8005c58:	428b      	cmp	r3, r1
 8005c5a:	d101      	bne.n	8005c60 <I2SEx_TxISR_I2SExt+0x64>
 8005c5c:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <I2SEx_TxISR_I2SExt+0x94>)
 8005c5e:	e001      	b.n	8005c64 <I2SEx_TxISR_I2SExt+0x68>
 8005c60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c68:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d106      	bne.n	8005c82 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7ff ff81 	bl	8005b84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c82:	bf00      	nop
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	40003800 	.word	0x40003800
 8005c90:	40003400 	.word	0x40003400

08005c94 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68d8      	ldr	r0, [r3, #12]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca6:	1c99      	adds	r1, r3, #2
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005cac:	b282      	uxth	r2, r0
 8005cae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d113      	bne.n	8005cf0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005cd6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d106      	bne.n	8005cf0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7ff ff4a 	bl	8005b84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005cf0:	bf00      	nop
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a20      	ldr	r2, [pc, #128]	; (8005d88 <I2SEx_RxISR_I2SExt+0x90>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d101      	bne.n	8005d0e <I2SEx_RxISR_I2SExt+0x16>
 8005d0a:	4b20      	ldr	r3, [pc, #128]	; (8005d8c <I2SEx_RxISR_I2SExt+0x94>)
 8005d0c:	e001      	b.n	8005d12 <I2SEx_RxISR_I2SExt+0x1a>
 8005d0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d12:	68d8      	ldr	r0, [r3, #12]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	1c99      	adds	r1, r3, #2
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005d1e:	b282      	uxth	r2, r0
 8005d20:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d121      	bne.n	8005d7e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a12      	ldr	r2, [pc, #72]	; (8005d88 <I2SEx_RxISR_I2SExt+0x90>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d101      	bne.n	8005d48 <I2SEx_RxISR_I2SExt+0x50>
 8005d44:	4b11      	ldr	r3, [pc, #68]	; (8005d8c <I2SEx_RxISR_I2SExt+0x94>)
 8005d46:	e001      	b.n	8005d4c <I2SEx_RxISR_I2SExt+0x54>
 8005d48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	490d      	ldr	r1, [pc, #52]	; (8005d88 <I2SEx_RxISR_I2SExt+0x90>)
 8005d54:	428b      	cmp	r3, r1
 8005d56:	d101      	bne.n	8005d5c <I2SEx_RxISR_I2SExt+0x64>
 8005d58:	4b0c      	ldr	r3, [pc, #48]	; (8005d8c <I2SEx_RxISR_I2SExt+0x94>)
 8005d5a:	e001      	b.n	8005d60 <I2SEx_RxISR_I2SExt+0x68>
 8005d5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d64:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d106      	bne.n	8005d7e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff ff03 	bl	8005b84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d7e:	bf00      	nop
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	40003800 	.word	0x40003800
 8005d8c:	40003400 	.word	0x40003400

08005d90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e267      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d075      	beq.n	8005e9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dae:	4b88      	ldr	r3, [pc, #544]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 030c 	and.w	r3, r3, #12
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	d00c      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dba:	4b85      	ldr	r3, [pc, #532]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dc2:	2b08      	cmp	r3, #8
 8005dc4:	d112      	bne.n	8005dec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dc6:	4b82      	ldr	r3, [pc, #520]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dd2:	d10b      	bne.n	8005dec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd4:	4b7e      	ldr	r3, [pc, #504]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d05b      	beq.n	8005e98 <HAL_RCC_OscConfig+0x108>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d157      	bne.n	8005e98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e242      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df4:	d106      	bne.n	8005e04 <HAL_RCC_OscConfig+0x74>
 8005df6:	4b76      	ldr	r3, [pc, #472]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a75      	ldr	r2, [pc, #468]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	e01d      	b.n	8005e40 <HAL_RCC_OscConfig+0xb0>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e0c:	d10c      	bne.n	8005e28 <HAL_RCC_OscConfig+0x98>
 8005e0e:	4b70      	ldr	r3, [pc, #448]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a6f      	ldr	r2, [pc, #444]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	4b6d      	ldr	r3, [pc, #436]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a6c      	ldr	r2, [pc, #432]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	e00b      	b.n	8005e40 <HAL_RCC_OscConfig+0xb0>
 8005e28:	4b69      	ldr	r3, [pc, #420]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a68      	ldr	r2, [pc, #416]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	4b66      	ldr	r3, [pc, #408]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a65      	ldr	r2, [pc, #404]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d013      	beq.n	8005e70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e48:	f7fc fb2a 	bl	80024a0 <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e50:	f7fc fb26 	bl	80024a0 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b64      	cmp	r3, #100	; 0x64
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e207      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e62:	4b5b      	ldr	r3, [pc, #364]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0f0      	beq.n	8005e50 <HAL_RCC_OscConfig+0xc0>
 8005e6e:	e014      	b.n	8005e9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e70:	f7fc fb16 	bl	80024a0 <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e78:	f7fc fb12 	bl	80024a0 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b64      	cmp	r3, #100	; 0x64
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e1f3      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e8a:	4b51      	ldr	r3, [pc, #324]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1f0      	bne.n	8005e78 <HAL_RCC_OscConfig+0xe8>
 8005e96:	e000      	b.n	8005e9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d063      	beq.n	8005f6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ea6:	4b4a      	ldr	r3, [pc, #296]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f003 030c 	and.w	r3, r3, #12
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00b      	beq.n	8005eca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005eb2:	4b47      	ldr	r3, [pc, #284]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005eba:	2b08      	cmp	r3, #8
 8005ebc:	d11c      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ebe:	4b44      	ldr	r3, [pc, #272]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d116      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eca:	4b41      	ldr	r3, [pc, #260]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x152>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d001      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e1c7      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee2:	4b3b      	ldr	r3, [pc, #236]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	4937      	ldr	r1, [pc, #220]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ef6:	e03a      	b.n	8005f6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d020      	beq.n	8005f42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f00:	4b34      	ldr	r3, [pc, #208]	; (8005fd4 <HAL_RCC_OscConfig+0x244>)
 8005f02:	2201      	movs	r2, #1
 8005f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f06:	f7fc facb 	bl	80024a0 <HAL_GetTick>
 8005f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f0c:	e008      	b.n	8005f20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f0e:	f7fc fac7 	bl	80024a0 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e1a8      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f20:	4b2b      	ldr	r3, [pc, #172]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0f0      	beq.n	8005f0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f2c:	4b28      	ldr	r3, [pc, #160]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	4925      	ldr	r1, [pc, #148]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	600b      	str	r3, [r1, #0]
 8005f40:	e015      	b.n	8005f6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f42:	4b24      	ldr	r3, [pc, #144]	; (8005fd4 <HAL_RCC_OscConfig+0x244>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f48:	f7fc faaa 	bl	80024a0 <HAL_GetTick>
 8005f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f50:	f7fc faa6 	bl	80024a0 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e187      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f62:	4b1b      	ldr	r3, [pc, #108]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1f0      	bne.n	8005f50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d036      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d016      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f82:	4b15      	ldr	r3, [pc, #84]	; (8005fd8 <HAL_RCC_OscConfig+0x248>)
 8005f84:	2201      	movs	r2, #1
 8005f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f88:	f7fc fa8a 	bl	80024a0 <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f90:	f7fc fa86 	bl	80024a0 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e167      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fa2:	4b0b      	ldr	r3, [pc, #44]	; (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0f0      	beq.n	8005f90 <HAL_RCC_OscConfig+0x200>
 8005fae:	e01b      	b.n	8005fe8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fb0:	4b09      	ldr	r3, [pc, #36]	; (8005fd8 <HAL_RCC_OscConfig+0x248>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fb6:	f7fc fa73 	bl	80024a0 <HAL_GetTick>
 8005fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fbc:	e00e      	b.n	8005fdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fbe:	f7fc fa6f 	bl	80024a0 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d907      	bls.n	8005fdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e150      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
 8005fd0:	40023800 	.word	0x40023800
 8005fd4:	42470000 	.word	0x42470000
 8005fd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fdc:	4b88      	ldr	r3, [pc, #544]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8005fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1ea      	bne.n	8005fbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 8097 	beq.w	8006124 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ffa:	4b81      	ldr	r3, [pc, #516]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10f      	bne.n	8006026 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006006:	2300      	movs	r3, #0
 8006008:	60bb      	str	r3, [r7, #8]
 800600a:	4b7d      	ldr	r3, [pc, #500]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	4a7c      	ldr	r2, [pc, #496]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8006010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006014:	6413      	str	r3, [r2, #64]	; 0x40
 8006016:	4b7a      	ldr	r3, [pc, #488]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800601e:	60bb      	str	r3, [r7, #8]
 8006020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006022:	2301      	movs	r3, #1
 8006024:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006026:	4b77      	ldr	r3, [pc, #476]	; (8006204 <HAL_RCC_OscConfig+0x474>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602e:	2b00      	cmp	r3, #0
 8006030:	d118      	bne.n	8006064 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006032:	4b74      	ldr	r3, [pc, #464]	; (8006204 <HAL_RCC_OscConfig+0x474>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a73      	ldr	r2, [pc, #460]	; (8006204 <HAL_RCC_OscConfig+0x474>)
 8006038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800603c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800603e:	f7fc fa2f 	bl	80024a0 <HAL_GetTick>
 8006042:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006044:	e008      	b.n	8006058 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006046:	f7fc fa2b 	bl	80024a0 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d901      	bls.n	8006058 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e10c      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006058:	4b6a      	ldr	r3, [pc, #424]	; (8006204 <HAL_RCC_OscConfig+0x474>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0f0      	beq.n	8006046 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d106      	bne.n	800607a <HAL_RCC_OscConfig+0x2ea>
 800606c:	4b64      	ldr	r3, [pc, #400]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 800606e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006070:	4a63      	ldr	r2, [pc, #396]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8006072:	f043 0301 	orr.w	r3, r3, #1
 8006076:	6713      	str	r3, [r2, #112]	; 0x70
 8006078:	e01c      	b.n	80060b4 <HAL_RCC_OscConfig+0x324>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	2b05      	cmp	r3, #5
 8006080:	d10c      	bne.n	800609c <HAL_RCC_OscConfig+0x30c>
 8006082:	4b5f      	ldr	r3, [pc, #380]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8006084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006086:	4a5e      	ldr	r2, [pc, #376]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8006088:	f043 0304 	orr.w	r3, r3, #4
 800608c:	6713      	str	r3, [r2, #112]	; 0x70
 800608e:	4b5c      	ldr	r3, [pc, #368]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8006090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006092:	4a5b      	ldr	r2, [pc, #364]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8006094:	f043 0301 	orr.w	r3, r3, #1
 8006098:	6713      	str	r3, [r2, #112]	; 0x70
 800609a:	e00b      	b.n	80060b4 <HAL_RCC_OscConfig+0x324>
 800609c:	4b58      	ldr	r3, [pc, #352]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 800609e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a0:	4a57      	ldr	r2, [pc, #348]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 80060a2:	f023 0301 	bic.w	r3, r3, #1
 80060a6:	6713      	str	r3, [r2, #112]	; 0x70
 80060a8:	4b55      	ldr	r3, [pc, #340]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 80060aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ac:	4a54      	ldr	r2, [pc, #336]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 80060ae:	f023 0304 	bic.w	r3, r3, #4
 80060b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d015      	beq.n	80060e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060bc:	f7fc f9f0 	bl	80024a0 <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060c2:	e00a      	b.n	80060da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060c4:	f7fc f9ec 	bl	80024a0 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e0cb      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060da:	4b49      	ldr	r3, [pc, #292]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 80060dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0ee      	beq.n	80060c4 <HAL_RCC_OscConfig+0x334>
 80060e6:	e014      	b.n	8006112 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060e8:	f7fc f9da 	bl	80024a0 <HAL_GetTick>
 80060ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ee:	e00a      	b.n	8006106 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060f0:	f7fc f9d6 	bl	80024a0 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80060fe:	4293      	cmp	r3, r2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e0b5      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006106:	4b3e      	ldr	r3, [pc, #248]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8006108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1ee      	bne.n	80060f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006112:	7dfb      	ldrb	r3, [r7, #23]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d105      	bne.n	8006124 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006118:	4b39      	ldr	r3, [pc, #228]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 800611a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611c:	4a38      	ldr	r2, [pc, #224]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 800611e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006122:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 80a1 	beq.w	8006270 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800612e:	4b34      	ldr	r3, [pc, #208]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f003 030c 	and.w	r3, r3, #12
 8006136:	2b08      	cmp	r3, #8
 8006138:	d05c      	beq.n	80061f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	2b02      	cmp	r3, #2
 8006140:	d141      	bne.n	80061c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006142:	4b31      	ldr	r3, [pc, #196]	; (8006208 <HAL_RCC_OscConfig+0x478>)
 8006144:	2200      	movs	r2, #0
 8006146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006148:	f7fc f9aa 	bl	80024a0 <HAL_GetTick>
 800614c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800614e:	e008      	b.n	8006162 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006150:	f7fc f9a6 	bl	80024a0 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d901      	bls.n	8006162 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e087      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006162:	4b27      	ldr	r3, [pc, #156]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1f0      	bne.n	8006150 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	69da      	ldr	r2, [r3, #28]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	431a      	orrs	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	019b      	lsls	r3, r3, #6
 800617e:	431a      	orrs	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006184:	085b      	lsrs	r3, r3, #1
 8006186:	3b01      	subs	r3, #1
 8006188:	041b      	lsls	r3, r3, #16
 800618a:	431a      	orrs	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	061b      	lsls	r3, r3, #24
 8006192:	491b      	ldr	r1, [pc, #108]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 8006194:	4313      	orrs	r3, r2
 8006196:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006198:	4b1b      	ldr	r3, [pc, #108]	; (8006208 <HAL_RCC_OscConfig+0x478>)
 800619a:	2201      	movs	r2, #1
 800619c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800619e:	f7fc f97f 	bl	80024a0 <HAL_GetTick>
 80061a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061a4:	e008      	b.n	80061b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061a6:	f7fc f97b 	bl	80024a0 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e05c      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061b8:	4b11      	ldr	r3, [pc, #68]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d0f0      	beq.n	80061a6 <HAL_RCC_OscConfig+0x416>
 80061c4:	e054      	b.n	8006270 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061c6:	4b10      	ldr	r3, [pc, #64]	; (8006208 <HAL_RCC_OscConfig+0x478>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061cc:	f7fc f968 	bl	80024a0 <HAL_GetTick>
 80061d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061d4:	f7fc f964 	bl	80024a0 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e045      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061e6:	4b06      	ldr	r3, [pc, #24]	; (8006200 <HAL_RCC_OscConfig+0x470>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1f0      	bne.n	80061d4 <HAL_RCC_OscConfig+0x444>
 80061f2:	e03d      	b.n	8006270 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d107      	bne.n	800620c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e038      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
 8006200:	40023800 	.word	0x40023800
 8006204:	40007000 	.word	0x40007000
 8006208:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800620c:	4b1b      	ldr	r3, [pc, #108]	; (800627c <HAL_RCC_OscConfig+0x4ec>)
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d028      	beq.n	800626c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006224:	429a      	cmp	r2, r3
 8006226:	d121      	bne.n	800626c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006232:	429a      	cmp	r2, r3
 8006234:	d11a      	bne.n	800626c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800623c:	4013      	ands	r3, r2
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006242:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006244:	4293      	cmp	r3, r2
 8006246:	d111      	bne.n	800626c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	085b      	lsrs	r3, r3, #1
 8006254:	3b01      	subs	r3, #1
 8006256:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006258:	429a      	cmp	r2, r3
 800625a:	d107      	bne.n	800626c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006266:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006268:	429a      	cmp	r2, r3
 800626a:	d001      	beq.n	8006270 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e000      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3718      	adds	r7, #24
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	40023800 	.word	0x40023800

08006280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e0cc      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006294:	4b68      	ldr	r3, [pc, #416]	; (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0307 	and.w	r3, r3, #7
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d90c      	bls.n	80062bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062a2:	4b65      	ldr	r3, [pc, #404]	; (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062aa:	4b63      	ldr	r3, [pc, #396]	; (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0307 	and.w	r3, r3, #7
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d001      	beq.n	80062bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e0b8      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d020      	beq.n	800630a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d005      	beq.n	80062e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062d4:	4b59      	ldr	r3, [pc, #356]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	4a58      	ldr	r2, [pc, #352]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80062de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0308 	and.w	r3, r3, #8
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d005      	beq.n	80062f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062ec:	4b53      	ldr	r3, [pc, #332]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	4a52      	ldr	r2, [pc, #328]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062f8:	4b50      	ldr	r3, [pc, #320]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	494d      	ldr	r1, [pc, #308]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006306:	4313      	orrs	r3, r2
 8006308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d044      	beq.n	80063a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d107      	bne.n	800632e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800631e:	4b47      	ldr	r3, [pc, #284]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d119      	bne.n	800635e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e07f      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	2b02      	cmp	r3, #2
 8006334:	d003      	beq.n	800633e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800633a:	2b03      	cmp	r3, #3
 800633c:	d107      	bne.n	800634e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800633e:	4b3f      	ldr	r3, [pc, #252]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d109      	bne.n	800635e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e06f      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800634e:	4b3b      	ldr	r3, [pc, #236]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0302 	and.w	r3, r3, #2
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e067      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800635e:	4b37      	ldr	r3, [pc, #220]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f023 0203 	bic.w	r2, r3, #3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	4934      	ldr	r1, [pc, #208]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 800636c:	4313      	orrs	r3, r2
 800636e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006370:	f7fc f896 	bl	80024a0 <HAL_GetTick>
 8006374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006376:	e00a      	b.n	800638e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006378:	f7fc f892 	bl	80024a0 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	f241 3288 	movw	r2, #5000	; 0x1388
 8006386:	4293      	cmp	r3, r2
 8006388:	d901      	bls.n	800638e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e04f      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800638e:	4b2b      	ldr	r3, [pc, #172]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f003 020c 	and.w	r2, r3, #12
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	429a      	cmp	r2, r3
 800639e:	d1eb      	bne.n	8006378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063a0:	4b25      	ldr	r3, [pc, #148]	; (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d20c      	bcs.n	80063c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ae:	4b22      	ldr	r3, [pc, #136]	; (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	b2d2      	uxtb	r2, r2
 80063b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063b6:	4b20      	ldr	r3, [pc, #128]	; (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0307 	and.w	r3, r3, #7
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d001      	beq.n	80063c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e032      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d008      	beq.n	80063e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063d4:	4b19      	ldr	r3, [pc, #100]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	4916      	ldr	r1, [pc, #88]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0308 	and.w	r3, r3, #8
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d009      	beq.n	8006406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063f2:	4b12      	ldr	r3, [pc, #72]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	490e      	ldr	r1, [pc, #56]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006402:	4313      	orrs	r3, r2
 8006404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006406:	f000 f821 	bl	800644c <HAL_RCC_GetSysClockFreq>
 800640a:	4602      	mov	r2, r0
 800640c:	4b0b      	ldr	r3, [pc, #44]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	091b      	lsrs	r3, r3, #4
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	490a      	ldr	r1, [pc, #40]	; (8006440 <HAL_RCC_ClockConfig+0x1c0>)
 8006418:	5ccb      	ldrb	r3, [r1, r3]
 800641a:	fa22 f303 	lsr.w	r3, r2, r3
 800641e:	4a09      	ldr	r2, [pc, #36]	; (8006444 <HAL_RCC_ClockConfig+0x1c4>)
 8006420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006422:	4b09      	ldr	r3, [pc, #36]	; (8006448 <HAL_RCC_ClockConfig+0x1c8>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4618      	mov	r0, r3
 8006428:	f7fb fff6 	bl	8002418 <HAL_InitTick>

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	40023c00 	.word	0x40023c00
 800643c:	40023800 	.word	0x40023800
 8006440:	0800a848 	.word	0x0800a848
 8006444:	20000000 	.word	0x20000000
 8006448:	20000004 	.word	0x20000004

0800644c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800644c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006450:	b094      	sub	sp, #80	; 0x50
 8006452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	647b      	str	r3, [r7, #68]	; 0x44
 8006458:	2300      	movs	r3, #0
 800645a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800645c:	2300      	movs	r3, #0
 800645e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006464:	4b79      	ldr	r3, [pc, #484]	; (800664c <HAL_RCC_GetSysClockFreq+0x200>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f003 030c 	and.w	r3, r3, #12
 800646c:	2b08      	cmp	r3, #8
 800646e:	d00d      	beq.n	800648c <HAL_RCC_GetSysClockFreq+0x40>
 8006470:	2b08      	cmp	r3, #8
 8006472:	f200 80e1 	bhi.w	8006638 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <HAL_RCC_GetSysClockFreq+0x34>
 800647a:	2b04      	cmp	r3, #4
 800647c:	d003      	beq.n	8006486 <HAL_RCC_GetSysClockFreq+0x3a>
 800647e:	e0db      	b.n	8006638 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006480:	4b73      	ldr	r3, [pc, #460]	; (8006650 <HAL_RCC_GetSysClockFreq+0x204>)
 8006482:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006484:	e0db      	b.n	800663e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006486:	4b73      	ldr	r3, [pc, #460]	; (8006654 <HAL_RCC_GetSysClockFreq+0x208>)
 8006488:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800648a:	e0d8      	b.n	800663e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800648c:	4b6f      	ldr	r3, [pc, #444]	; (800664c <HAL_RCC_GetSysClockFreq+0x200>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006494:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006496:	4b6d      	ldr	r3, [pc, #436]	; (800664c <HAL_RCC_GetSysClockFreq+0x200>)
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d063      	beq.n	800656a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064a2:	4b6a      	ldr	r3, [pc, #424]	; (800664c <HAL_RCC_GetSysClockFreq+0x200>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	099b      	lsrs	r3, r3, #6
 80064a8:	2200      	movs	r2, #0
 80064aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80064ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80064ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064b4:	633b      	str	r3, [r7, #48]	; 0x30
 80064b6:	2300      	movs	r3, #0
 80064b8:	637b      	str	r3, [r7, #52]	; 0x34
 80064ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80064be:	4622      	mov	r2, r4
 80064c0:	462b      	mov	r3, r5
 80064c2:	f04f 0000 	mov.w	r0, #0
 80064c6:	f04f 0100 	mov.w	r1, #0
 80064ca:	0159      	lsls	r1, r3, #5
 80064cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064d0:	0150      	lsls	r0, r2, #5
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	4621      	mov	r1, r4
 80064d8:	1a51      	subs	r1, r2, r1
 80064da:	6139      	str	r1, [r7, #16]
 80064dc:	4629      	mov	r1, r5
 80064de:	eb63 0301 	sbc.w	r3, r3, r1
 80064e2:	617b      	str	r3, [r7, #20]
 80064e4:	f04f 0200 	mov.w	r2, #0
 80064e8:	f04f 0300 	mov.w	r3, #0
 80064ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064f0:	4659      	mov	r1, fp
 80064f2:	018b      	lsls	r3, r1, #6
 80064f4:	4651      	mov	r1, sl
 80064f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064fa:	4651      	mov	r1, sl
 80064fc:	018a      	lsls	r2, r1, #6
 80064fe:	4651      	mov	r1, sl
 8006500:	ebb2 0801 	subs.w	r8, r2, r1
 8006504:	4659      	mov	r1, fp
 8006506:	eb63 0901 	sbc.w	r9, r3, r1
 800650a:	f04f 0200 	mov.w	r2, #0
 800650e:	f04f 0300 	mov.w	r3, #0
 8006512:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006516:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800651a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800651e:	4690      	mov	r8, r2
 8006520:	4699      	mov	r9, r3
 8006522:	4623      	mov	r3, r4
 8006524:	eb18 0303 	adds.w	r3, r8, r3
 8006528:	60bb      	str	r3, [r7, #8]
 800652a:	462b      	mov	r3, r5
 800652c:	eb49 0303 	adc.w	r3, r9, r3
 8006530:	60fb      	str	r3, [r7, #12]
 8006532:	f04f 0200 	mov.w	r2, #0
 8006536:	f04f 0300 	mov.w	r3, #0
 800653a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800653e:	4629      	mov	r1, r5
 8006540:	024b      	lsls	r3, r1, #9
 8006542:	4621      	mov	r1, r4
 8006544:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006548:	4621      	mov	r1, r4
 800654a:	024a      	lsls	r2, r1, #9
 800654c:	4610      	mov	r0, r2
 800654e:	4619      	mov	r1, r3
 8006550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006552:	2200      	movs	r2, #0
 8006554:	62bb      	str	r3, [r7, #40]	; 0x28
 8006556:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006558:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800655c:	f7fa faaa 	bl	8000ab4 <__aeabi_uldivmod>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	4613      	mov	r3, r2
 8006566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006568:	e058      	b.n	800661c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800656a:	4b38      	ldr	r3, [pc, #224]	; (800664c <HAL_RCC_GetSysClockFreq+0x200>)
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	099b      	lsrs	r3, r3, #6
 8006570:	2200      	movs	r2, #0
 8006572:	4618      	mov	r0, r3
 8006574:	4611      	mov	r1, r2
 8006576:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800657a:	623b      	str	r3, [r7, #32]
 800657c:	2300      	movs	r3, #0
 800657e:	627b      	str	r3, [r7, #36]	; 0x24
 8006580:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006584:	4642      	mov	r2, r8
 8006586:	464b      	mov	r3, r9
 8006588:	f04f 0000 	mov.w	r0, #0
 800658c:	f04f 0100 	mov.w	r1, #0
 8006590:	0159      	lsls	r1, r3, #5
 8006592:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006596:	0150      	lsls	r0, r2, #5
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	4641      	mov	r1, r8
 800659e:	ebb2 0a01 	subs.w	sl, r2, r1
 80065a2:	4649      	mov	r1, r9
 80065a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80065a8:	f04f 0200 	mov.w	r2, #0
 80065ac:	f04f 0300 	mov.w	r3, #0
 80065b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80065b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80065b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80065bc:	ebb2 040a 	subs.w	r4, r2, sl
 80065c0:	eb63 050b 	sbc.w	r5, r3, fp
 80065c4:	f04f 0200 	mov.w	r2, #0
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	00eb      	lsls	r3, r5, #3
 80065ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065d2:	00e2      	lsls	r2, r4, #3
 80065d4:	4614      	mov	r4, r2
 80065d6:	461d      	mov	r5, r3
 80065d8:	4643      	mov	r3, r8
 80065da:	18e3      	adds	r3, r4, r3
 80065dc:	603b      	str	r3, [r7, #0]
 80065de:	464b      	mov	r3, r9
 80065e0:	eb45 0303 	adc.w	r3, r5, r3
 80065e4:	607b      	str	r3, [r7, #4]
 80065e6:	f04f 0200 	mov.w	r2, #0
 80065ea:	f04f 0300 	mov.w	r3, #0
 80065ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065f2:	4629      	mov	r1, r5
 80065f4:	028b      	lsls	r3, r1, #10
 80065f6:	4621      	mov	r1, r4
 80065f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065fc:	4621      	mov	r1, r4
 80065fe:	028a      	lsls	r2, r1, #10
 8006600:	4610      	mov	r0, r2
 8006602:	4619      	mov	r1, r3
 8006604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006606:	2200      	movs	r2, #0
 8006608:	61bb      	str	r3, [r7, #24]
 800660a:	61fa      	str	r2, [r7, #28]
 800660c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006610:	f7fa fa50 	bl	8000ab4 <__aeabi_uldivmod>
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	4613      	mov	r3, r2
 800661a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800661c:	4b0b      	ldr	r3, [pc, #44]	; (800664c <HAL_RCC_GetSysClockFreq+0x200>)
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	0c1b      	lsrs	r3, r3, #16
 8006622:	f003 0303 	and.w	r3, r3, #3
 8006626:	3301      	adds	r3, #1
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800662c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800662e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006630:	fbb2 f3f3 	udiv	r3, r2, r3
 8006634:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006636:	e002      	b.n	800663e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006638:	4b05      	ldr	r3, [pc, #20]	; (8006650 <HAL_RCC_GetSysClockFreq+0x204>)
 800663a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800663c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800663e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006640:	4618      	mov	r0, r3
 8006642:	3750      	adds	r7, #80	; 0x50
 8006644:	46bd      	mov	sp, r7
 8006646:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800664a:	bf00      	nop
 800664c:	40023800 	.word	0x40023800
 8006650:	00f42400 	.word	0x00f42400
 8006654:	007a1200 	.word	0x007a1200

08006658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006658:	b480      	push	{r7}
 800665a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800665c:	4b03      	ldr	r3, [pc, #12]	; (800666c <HAL_RCC_GetHCLKFreq+0x14>)
 800665e:	681b      	ldr	r3, [r3, #0]
}
 8006660:	4618      	mov	r0, r3
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	20000000 	.word	0x20000000

08006670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006674:	f7ff fff0 	bl	8006658 <HAL_RCC_GetHCLKFreq>
 8006678:	4602      	mov	r2, r0
 800667a:	4b05      	ldr	r3, [pc, #20]	; (8006690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	0a9b      	lsrs	r3, r3, #10
 8006680:	f003 0307 	and.w	r3, r3, #7
 8006684:	4903      	ldr	r1, [pc, #12]	; (8006694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006686:	5ccb      	ldrb	r3, [r1, r3]
 8006688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800668c:	4618      	mov	r0, r3
 800668e:	bd80      	pop	{r7, pc}
 8006690:	40023800 	.word	0x40023800
 8006694:	0800a858 	.word	0x0800a858

08006698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800669c:	f7ff ffdc 	bl	8006658 <HAL_RCC_GetHCLKFreq>
 80066a0:	4602      	mov	r2, r0
 80066a2:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	0b5b      	lsrs	r3, r3, #13
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	4903      	ldr	r1, [pc, #12]	; (80066bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80066ae:	5ccb      	ldrb	r3, [r1, r3]
 80066b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	40023800 	.word	0x40023800
 80066bc:	0800a858 	.word	0x0800a858

080066c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d105      	bne.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d038      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80066e8:	4b68      	ldr	r3, [pc, #416]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066ee:	f7fb fed7 	bl	80024a0 <HAL_GetTick>
 80066f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066f4:	e008      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80066f6:	f7fb fed3 	bl	80024a0 <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	2b02      	cmp	r3, #2
 8006702:	d901      	bls.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e0bd      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006708:	4b61      	ldr	r3, [pc, #388]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1f0      	bne.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	019b      	lsls	r3, r3, #6
 800671e:	431a      	orrs	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	071b      	lsls	r3, r3, #28
 8006726:	495a      	ldr	r1, [pc, #360]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006728:	4313      	orrs	r3, r2
 800672a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800672e:	4b57      	ldr	r3, [pc, #348]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006730:	2201      	movs	r2, #1
 8006732:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006734:	f7fb feb4 	bl	80024a0 <HAL_GetTick>
 8006738:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800673a:	e008      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800673c:	f7fb feb0 	bl	80024a0 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b02      	cmp	r3, #2
 8006748:	d901      	bls.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e09a      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800674e:	4b50      	ldr	r3, [pc, #320]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d0f0      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 8083 	beq.w	800686e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006768:	2300      	movs	r3, #0
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	4b48      	ldr	r3, [pc, #288]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800676e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006770:	4a47      	ldr	r2, [pc, #284]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006776:	6413      	str	r3, [r2, #64]	; 0x40
 8006778:	4b45      	ldr	r3, [pc, #276]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800677a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006780:	60fb      	str	r3, [r7, #12]
 8006782:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006784:	4b43      	ldr	r3, [pc, #268]	; (8006894 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a42      	ldr	r2, [pc, #264]	; (8006894 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800678a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800678e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006790:	f7fb fe86 	bl	80024a0 <HAL_GetTick>
 8006794:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006796:	e008      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006798:	f7fb fe82 	bl	80024a0 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d901      	bls.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e06c      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80067aa:	4b3a      	ldr	r3, [pc, #232]	; (8006894 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d0f0      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067b6:	4b36      	ldr	r3, [pc, #216]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067be:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d02f      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d028      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067d4:	4b2e      	ldr	r3, [pc, #184]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067dc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067de:	4b2e      	ldr	r3, [pc, #184]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80067e0:	2201      	movs	r2, #1
 80067e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067e4:	4b2c      	ldr	r3, [pc, #176]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80067e6:	2200      	movs	r2, #0
 80067e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80067ea:	4a29      	ldr	r2, [pc, #164]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80067f0:	4b27      	ldr	r3, [pc, #156]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d114      	bne.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80067fc:	f7fb fe50 	bl	80024a0 <HAL_GetTick>
 8006800:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006802:	e00a      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006804:	f7fb fe4c 	bl	80024a0 <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006812:	4293      	cmp	r3, r2
 8006814:	d901      	bls.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e034      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800681a:	4b1d      	ldr	r3, [pc, #116]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800681c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681e:	f003 0302 	and.w	r3, r3, #2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d0ee      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800682e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006832:	d10d      	bne.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006834:	4b16      	ldr	r3, [pc, #88]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006848:	4911      	ldr	r1, [pc, #68]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800684a:	4313      	orrs	r3, r2
 800684c:	608b      	str	r3, [r1, #8]
 800684e:	e005      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006850:	4b0f      	ldr	r3, [pc, #60]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	4a0e      	ldr	r2, [pc, #56]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006856:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800685a:	6093      	str	r3, [r2, #8]
 800685c:	4b0c      	ldr	r3, [pc, #48]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800685e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006868:	4909      	ldr	r1, [pc, #36]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800686a:	4313      	orrs	r3, r2
 800686c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0308 	and.w	r3, r3, #8
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	7d1a      	ldrb	r2, [r3, #20]
 800687e:	4b07      	ldr	r3, [pc, #28]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006880:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3718      	adds	r7, #24
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	42470068 	.word	0x42470068
 8006890:	40023800 	.word	0x40023800
 8006894:	40007000 	.word	0x40007000
 8006898:	42470e40 	.word	0x42470e40
 800689c:	424711e0 	.word	0x424711e0

080068a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80068a8:	2300      	movs	r3, #0
 80068aa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80068ac:	2300      	movs	r3, #0
 80068ae:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d140      	bne.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80068be:	4b24      	ldr	r3, [pc, #144]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d005      	beq.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d131      	bne.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80068d4:	4b1f      	ldr	r3, [pc, #124]	; (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80068d6:	617b      	str	r3, [r7, #20]
          break;
 80068d8:	e031      	b.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80068da:	4b1d      	ldr	r3, [pc, #116]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068e6:	d109      	bne.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80068e8:	4b19      	ldr	r3, [pc, #100]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80068ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068f2:	4a19      	ldr	r2, [pc, #100]	; (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80068f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f8:	613b      	str	r3, [r7, #16]
 80068fa:	e008      	b.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80068fc:	4b14      	ldr	r3, [pc, #80]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80068fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006902:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006906:	4a15      	ldr	r2, [pc, #84]	; (800695c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006908:	fbb2 f3f3 	udiv	r3, r2, r3
 800690c:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800690e:	4b10      	ldr	r3, [pc, #64]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006914:	099b      	lsrs	r3, r3, #6
 8006916:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	fb02 f303 	mul.w	r3, r2, r3
 8006920:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006922:	4b0b      	ldr	r3, [pc, #44]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006928:	0f1b      	lsrs	r3, r3, #28
 800692a:	f003 0307 	and.w	r3, r3, #7
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	fbb2 f3f3 	udiv	r3, r2, r3
 8006934:	617b      	str	r3, [r7, #20]
          break;
 8006936:	e002      	b.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	617b      	str	r3, [r7, #20]
          break;
 800693c:	bf00      	nop
        }
      }
      break;
 800693e:	bf00      	nop
    }
  }
  return frequency;
 8006940:	697b      	ldr	r3, [r7, #20]
}
 8006942:	4618      	mov	r0, r3
 8006944:	371c      	adds	r7, #28
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	40023800 	.word	0x40023800
 8006954:	00bb8000 	.word	0x00bb8000
 8006958:	007a1200 	.word	0x007a1200
 800695c:	00f42400 	.word	0x00f42400

08006960 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e07b      	b.n	8006a6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006976:	2b00      	cmp	r3, #0
 8006978:	d108      	bne.n	800698c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006982:	d009      	beq.n	8006998 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	61da      	str	r2, [r3, #28]
 800698a:	e005      	b.n	8006998 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d106      	bne.n	80069b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7fb fbd8 	bl	8002168 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80069e0:	431a      	orrs	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069ea:	431a      	orrs	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	431a      	orrs	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	431a      	orrs	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a08:	431a      	orrs	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	69db      	ldr	r3, [r3, #28]
 8006a0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a12:	431a      	orrs	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a1c:	ea42 0103 	orr.w	r1, r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	0c1b      	lsrs	r3, r3, #16
 8006a36:	f003 0104 	and.w	r1, r3, #4
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3e:	f003 0210 	and.w	r2, r3, #16
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	69da      	ldr	r2, [r3, #28]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b082      	sub	sp, #8
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e03f      	b.n	8006b04 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d106      	bne.n	8006a9e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7fb fbad 	bl	80021f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2224      	movs	r2, #36	; 0x24
 8006aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68da      	ldr	r2, [r3, #12]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ab4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f828 	bl	8006b0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	691a      	ldr	r2, [r3, #16]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006aca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	695a      	ldr	r2, [r3, #20]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ada:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68da      	ldr	r2, [r3, #12]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006aea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2220      	movs	r2, #32
 8006af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2220      	movs	r2, #32
 8006afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b10:	b0c0      	sub	sp, #256	; 0x100
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b28:	68d9      	ldr	r1, [r3, #12]
 8006b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	ea40 0301 	orr.w	r3, r0, r1
 8006b34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	431a      	orrs	r2, r3
 8006b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b64:	f021 010c 	bic.w	r1, r1, #12
 8006b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b72:	430b      	orrs	r3, r1
 8006b74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b86:	6999      	ldr	r1, [r3, #24]
 8006b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	ea40 0301 	orr.w	r3, r0, r1
 8006b92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	4b8f      	ldr	r3, [pc, #572]	; (8006dd8 <UART_SetConfig+0x2cc>)
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d005      	beq.n	8006bac <UART_SetConfig+0xa0>
 8006ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	4b8d      	ldr	r3, [pc, #564]	; (8006ddc <UART_SetConfig+0x2d0>)
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d104      	bne.n	8006bb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bac:	f7ff fd74 	bl	8006698 <HAL_RCC_GetPCLK2Freq>
 8006bb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006bb4:	e003      	b.n	8006bbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bb6:	f7ff fd5b 	bl	8006670 <HAL_RCC_GetPCLK1Freq>
 8006bba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bc8:	f040 810c 	bne.w	8006de4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006bd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006bda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006bde:	4622      	mov	r2, r4
 8006be0:	462b      	mov	r3, r5
 8006be2:	1891      	adds	r1, r2, r2
 8006be4:	65b9      	str	r1, [r7, #88]	; 0x58
 8006be6:	415b      	adcs	r3, r3
 8006be8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006bee:	4621      	mov	r1, r4
 8006bf0:	eb12 0801 	adds.w	r8, r2, r1
 8006bf4:	4629      	mov	r1, r5
 8006bf6:	eb43 0901 	adc.w	r9, r3, r1
 8006bfa:	f04f 0200 	mov.w	r2, #0
 8006bfe:	f04f 0300 	mov.w	r3, #0
 8006c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c0e:	4690      	mov	r8, r2
 8006c10:	4699      	mov	r9, r3
 8006c12:	4623      	mov	r3, r4
 8006c14:	eb18 0303 	adds.w	r3, r8, r3
 8006c18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c1c:	462b      	mov	r3, r5
 8006c1e:	eb49 0303 	adc.w	r3, r9, r3
 8006c22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006c36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	18db      	adds	r3, r3, r3
 8006c3e:	653b      	str	r3, [r7, #80]	; 0x50
 8006c40:	4613      	mov	r3, r2
 8006c42:	eb42 0303 	adc.w	r3, r2, r3
 8006c46:	657b      	str	r3, [r7, #84]	; 0x54
 8006c48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006c4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c50:	f7f9 ff30 	bl	8000ab4 <__aeabi_uldivmod>
 8006c54:	4602      	mov	r2, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	4b61      	ldr	r3, [pc, #388]	; (8006de0 <UART_SetConfig+0x2d4>)
 8006c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c5e:	095b      	lsrs	r3, r3, #5
 8006c60:	011c      	lsls	r4, r3, #4
 8006c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c66:	2200      	movs	r2, #0
 8006c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006c70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006c74:	4642      	mov	r2, r8
 8006c76:	464b      	mov	r3, r9
 8006c78:	1891      	adds	r1, r2, r2
 8006c7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006c7c:	415b      	adcs	r3, r3
 8006c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c84:	4641      	mov	r1, r8
 8006c86:	eb12 0a01 	adds.w	sl, r2, r1
 8006c8a:	4649      	mov	r1, r9
 8006c8c:	eb43 0b01 	adc.w	fp, r3, r1
 8006c90:	f04f 0200 	mov.w	r2, #0
 8006c94:	f04f 0300 	mov.w	r3, #0
 8006c98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ca0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ca4:	4692      	mov	sl, r2
 8006ca6:	469b      	mov	fp, r3
 8006ca8:	4643      	mov	r3, r8
 8006caa:	eb1a 0303 	adds.w	r3, sl, r3
 8006cae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cb2:	464b      	mov	r3, r9
 8006cb4:	eb4b 0303 	adc.w	r3, fp, r3
 8006cb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cc8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006ccc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	18db      	adds	r3, r3, r3
 8006cd4:	643b      	str	r3, [r7, #64]	; 0x40
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	eb42 0303 	adc.w	r3, r2, r3
 8006cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8006cde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ce2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006ce6:	f7f9 fee5 	bl	8000ab4 <__aeabi_uldivmod>
 8006cea:	4602      	mov	r2, r0
 8006cec:	460b      	mov	r3, r1
 8006cee:	4611      	mov	r1, r2
 8006cf0:	4b3b      	ldr	r3, [pc, #236]	; (8006de0 <UART_SetConfig+0x2d4>)
 8006cf2:	fba3 2301 	umull	r2, r3, r3, r1
 8006cf6:	095b      	lsrs	r3, r3, #5
 8006cf8:	2264      	movs	r2, #100	; 0x64
 8006cfa:	fb02 f303 	mul.w	r3, r2, r3
 8006cfe:	1acb      	subs	r3, r1, r3
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006d06:	4b36      	ldr	r3, [pc, #216]	; (8006de0 <UART_SetConfig+0x2d4>)
 8006d08:	fba3 2302 	umull	r2, r3, r3, r2
 8006d0c:	095b      	lsrs	r3, r3, #5
 8006d0e:	005b      	lsls	r3, r3, #1
 8006d10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d14:	441c      	add	r4, r3
 8006d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006d24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006d28:	4642      	mov	r2, r8
 8006d2a:	464b      	mov	r3, r9
 8006d2c:	1891      	adds	r1, r2, r2
 8006d2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d30:	415b      	adcs	r3, r3
 8006d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d38:	4641      	mov	r1, r8
 8006d3a:	1851      	adds	r1, r2, r1
 8006d3c:	6339      	str	r1, [r7, #48]	; 0x30
 8006d3e:	4649      	mov	r1, r9
 8006d40:	414b      	adcs	r3, r1
 8006d42:	637b      	str	r3, [r7, #52]	; 0x34
 8006d44:	f04f 0200 	mov.w	r2, #0
 8006d48:	f04f 0300 	mov.w	r3, #0
 8006d4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006d50:	4659      	mov	r1, fp
 8006d52:	00cb      	lsls	r3, r1, #3
 8006d54:	4651      	mov	r1, sl
 8006d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d5a:	4651      	mov	r1, sl
 8006d5c:	00ca      	lsls	r2, r1, #3
 8006d5e:	4610      	mov	r0, r2
 8006d60:	4619      	mov	r1, r3
 8006d62:	4603      	mov	r3, r0
 8006d64:	4642      	mov	r2, r8
 8006d66:	189b      	adds	r3, r3, r2
 8006d68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d6c:	464b      	mov	r3, r9
 8006d6e:	460a      	mov	r2, r1
 8006d70:	eb42 0303 	adc.w	r3, r2, r3
 8006d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	18db      	adds	r3, r3, r3
 8006d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d92:	4613      	mov	r3, r2
 8006d94:	eb42 0303 	adc.w	r3, r2, r3
 8006d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006da2:	f7f9 fe87 	bl	8000ab4 <__aeabi_uldivmod>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4b0d      	ldr	r3, [pc, #52]	; (8006de0 <UART_SetConfig+0x2d4>)
 8006dac:	fba3 1302 	umull	r1, r3, r3, r2
 8006db0:	095b      	lsrs	r3, r3, #5
 8006db2:	2164      	movs	r1, #100	; 0x64
 8006db4:	fb01 f303 	mul.w	r3, r1, r3
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	3332      	adds	r3, #50	; 0x32
 8006dbe:	4a08      	ldr	r2, [pc, #32]	; (8006de0 <UART_SetConfig+0x2d4>)
 8006dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc4:	095b      	lsrs	r3, r3, #5
 8006dc6:	f003 0207 	and.w	r2, r3, #7
 8006dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4422      	add	r2, r4
 8006dd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006dd4:	e105      	b.n	8006fe2 <UART_SetConfig+0x4d6>
 8006dd6:	bf00      	nop
 8006dd8:	40011000 	.word	0x40011000
 8006ddc:	40011400 	.word	0x40011400
 8006de0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006de8:	2200      	movs	r2, #0
 8006dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006dee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006df2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006df6:	4642      	mov	r2, r8
 8006df8:	464b      	mov	r3, r9
 8006dfa:	1891      	adds	r1, r2, r2
 8006dfc:	6239      	str	r1, [r7, #32]
 8006dfe:	415b      	adcs	r3, r3
 8006e00:	627b      	str	r3, [r7, #36]	; 0x24
 8006e02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e06:	4641      	mov	r1, r8
 8006e08:	1854      	adds	r4, r2, r1
 8006e0a:	4649      	mov	r1, r9
 8006e0c:	eb43 0501 	adc.w	r5, r3, r1
 8006e10:	f04f 0200 	mov.w	r2, #0
 8006e14:	f04f 0300 	mov.w	r3, #0
 8006e18:	00eb      	lsls	r3, r5, #3
 8006e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e1e:	00e2      	lsls	r2, r4, #3
 8006e20:	4614      	mov	r4, r2
 8006e22:	461d      	mov	r5, r3
 8006e24:	4643      	mov	r3, r8
 8006e26:	18e3      	adds	r3, r4, r3
 8006e28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e2c:	464b      	mov	r3, r9
 8006e2e:	eb45 0303 	adc.w	r3, r5, r3
 8006e32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e46:	f04f 0200 	mov.w	r2, #0
 8006e4a:	f04f 0300 	mov.w	r3, #0
 8006e4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006e52:	4629      	mov	r1, r5
 8006e54:	008b      	lsls	r3, r1, #2
 8006e56:	4621      	mov	r1, r4
 8006e58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	008a      	lsls	r2, r1, #2
 8006e60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006e64:	f7f9 fe26 	bl	8000ab4 <__aeabi_uldivmod>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4b60      	ldr	r3, [pc, #384]	; (8006ff0 <UART_SetConfig+0x4e4>)
 8006e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8006e72:	095b      	lsrs	r3, r3, #5
 8006e74:	011c      	lsls	r4, r3, #4
 8006e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006e88:	4642      	mov	r2, r8
 8006e8a:	464b      	mov	r3, r9
 8006e8c:	1891      	adds	r1, r2, r2
 8006e8e:	61b9      	str	r1, [r7, #24]
 8006e90:	415b      	adcs	r3, r3
 8006e92:	61fb      	str	r3, [r7, #28]
 8006e94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e98:	4641      	mov	r1, r8
 8006e9a:	1851      	adds	r1, r2, r1
 8006e9c:	6139      	str	r1, [r7, #16]
 8006e9e:	4649      	mov	r1, r9
 8006ea0:	414b      	adcs	r3, r1
 8006ea2:	617b      	str	r3, [r7, #20]
 8006ea4:	f04f 0200 	mov.w	r2, #0
 8006ea8:	f04f 0300 	mov.w	r3, #0
 8006eac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006eb0:	4659      	mov	r1, fp
 8006eb2:	00cb      	lsls	r3, r1, #3
 8006eb4:	4651      	mov	r1, sl
 8006eb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eba:	4651      	mov	r1, sl
 8006ebc:	00ca      	lsls	r2, r1, #3
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	4642      	mov	r2, r8
 8006ec6:	189b      	adds	r3, r3, r2
 8006ec8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ecc:	464b      	mov	r3, r9
 8006ece:	460a      	mov	r2, r1
 8006ed0:	eb42 0303 	adc.w	r3, r2, r3
 8006ed4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ee2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006ee4:	f04f 0200 	mov.w	r2, #0
 8006ee8:	f04f 0300 	mov.w	r3, #0
 8006eec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ef0:	4649      	mov	r1, r9
 8006ef2:	008b      	lsls	r3, r1, #2
 8006ef4:	4641      	mov	r1, r8
 8006ef6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006efa:	4641      	mov	r1, r8
 8006efc:	008a      	lsls	r2, r1, #2
 8006efe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006f02:	f7f9 fdd7 	bl	8000ab4 <__aeabi_uldivmod>
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	4b39      	ldr	r3, [pc, #228]	; (8006ff0 <UART_SetConfig+0x4e4>)
 8006f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f10:	095b      	lsrs	r3, r3, #5
 8006f12:	2164      	movs	r1, #100	; 0x64
 8006f14:	fb01 f303 	mul.w	r3, r1, r3
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	011b      	lsls	r3, r3, #4
 8006f1c:	3332      	adds	r3, #50	; 0x32
 8006f1e:	4a34      	ldr	r2, [pc, #208]	; (8006ff0 <UART_SetConfig+0x4e4>)
 8006f20:	fba2 2303 	umull	r2, r3, r2, r3
 8006f24:	095b      	lsrs	r3, r3, #5
 8006f26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f2a:	441c      	add	r4, r3
 8006f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f30:	2200      	movs	r2, #0
 8006f32:	673b      	str	r3, [r7, #112]	; 0x70
 8006f34:	677a      	str	r2, [r7, #116]	; 0x74
 8006f36:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006f3a:	4642      	mov	r2, r8
 8006f3c:	464b      	mov	r3, r9
 8006f3e:	1891      	adds	r1, r2, r2
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	415b      	adcs	r3, r3
 8006f44:	60fb      	str	r3, [r7, #12]
 8006f46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f4a:	4641      	mov	r1, r8
 8006f4c:	1851      	adds	r1, r2, r1
 8006f4e:	6039      	str	r1, [r7, #0]
 8006f50:	4649      	mov	r1, r9
 8006f52:	414b      	adcs	r3, r1
 8006f54:	607b      	str	r3, [r7, #4]
 8006f56:	f04f 0200 	mov.w	r2, #0
 8006f5a:	f04f 0300 	mov.w	r3, #0
 8006f5e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f62:	4659      	mov	r1, fp
 8006f64:	00cb      	lsls	r3, r1, #3
 8006f66:	4651      	mov	r1, sl
 8006f68:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f6c:	4651      	mov	r1, sl
 8006f6e:	00ca      	lsls	r2, r1, #3
 8006f70:	4610      	mov	r0, r2
 8006f72:	4619      	mov	r1, r3
 8006f74:	4603      	mov	r3, r0
 8006f76:	4642      	mov	r2, r8
 8006f78:	189b      	adds	r3, r3, r2
 8006f7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f7c:	464b      	mov	r3, r9
 8006f7e:	460a      	mov	r2, r1
 8006f80:	eb42 0303 	adc.w	r3, r2, r3
 8006f84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	663b      	str	r3, [r7, #96]	; 0x60
 8006f90:	667a      	str	r2, [r7, #100]	; 0x64
 8006f92:	f04f 0200 	mov.w	r2, #0
 8006f96:	f04f 0300 	mov.w	r3, #0
 8006f9a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006f9e:	4649      	mov	r1, r9
 8006fa0:	008b      	lsls	r3, r1, #2
 8006fa2:	4641      	mov	r1, r8
 8006fa4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fa8:	4641      	mov	r1, r8
 8006faa:	008a      	lsls	r2, r1, #2
 8006fac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006fb0:	f7f9 fd80 	bl	8000ab4 <__aeabi_uldivmod>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4b0d      	ldr	r3, [pc, #52]	; (8006ff0 <UART_SetConfig+0x4e4>)
 8006fba:	fba3 1302 	umull	r1, r3, r3, r2
 8006fbe:	095b      	lsrs	r3, r3, #5
 8006fc0:	2164      	movs	r1, #100	; 0x64
 8006fc2:	fb01 f303 	mul.w	r3, r1, r3
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	011b      	lsls	r3, r3, #4
 8006fca:	3332      	adds	r3, #50	; 0x32
 8006fcc:	4a08      	ldr	r2, [pc, #32]	; (8006ff0 <UART_SetConfig+0x4e4>)
 8006fce:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd2:	095b      	lsrs	r3, r3, #5
 8006fd4:	f003 020f 	and.w	r2, r3, #15
 8006fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4422      	add	r2, r4
 8006fe0:	609a      	str	r2, [r3, #8]
}
 8006fe2:	bf00      	nop
 8006fe4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fee:	bf00      	nop
 8006ff0:	51eb851f 	.word	0x51eb851f

08006ff4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	f107 001c 	add.w	r0, r7, #28
 8007002:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007008:	2b01      	cmp	r3, #1
 800700a:	d122      	bne.n	8007052 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007010:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007036:	2b01      	cmp	r3, #1
 8007038:	d105      	bne.n	8007046 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f9c0 	bl	80073cc <USB_CoreReset>
 800704c:	4603      	mov	r3, r0
 800704e:	73fb      	strb	r3, [r7, #15]
 8007050:	e01a      	b.n	8007088 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f9b4 	bl	80073cc <USB_CoreReset>
 8007064:	4603      	mov	r3, r0
 8007066:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800706a:	2b00      	cmp	r3, #0
 800706c:	d106      	bne.n	800707c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007072:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	639a      	str	r2, [r3, #56]	; 0x38
 800707a:	e005      	b.n	8007088 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007080:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708a:	2b01      	cmp	r3, #1
 800708c:	d10b      	bne.n	80070a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f043 0206 	orr.w	r2, r3, #6
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f043 0220 	orr.w	r2, r3, #32
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070b2:	b004      	add	sp, #16
 80070b4:	4770      	bx	lr

080070b6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b083      	sub	sp, #12
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f043 0201 	orr.w	r2, r3, #1
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f023 0201 	bic.w	r2, r3, #1
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b084      	sub	sp, #16
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	460b      	mov	r3, r1
 8007104:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007116:	78fb      	ldrb	r3, [r7, #3]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d115      	bne.n	8007148 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007128:	2001      	movs	r0, #1
 800712a:	f7fb f9c5 	bl	80024b8 <HAL_Delay>
      ms++;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	3301      	adds	r3, #1
 8007132:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f93a 	bl	80073ae <USB_GetMode>
 800713a:	4603      	mov	r3, r0
 800713c:	2b01      	cmp	r3, #1
 800713e:	d01e      	beq.n	800717e <USB_SetCurrentMode+0x84>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b31      	cmp	r3, #49	; 0x31
 8007144:	d9f0      	bls.n	8007128 <USB_SetCurrentMode+0x2e>
 8007146:	e01a      	b.n	800717e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007148:	78fb      	ldrb	r3, [r7, #3]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d115      	bne.n	800717a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800715a:	2001      	movs	r0, #1
 800715c:	f7fb f9ac 	bl	80024b8 <HAL_Delay>
      ms++;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	3301      	adds	r3, #1
 8007164:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f921 	bl	80073ae <USB_GetMode>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d005      	beq.n	800717e <USB_SetCurrentMode+0x84>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2b31      	cmp	r3, #49	; 0x31
 8007176:	d9f0      	bls.n	800715a <USB_SetCurrentMode+0x60>
 8007178:	e001      	b.n	800717e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e005      	b.n	800718a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2b32      	cmp	r3, #50	; 0x32
 8007182:	d101      	bne.n	8007188 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e000      	b.n	800718a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
	...

08007194 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800719e:	2300      	movs	r3, #0
 80071a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	3301      	adds	r3, #1
 80071a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4a13      	ldr	r2, [pc, #76]	; (80071f8 <USB_FlushTxFifo+0x64>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d901      	bls.n	80071b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e01b      	b.n	80071ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	daf2      	bge.n	80071a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	019b      	lsls	r3, r3, #6
 80071c4:	f043 0220 	orr.w	r2, r3, #32
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	3301      	adds	r3, #1
 80071d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	4a08      	ldr	r2, [pc, #32]	; (80071f8 <USB_FlushTxFifo+0x64>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d901      	bls.n	80071de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e006      	b.n	80071ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	f003 0320 	and.w	r3, r3, #32
 80071e6:	2b20      	cmp	r3, #32
 80071e8:	d0f0      	beq.n	80071cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr
 80071f8:	00030d40 	.word	0x00030d40

080071fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007204:	2300      	movs	r3, #0
 8007206:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3301      	adds	r3, #1
 800720c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	4a11      	ldr	r2, [pc, #68]	; (8007258 <USB_FlushRxFifo+0x5c>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d901      	bls.n	800721a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e018      	b.n	800724c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	daf2      	bge.n	8007208 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007222:	2300      	movs	r3, #0
 8007224:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2210      	movs	r2, #16
 800722a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	3301      	adds	r3, #1
 8007230:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	4a08      	ldr	r2, [pc, #32]	; (8007258 <USB_FlushRxFifo+0x5c>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d901      	bls.n	800723e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e006      	b.n	800724c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	f003 0310 	and.w	r3, r3, #16
 8007246:	2b10      	cmp	r3, #16
 8007248:	d0f0      	beq.n	800722c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	00030d40 	.word	0x00030d40

0800725c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800725c:	b480      	push	{r7}
 800725e:	b089      	sub	sp, #36	; 0x24
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	4611      	mov	r1, r2
 8007268:	461a      	mov	r2, r3
 800726a:	460b      	mov	r3, r1
 800726c:	71fb      	strb	r3, [r7, #7]
 800726e:	4613      	mov	r3, r2
 8007270:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800727a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800727e:	2b00      	cmp	r3, #0
 8007280:	d123      	bne.n	80072ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007282:	88bb      	ldrh	r3, [r7, #4]
 8007284:	3303      	adds	r3, #3
 8007286:	089b      	lsrs	r3, r3, #2
 8007288:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800728a:	2300      	movs	r3, #0
 800728c:	61bb      	str	r3, [r7, #24]
 800728e:	e018      	b.n	80072c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007290:	79fb      	ldrb	r3, [r7, #7]
 8007292:	031a      	lsls	r2, r3, #12
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	4413      	add	r3, r2
 8007298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800729c:	461a      	mov	r2, r3
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	3301      	adds	r3, #1
 80072a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	3301      	adds	r3, #1
 80072ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	3301      	adds	r3, #1
 80072b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	3301      	adds	r3, #1
 80072ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	3301      	adds	r3, #1
 80072c0:	61bb      	str	r3, [r7, #24]
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d3e2      	bcc.n	8007290 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3724      	adds	r7, #36	; 0x24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80072d8:	b480      	push	{r7}
 80072da:	b08b      	sub	sp, #44	; 0x2c
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	4613      	mov	r3, r2
 80072e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80072ee:	88fb      	ldrh	r3, [r7, #6]
 80072f0:	089b      	lsrs	r3, r3, #2
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80072f6:	88fb      	ldrh	r3, [r7, #6]
 80072f8:	f003 0303 	and.w	r3, r3, #3
 80072fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80072fe:	2300      	movs	r3, #0
 8007300:	623b      	str	r3, [r7, #32]
 8007302:	e014      	b.n	800732e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	3301      	adds	r3, #1
 8007314:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007318:	3301      	adds	r3, #1
 800731a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	3301      	adds	r3, #1
 8007320:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007324:	3301      	adds	r3, #1
 8007326:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	3301      	adds	r3, #1
 800732c:	623b      	str	r3, [r7, #32]
 800732e:	6a3a      	ldr	r2, [r7, #32]
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	429a      	cmp	r2, r3
 8007334:	d3e6      	bcc.n	8007304 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007336:	8bfb      	ldrh	r3, [r7, #30]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d01e      	beq.n	800737a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800733c:	2300      	movs	r3, #0
 800733e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007346:	461a      	mov	r2, r3
 8007348:	f107 0310 	add.w	r3, r7, #16
 800734c:	6812      	ldr	r2, [r2, #0]
 800734e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	b2db      	uxtb	r3, r3
 8007356:	00db      	lsls	r3, r3, #3
 8007358:	fa22 f303 	lsr.w	r3, r2, r3
 800735c:	b2da      	uxtb	r2, r3
 800735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007360:	701a      	strb	r2, [r3, #0]
      i++;
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	3301      	adds	r3, #1
 8007366:	623b      	str	r3, [r7, #32]
      pDest++;
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	3301      	adds	r3, #1
 800736c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800736e:	8bfb      	ldrh	r3, [r7, #30]
 8007370:	3b01      	subs	r3, #1
 8007372:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007374:	8bfb      	ldrh	r3, [r7, #30]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1ea      	bne.n	8007350 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800737c:	4618      	mov	r0, r3
 800737e:	372c      	adds	r7, #44	; 0x2c
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	4013      	ands	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80073a0:	68fb      	ldr	r3, [r7, #12]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b083      	sub	sp, #12
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	f003 0301 	and.w	r3, r3, #1
}
 80073be:	4618      	mov	r0, r3
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
	...

080073cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	3301      	adds	r3, #1
 80073dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	4a13      	ldr	r2, [pc, #76]	; (8007430 <USB_CoreReset+0x64>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d901      	bls.n	80073ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e01b      	b.n	8007422 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	daf2      	bge.n	80073d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80073f2:	2300      	movs	r3, #0
 80073f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	f043 0201 	orr.w	r2, r3, #1
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	3301      	adds	r3, #1
 8007406:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	4a09      	ldr	r2, [pc, #36]	; (8007430 <USB_CoreReset+0x64>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d901      	bls.n	8007414 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e006      	b.n	8007422 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	2b01      	cmp	r3, #1
 800741e:	d0f0      	beq.n	8007402 <USB_CoreReset+0x36>

  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	00030d40 	.word	0x00030d40

08007434 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007434:	b084      	sub	sp, #16
 8007436:	b580      	push	{r7, lr}
 8007438:	b086      	sub	sp, #24
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007442:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007454:	461a      	mov	r2, r3
 8007456:	2300      	movs	r3, #0
 8007458:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007476:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007486:	2b00      	cmp	r3, #0
 8007488:	d018      	beq.n	80074bc <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800748a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748c:	2b01      	cmp	r3, #1
 800748e:	d10a      	bne.n	80074a6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800749e:	f043 0304 	orr.w	r3, r3, #4
 80074a2:	6013      	str	r3, [r2, #0]
 80074a4:	e014      	b.n	80074d0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074b4:	f023 0304 	bic.w	r3, r3, #4
 80074b8:	6013      	str	r3, [r2, #0]
 80074ba:	e009      	b.n	80074d0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074ca:	f023 0304 	bic.w	r3, r3, #4
 80074ce:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80074d0:	2110      	movs	r1, #16
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7ff fe5e 	bl	8007194 <USB_FlushTxFifo>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7ff fe8a 	bl	80071fc <USB_FlushRxFifo>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80074f2:	2300      	movs	r3, #0
 80074f4:	613b      	str	r3, [r7, #16]
 80074f6:	e015      	b.n	8007524 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	015a      	lsls	r2, r3, #5
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	4413      	add	r3, r2
 8007500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007504:	461a      	mov	r2, r3
 8007506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800750a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	015a      	lsls	r2, r3, #5
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4413      	add	r3, r2
 8007514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007518:	461a      	mov	r2, r3
 800751a:	2300      	movs	r3, #0
 800751c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	3301      	adds	r3, #1
 8007522:	613b      	str	r3, [r7, #16]
 8007524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	429a      	cmp	r2, r3
 800752a:	d3e5      	bcc.n	80074f8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007538:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800753e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00b      	beq.n	800755e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800754c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a13      	ldr	r2, [pc, #76]	; (80075a0 <USB_HostInit+0x16c>)
 8007552:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a13      	ldr	r2, [pc, #76]	; (80075a4 <USB_HostInit+0x170>)
 8007558:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800755c:	e009      	b.n	8007572 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2280      	movs	r2, #128	; 0x80
 8007562:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a10      	ldr	r2, [pc, #64]	; (80075a8 <USB_HostInit+0x174>)
 8007568:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a0f      	ldr	r2, [pc, #60]	; (80075ac <USB_HostInit+0x178>)
 800756e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007574:	2b00      	cmp	r3, #0
 8007576:	d105      	bne.n	8007584 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	f043 0210 	orr.w	r2, r3, #16
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	699a      	ldr	r2, [r3, #24]
 8007588:	4b09      	ldr	r3, [pc, #36]	; (80075b0 <USB_HostInit+0x17c>)
 800758a:	4313      	orrs	r3, r2
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007590:	7dfb      	ldrb	r3, [r7, #23]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800759c:	b004      	add	sp, #16
 800759e:	4770      	bx	lr
 80075a0:	01000200 	.word	0x01000200
 80075a4:	00e00300 	.word	0x00e00300
 80075a8:	00600080 	.word	0x00600080
 80075ac:	004000e0 	.word	0x004000e0
 80075b0:	a3200008 	.word	0xa3200008

080075b4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	460b      	mov	r3, r1
 80075be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075d2:	f023 0303 	bic.w	r3, r3, #3
 80075d6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	78fb      	ldrb	r3, [r7, #3]
 80075e2:	f003 0303 	and.w	r3, r3, #3
 80075e6:	68f9      	ldr	r1, [r7, #12]
 80075e8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80075ec:	4313      	orrs	r3, r2
 80075ee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80075f0:	78fb      	ldrb	r3, [r7, #3]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d107      	bne.n	8007606 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075fc:	461a      	mov	r2, r3
 80075fe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007602:	6053      	str	r3, [r2, #4]
 8007604:	e009      	b.n	800761a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007606:	78fb      	ldrb	r3, [r7, #3]
 8007608:	2b02      	cmp	r3, #2
 800760a:	d106      	bne.n	800761a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007612:	461a      	mov	r2, r3
 8007614:	f241 7370 	movw	r3, #6000	; 0x1770
 8007618:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007648:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007656:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007658:	2064      	movs	r0, #100	; 0x64
 800765a:	f7fa ff2d 	bl	80024b8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007666:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800766a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800766c:	200a      	movs	r0, #10
 800766e:	f7fa ff23 	bl	80024b8 <HAL_Delay>

  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	460b      	mov	r3, r1
 8007686:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800768c:	2300      	movs	r3, #0
 800768e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80076a0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d109      	bne.n	80076c0 <USB_DriveVbus+0x44>
 80076ac:	78fb      	ldrb	r3, [r7, #3]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d106      	bne.n	80076c0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80076ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80076be:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ca:	d109      	bne.n	80076e0 <USB_DriveVbus+0x64>
 80076cc:	78fb      	ldrb	r3, [r7, #3]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d106      	bne.n	80076e0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80076da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076de:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b085      	sub	sp, #20
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	0c5b      	lsrs	r3, r3, #17
 800770c:	f003 0303 	and.w	r3, r3, #3
}
 8007710:	4618      	mov	r0, r3
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	b29b      	uxth	r3, r3
}
 8007732:	4618      	mov	r0, r3
 8007734:	3714      	adds	r7, #20
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
	...

08007740 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b088      	sub	sp, #32
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	4608      	mov	r0, r1
 800774a:	4611      	mov	r1, r2
 800774c:	461a      	mov	r2, r3
 800774e:	4603      	mov	r3, r0
 8007750:	70fb      	strb	r3, [r7, #3]
 8007752:	460b      	mov	r3, r1
 8007754:	70bb      	strb	r3, [r7, #2]
 8007756:	4613      	mov	r3, r2
 8007758:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800775a:	2300      	movs	r3, #0
 800775c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007762:	78fb      	ldrb	r3, [r7, #3]
 8007764:	015a      	lsls	r2, r3, #5
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	4413      	add	r3, r2
 800776a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800776e:	461a      	mov	r2, r3
 8007770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007774:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007776:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800777a:	2b03      	cmp	r3, #3
 800777c:	d87e      	bhi.n	800787c <USB_HC_Init+0x13c>
 800777e:	a201      	add	r2, pc, #4	; (adr r2, 8007784 <USB_HC_Init+0x44>)
 8007780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007784:	08007795 	.word	0x08007795
 8007788:	0800783f 	.word	0x0800783f
 800778c:	08007795 	.word	0x08007795
 8007790:	08007801 	.word	0x08007801
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007794:	78fb      	ldrb	r3, [r7, #3]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	4413      	add	r3, r2
 800779c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077a0:	461a      	mov	r2, r3
 80077a2:	f240 439d 	movw	r3, #1181	; 0x49d
 80077a6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80077a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	da10      	bge.n	80077d2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	015a      	lsls	r2, r3, #5
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	4413      	add	r3, r2
 80077b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	78fa      	ldrb	r2, [r7, #3]
 80077c0:	0151      	lsls	r1, r2, #5
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	440a      	add	r2, r1
 80077c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077ce:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80077d0:	e057      	b.n	8007882 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d051      	beq.n	8007882 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80077de:	78fb      	ldrb	r3, [r7, #3]
 80077e0:	015a      	lsls	r2, r3, #5
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	4413      	add	r3, r2
 80077e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	78fa      	ldrb	r2, [r7, #3]
 80077ee:	0151      	lsls	r1, r2, #5
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	440a      	add	r2, r1
 80077f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80077fc:	60d3      	str	r3, [r2, #12]
      break;
 80077fe:	e040      	b.n	8007882 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007800:	78fb      	ldrb	r3, [r7, #3]
 8007802:	015a      	lsls	r2, r3, #5
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	4413      	add	r3, r2
 8007808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800780c:	461a      	mov	r2, r3
 800780e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007812:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007814:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007818:	2b00      	cmp	r3, #0
 800781a:	da34      	bge.n	8007886 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800781c:	78fb      	ldrb	r3, [r7, #3]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	4413      	add	r3, r2
 8007824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	78fa      	ldrb	r2, [r7, #3]
 800782c:	0151      	lsls	r1, r2, #5
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	440a      	add	r2, r1
 8007832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800783a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800783c:	e023      	b.n	8007886 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800783e:	78fb      	ldrb	r3, [r7, #3]
 8007840:	015a      	lsls	r2, r3, #5
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	4413      	add	r3, r2
 8007846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800784a:	461a      	mov	r2, r3
 800784c:	f240 2325 	movw	r3, #549	; 0x225
 8007850:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007852:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007856:	2b00      	cmp	r3, #0
 8007858:	da17      	bge.n	800788a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800785a:	78fb      	ldrb	r3, [r7, #3]
 800785c:	015a      	lsls	r2, r3, #5
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	4413      	add	r3, r2
 8007862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	78fa      	ldrb	r2, [r7, #3]
 800786a:	0151      	lsls	r1, r2, #5
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	440a      	add	r2, r1
 8007870:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007874:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007878:	60d3      	str	r3, [r2, #12]
      }
      break;
 800787a:	e006      	b.n	800788a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	77fb      	strb	r3, [r7, #31]
      break;
 8007880:	e004      	b.n	800788c <USB_HC_Init+0x14c>
      break;
 8007882:	bf00      	nop
 8007884:	e002      	b.n	800788c <USB_HC_Init+0x14c>
      break;
 8007886:	bf00      	nop
 8007888:	e000      	b.n	800788c <USB_HC_Init+0x14c>
      break;
 800788a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800788c:	78fb      	ldrb	r3, [r7, #3]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	4413      	add	r3, r2
 8007894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	78fa      	ldrb	r2, [r7, #3]
 800789c:	0151      	lsls	r1, r2, #5
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	440a      	add	r2, r1
 80078a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078a6:	f043 0302 	orr.w	r3, r3, #2
 80078aa:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078b2:	699a      	ldr	r2, [r3, #24]
 80078b4:	78fb      	ldrb	r3, [r7, #3]
 80078b6:	f003 030f 	and.w	r3, r3, #15
 80078ba:	2101      	movs	r1, #1
 80078bc:	fa01 f303 	lsl.w	r3, r1, r3
 80078c0:	6939      	ldr	r1, [r7, #16]
 80078c2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80078c6:	4313      	orrs	r3, r2
 80078c8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80078d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	da03      	bge.n	80078e6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80078de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078e2:	61bb      	str	r3, [r7, #24]
 80078e4:	e001      	b.n	80078ea <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80078e6:	2300      	movs	r3, #0
 80078e8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7ff feff 	bl	80076ee <USB_GetHostSpeed>
 80078f0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80078f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d106      	bne.n	8007908 <USB_HC_Init+0x1c8>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d003      	beq.n	8007908 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007900:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	e001      	b.n	800790c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007908:	2300      	movs	r3, #0
 800790a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800790c:	787b      	ldrb	r3, [r7, #1]
 800790e:	059b      	lsls	r3, r3, #22
 8007910:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007914:	78bb      	ldrb	r3, [r7, #2]
 8007916:	02db      	lsls	r3, r3, #11
 8007918:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800791c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800791e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007922:	049b      	lsls	r3, r3, #18
 8007924:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007928:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800792a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800792c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007930:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007936:	78fb      	ldrb	r3, [r7, #3]
 8007938:	0159      	lsls	r1, r3, #5
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	440b      	add	r3, r1
 800793e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007942:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007948:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800794a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800794e:	2b03      	cmp	r3, #3
 8007950:	d003      	beq.n	800795a <USB_HC_Init+0x21a>
 8007952:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007956:	2b01      	cmp	r3, #1
 8007958:	d10f      	bne.n	800797a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800795a:	78fb      	ldrb	r3, [r7, #3]
 800795c:	015a      	lsls	r2, r3, #5
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	4413      	add	r3, r2
 8007962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	78fa      	ldrb	r2, [r7, #3]
 800796a:	0151      	lsls	r1, r2, #5
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	440a      	add	r2, r1
 8007970:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007974:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007978:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800797a:	7ffb      	ldrb	r3, [r7, #31]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3720      	adds	r7, #32
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b08c      	sub	sp, #48	; 0x30
 8007988:	af02      	add	r7, sp, #8
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	4613      	mov	r3, r2
 8007990:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	785b      	ldrb	r3, [r3, #1]
 800799a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800799c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079a0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d02d      	beq.n	8007a0a <USB_HC_StartXfer+0x86>
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	791b      	ldrb	r3, [r3, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d129      	bne.n	8007a0a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80079b6:	79fb      	ldrb	r3, [r7, #7]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d117      	bne.n	80079ec <USB_HC_StartXfer+0x68>
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	79db      	ldrb	r3, [r3, #7]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d003      	beq.n	80079cc <USB_HC_StartXfer+0x48>
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	79db      	ldrb	r3, [r3, #7]
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d10f      	bne.n	80079ec <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	6a3b      	ldr	r3, [r7, #32]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	69fa      	ldr	r2, [r7, #28]
 80079dc:	0151      	lsls	r1, r2, #5
 80079de:	6a3a      	ldr	r2, [r7, #32]
 80079e0:	440a      	add	r2, r1
 80079e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ea:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80079ec:	79fb      	ldrb	r3, [r7, #7]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10b      	bne.n	8007a0a <USB_HC_StartXfer+0x86>
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	795b      	ldrb	r3, [r3, #5]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d107      	bne.n	8007a0a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	785b      	ldrb	r3, [r3, #1]
 80079fe:	4619      	mov	r1, r3
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f000 fa0f 	bl	8007e24 <USB_DoPing>
      return HAL_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	e0f8      	b.n	8007bfc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d018      	beq.n	8007a44 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	8912      	ldrh	r2, [r2, #8]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	8912      	ldrh	r2, [r2, #8]
 8007a22:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a26:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007a28:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007a2a:	8b7b      	ldrh	r3, [r7, #26]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d90b      	bls.n	8007a48 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007a30:	8b7b      	ldrh	r3, [r7, #26]
 8007a32:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	8912      	ldrh	r2, [r2, #8]
 8007a3a:	fb03 f202 	mul.w	r2, r3, r2
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	611a      	str	r2, [r3, #16]
 8007a42:	e001      	b.n	8007a48 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007a44:	2301      	movs	r3, #1
 8007a46:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	78db      	ldrb	r3, [r3, #3]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d007      	beq.n	8007a60 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	8912      	ldrh	r2, [r2, #8]
 8007a56:	fb03 f202 	mul.w	r2, r3, r2
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	611a      	str	r2, [r3, #16]
 8007a5e:	e003      	b.n	8007a68 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	695a      	ldr	r2, [r3, #20]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007a70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007a72:	04d9      	lsls	r1, r3, #19
 8007a74:	4b63      	ldr	r3, [pc, #396]	; (8007c04 <USB_HC_StartXfer+0x280>)
 8007a76:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a78:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	7a9b      	ldrb	r3, [r3, #10]
 8007a7e:	075b      	lsls	r3, r3, #29
 8007a80:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a84:	69f9      	ldr	r1, [r7, #28]
 8007a86:	0148      	lsls	r0, r1, #5
 8007a88:	6a39      	ldr	r1, [r7, #32]
 8007a8a:	4401      	add	r1, r0
 8007a8c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007a90:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a92:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007a94:	79fb      	ldrb	r3, [r7, #7]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d009      	beq.n	8007aae <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	68d9      	ldr	r1, [r3, #12]
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	6a3b      	ldr	r3, [r7, #32]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aaa:	460a      	mov	r2, r1
 8007aac:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	bf0c      	ite	eq
 8007abe:	2301      	moveq	r3, #1
 8007ac0:	2300      	movne	r3, #0
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	015a      	lsls	r2, r3, #5
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	69fa      	ldr	r2, [r7, #28]
 8007ad6:	0151      	lsls	r1, r2, #5
 8007ad8:	6a3a      	ldr	r2, [r7, #32]
 8007ada:	440a      	add	r2, r1
 8007adc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ae0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ae4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	7e7b      	ldrb	r3, [r7, #25]
 8007af6:	075b      	lsls	r3, r3, #29
 8007af8:	69f9      	ldr	r1, [r7, #28]
 8007afa:	0148      	lsls	r0, r1, #5
 8007afc:	6a39      	ldr	r1, [r7, #32]
 8007afe:	4401      	add	r1, r0
 8007b00:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007b04:	4313      	orrs	r3, r2
 8007b06:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	015a      	lsls	r2, r3, #5
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b1e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	78db      	ldrb	r3, [r3, #3]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d004      	beq.n	8007b32 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b2e:	613b      	str	r3, [r7, #16]
 8007b30:	e003      	b.n	8007b3a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b38:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b40:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	015a      	lsls	r2, r3, #5
 8007b46:	6a3b      	ldr	r3, [r7, #32]
 8007b48:	4413      	add	r3, r2
 8007b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b4e:	461a      	mov	r2, r3
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007b54:	79fb      	ldrb	r3, [r7, #7]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d001      	beq.n	8007b5e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	e04e      	b.n	8007bfc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	78db      	ldrb	r3, [r3, #3]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d149      	bne.n	8007bfa <USB_HC_StartXfer+0x276>
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d045      	beq.n	8007bfa <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	79db      	ldrb	r3, [r3, #7]
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d830      	bhi.n	8007bd8 <USB_HC_StartXfer+0x254>
 8007b76:	a201      	add	r2, pc, #4	; (adr r2, 8007b7c <USB_HC_StartXfer+0x1f8>)
 8007b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7c:	08007b8d 	.word	0x08007b8d
 8007b80:	08007bb1 	.word	0x08007bb1
 8007b84:	08007b8d 	.word	0x08007b8d
 8007b88:	08007bb1 	.word	0x08007bb1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	695b      	ldr	r3, [r3, #20]
 8007b90:	3303      	adds	r3, #3
 8007b92:	089b      	lsrs	r3, r3, #2
 8007b94:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007b96:	8afa      	ldrh	r2, [r7, #22]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d91c      	bls.n	8007bdc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	f043 0220 	orr.w	r2, r3, #32
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	619a      	str	r2, [r3, #24]
        }
        break;
 8007bae:	e015      	b.n	8007bdc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	3303      	adds	r3, #3
 8007bb6:	089b      	lsrs	r3, r3, #2
 8007bb8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007bba:	8afa      	ldrh	r2, [r7, #22]
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d90a      	bls.n	8007be0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	619a      	str	r2, [r3, #24]
        }
        break;
 8007bd6:	e003      	b.n	8007be0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007bd8:	bf00      	nop
 8007bda:	e002      	b.n	8007be2 <USB_HC_StartXfer+0x25e>
        break;
 8007bdc:	bf00      	nop
 8007bde:	e000      	b.n	8007be2 <USB_HC_StartXfer+0x25e>
        break;
 8007be0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	68d9      	ldr	r1, [r3, #12]
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	785a      	ldrb	r2, [r3, #1]
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	9000      	str	r0, [sp, #0]
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f7ff fb31 	bl	800725c <USB_WritePacket>
  }

  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3728      	adds	r7, #40	; 0x28
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	1ff80000 	.word	0x1ff80000

08007c08 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c1a:	695b      	ldr	r3, [r3, #20]
 8007c1c:	b29b      	uxth	r3, r3
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b089      	sub	sp, #36	; 0x24
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	460b      	mov	r3, r1
 8007c34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007c3a:	78fb      	ldrb	r3, [r7, #3]
 8007c3c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	015a      	lsls	r2, r3, #5
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	4413      	add	r3, r2
 8007c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	0c9b      	lsrs	r3, r3, #18
 8007c52:	f003 0303 	and.w	r3, r3, #3
 8007c56:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	015a      	lsls	r2, r3, #5
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	0fdb      	lsrs	r3, r3, #31
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f003 0320 	and.w	r3, r3, #32
 8007c76:	2b20      	cmp	r3, #32
 8007c78:	d104      	bne.n	8007c84 <USB_HC_Halt+0x5a>
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007c80:	2300      	movs	r3, #0
 8007c82:	e0c8      	b.n	8007e16 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <USB_HC_Halt+0x66>
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d163      	bne.n	8007d58 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	015a      	lsls	r2, r3, #5
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	4413      	add	r3, r2
 8007c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	69ba      	ldr	r2, [r7, #24]
 8007ca0:	0151      	lsls	r1, r2, #5
 8007ca2:	69fa      	ldr	r2, [r7, #28]
 8007ca4:	440a      	add	r2, r1
 8007ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007caa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cae:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f003 0320 	and.w	r3, r3, #32
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f040 80ab 	bne.w	8007e14 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d133      	bne.n	8007d32 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	015a      	lsls	r2, r3, #5
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	69ba      	ldr	r2, [r7, #24]
 8007cda:	0151      	lsls	r1, r2, #5
 8007cdc:	69fa      	ldr	r2, [r7, #28]
 8007cde:	440a      	add	r2, r1
 8007ce0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ce4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ce8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	015a      	lsls	r2, r3, #5
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	0151      	lsls	r1, r2, #5
 8007cfc:	69fa      	ldr	r2, [r7, #28]
 8007cfe:	440a      	add	r2, r1
 8007d00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d08:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d16:	d81d      	bhi.n	8007d54 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d2e:	d0ec      	beq.n	8007d0a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d30:	e070      	b.n	8007e14 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	69ba      	ldr	r2, [r7, #24]
 8007d42:	0151      	lsls	r1, r2, #5
 8007d44:	69fa      	ldr	r2, [r7, #28]
 8007d46:	440a      	add	r2, r1
 8007d48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d50:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d52:	e05f      	b.n	8007e14 <USB_HC_Halt+0x1ea>
            break;
 8007d54:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d56:	e05d      	b.n	8007e14 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	015a      	lsls	r2, r3, #5
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	4413      	add	r3, r2
 8007d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	69ba      	ldr	r2, [r7, #24]
 8007d68:	0151      	lsls	r1, r2, #5
 8007d6a:	69fa      	ldr	r2, [r7, #28]
 8007d6c:	440a      	add	r2, r1
 8007d6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d76:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d133      	bne.n	8007df0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	015a      	lsls	r2, r3, #5
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	4413      	add	r3, r2
 8007d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	69ba      	ldr	r2, [r7, #24]
 8007d98:	0151      	lsls	r1, r2, #5
 8007d9a:	69fa      	ldr	r2, [r7, #28]
 8007d9c:	440a      	add	r2, r1
 8007d9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007da2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007da6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	015a      	lsls	r2, r3, #5
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	4413      	add	r3, r2
 8007db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	69ba      	ldr	r2, [r7, #24]
 8007db8:	0151      	lsls	r1, r2, #5
 8007dba:	69fa      	ldr	r2, [r7, #28]
 8007dbc:	440a      	add	r2, r1
 8007dbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007dc6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dd4:	d81d      	bhi.n	8007e12 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007de8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dec:	d0ec      	beq.n	8007dc8 <USB_HC_Halt+0x19e>
 8007dee:	e011      	b.n	8007e14 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	015a      	lsls	r2, r3, #5
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	4413      	add	r3, r2
 8007df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	69ba      	ldr	r2, [r7, #24]
 8007e00:	0151      	lsls	r1, r2, #5
 8007e02:	69fa      	ldr	r2, [r7, #28]
 8007e04:	440a      	add	r2, r1
 8007e06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e0e:	6013      	str	r3, [r2, #0]
 8007e10:	e000      	b.n	8007e14 <USB_HC_Halt+0x1ea>
          break;
 8007e12:	bf00      	nop
    }
  }

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3724      	adds	r7, #36	; 0x24
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
	...

08007e24 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b087      	sub	sp, #28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007e34:	78fb      	ldrb	r3, [r7, #3]
 8007e36:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	04da      	lsls	r2, r3, #19
 8007e40:	4b15      	ldr	r3, [pc, #84]	; (8007e98 <USB_DoPing+0x74>)
 8007e42:	4013      	ands	r3, r2
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	0151      	lsls	r1, r2, #5
 8007e48:	697a      	ldr	r2, [r7, #20]
 8007e4a:	440a      	add	r2, r1
 8007e4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e54:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	015a      	lsls	r2, r3, #5
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e6c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e74:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	015a      	lsls	r2, r3, #5
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e82:	461a      	mov	r2, r3
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	371c      	adds	r7, #28
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	1ff80000 	.word	0x1ff80000

08007e9c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b088      	sub	sp, #32
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007eac:	2300      	movs	r3, #0
 8007eae:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f7ff f911 	bl	80070d8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007eb6:	2110      	movs	r1, #16
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f7ff f96b 	bl	8007194 <USB_FlushTxFifo>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d001      	beq.n	8007ec8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7ff f997 	bl	80071fc <USB_FlushRxFifo>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d001      	beq.n	8007ed8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007ed8:	2300      	movs	r3, #0
 8007eda:	61bb      	str	r3, [r7, #24]
 8007edc:	e01f      	b.n	8007f1e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	015a      	lsls	r2, r3, #5
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ef4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007efc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f04:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	015a      	lsls	r2, r3, #5
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f12:	461a      	mov	r2, r3
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	61bb      	str	r3, [r7, #24]
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	2b0f      	cmp	r3, #15
 8007f22:	d9dc      	bls.n	8007ede <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007f24:	2300      	movs	r3, #0
 8007f26:	61bb      	str	r3, [r7, #24]
 8007f28:	e034      	b.n	8007f94 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	015a      	lsls	r2, r3, #5
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f40:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f48:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f50:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f5e:	461a      	mov	r2, r3
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	3301      	adds	r3, #1
 8007f68:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f70:	d80c      	bhi.n	8007f8c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	015a      	lsls	r2, r3, #5
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	4413      	add	r3, r2
 8007f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f88:	d0ec      	beq.n	8007f64 <USB_StopHost+0xc8>
 8007f8a:	e000      	b.n	8007f8e <USB_StopHost+0xf2>
        break;
 8007f8c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	3301      	adds	r3, #1
 8007f92:	61bb      	str	r3, [r7, #24]
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	2b0f      	cmp	r3, #15
 8007f98:	d9c7      	bls.n	8007f2a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fa6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fae:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f7ff f880 	bl	80070b6 <USB_EnableGlobalInt>

  return ret;
 8007fb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3720      	adds	r7, #32
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007fc0:	b590      	push	{r4, r7, lr}
 8007fc2:	b089      	sub	sp, #36	; 0x24
 8007fc4:	af04      	add	r7, sp, #16
 8007fc6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007fc8:	2301      	movs	r3, #1
 8007fca:	2202      	movs	r2, #2
 8007fcc:	2102      	movs	r1, #2
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fc66 	bl	80088a0 <USBH_FindInterface>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
 8007fda:	2bff      	cmp	r3, #255	; 0xff
 8007fdc:	d002      	beq.n	8007fe4 <USBH_CDC_InterfaceInit+0x24>
 8007fde:	7bfb      	ldrb	r3, [r7, #15]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d901      	bls.n	8007fe8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	e13d      	b.n	8008264 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
 8007fea:	4619      	mov	r1, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fc3b 	bl	8008868 <USBH_SelectInterface>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	e131      	b.n	8008264 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008006:	2050      	movs	r0, #80	; 0x50
 8008008:	f002 fafa 	bl	800a600 <malloc>
 800800c:	4603      	mov	r3, r0
 800800e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008020:	2302      	movs	r3, #2
 8008022:	e11f      	b.n	8008264 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008024:	2250      	movs	r2, #80	; 0x50
 8008026:	2100      	movs	r1, #0
 8008028:	68b8      	ldr	r0, [r7, #8]
 800802a:	f002 faf9 	bl	800a620 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800802e:	7bfb      	ldrb	r3, [r7, #15]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	211a      	movs	r1, #26
 8008034:	fb01 f303 	mul.w	r3, r1, r3
 8008038:	4413      	add	r3, r2
 800803a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	b25b      	sxtb	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	da15      	bge.n	8008072 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008046:	7bfb      	ldrb	r3, [r7, #15]
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	211a      	movs	r1, #26
 800804c:	fb01 f303 	mul.w	r3, r1, r3
 8008050:	4413      	add	r3, r2
 8008052:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008056:	781a      	ldrb	r2, [r3, #0]
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800805c:	7bfb      	ldrb	r3, [r7, #15]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	211a      	movs	r1, #26
 8008062:	fb01 f303 	mul.w	r3, r1, r3
 8008066:	4413      	add	r3, r2
 8008068:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800806c:	881a      	ldrh	r2, [r3, #0]
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	785b      	ldrb	r3, [r3, #1]
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f001 ff2c 	bl	8009ed6 <USBH_AllocPipe>
 800807e:	4603      	mov	r3, r0
 8008080:	461a      	mov	r2, r3
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	7819      	ldrb	r1, [r3, #0]
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	7858      	ldrb	r0, [r3, #1]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	8952      	ldrh	r2, [r2, #10]
 800809e:	9202      	str	r2, [sp, #8]
 80080a0:	2203      	movs	r2, #3
 80080a2:	9201      	str	r2, [sp, #4]
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	4623      	mov	r3, r4
 80080a8:	4602      	mov	r2, r0
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f001 fee4 	bl	8009e78 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	2200      	movs	r2, #0
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f002 f9f3 	bl	800a4a4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80080be:	2300      	movs	r3, #0
 80080c0:	2200      	movs	r2, #0
 80080c2:	210a      	movs	r1, #10
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fbeb 	bl	80088a0 <USBH_FindInterface>
 80080ca:	4603      	mov	r3, r0
 80080cc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80080ce:	7bfb      	ldrb	r3, [r7, #15]
 80080d0:	2bff      	cmp	r3, #255	; 0xff
 80080d2:	d002      	beq.n	80080da <USBH_CDC_InterfaceInit+0x11a>
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d901      	bls.n	80080de <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80080da:	2302      	movs	r3, #2
 80080dc:	e0c2      	b.n	8008264 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80080de:	7bfb      	ldrb	r3, [r7, #15]
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	211a      	movs	r1, #26
 80080e4:	fb01 f303 	mul.w	r3, r1, r3
 80080e8:	4413      	add	r3, r2
 80080ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	b25b      	sxtb	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	da16      	bge.n	8008124 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80080f6:	7bfb      	ldrb	r3, [r7, #15]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	211a      	movs	r1, #26
 80080fc:	fb01 f303 	mul.w	r3, r1, r3
 8008100:	4413      	add	r3, r2
 8008102:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008106:	781a      	ldrb	r2, [r3, #0]
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	211a      	movs	r1, #26
 8008112:	fb01 f303 	mul.w	r3, r1, r3
 8008116:	4413      	add	r3, r2
 8008118:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800811c:	881a      	ldrh	r2, [r3, #0]
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	835a      	strh	r2, [r3, #26]
 8008122:	e015      	b.n	8008150 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008124:	7bfb      	ldrb	r3, [r7, #15]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	211a      	movs	r1, #26
 800812a:	fb01 f303 	mul.w	r3, r1, r3
 800812e:	4413      	add	r3, r2
 8008130:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008134:	781a      	ldrb	r2, [r3, #0]
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800813a:	7bfb      	ldrb	r3, [r7, #15]
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	211a      	movs	r1, #26
 8008140:	fb01 f303 	mul.w	r3, r1, r3
 8008144:	4413      	add	r3, r2
 8008146:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800814a:	881a      	ldrh	r2, [r3, #0]
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008150:	7bfb      	ldrb	r3, [r7, #15]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	211a      	movs	r1, #26
 8008156:	fb01 f303 	mul.w	r3, r1, r3
 800815a:	4413      	add	r3, r2
 800815c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	b25b      	sxtb	r3, r3
 8008164:	2b00      	cmp	r3, #0
 8008166:	da16      	bge.n	8008196 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008168:	7bfb      	ldrb	r3, [r7, #15]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	211a      	movs	r1, #26
 800816e:	fb01 f303 	mul.w	r3, r1, r3
 8008172:	4413      	add	r3, r2
 8008174:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008178:	781a      	ldrb	r2, [r3, #0]
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800817e:	7bfb      	ldrb	r3, [r7, #15]
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	211a      	movs	r1, #26
 8008184:	fb01 f303 	mul.w	r3, r1, r3
 8008188:	4413      	add	r3, r2
 800818a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800818e:	881a      	ldrh	r2, [r3, #0]
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	835a      	strh	r2, [r3, #26]
 8008194:	e015      	b.n	80081c2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008196:	7bfb      	ldrb	r3, [r7, #15]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	211a      	movs	r1, #26
 800819c:	fb01 f303 	mul.w	r3, r1, r3
 80081a0:	4413      	add	r3, r2
 80081a2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80081a6:	781a      	ldrb	r2, [r3, #0]
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80081ac:	7bfb      	ldrb	r3, [r7, #15]
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	211a      	movs	r1, #26
 80081b2:	fb01 f303 	mul.w	r3, r1, r3
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80081bc:	881a      	ldrh	r2, [r3, #0]
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	7b9b      	ldrb	r3, [r3, #14]
 80081c6:	4619      	mov	r1, r3
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f001 fe84 	bl	8009ed6 <USBH_AllocPipe>
 80081ce:	4603      	mov	r3, r0
 80081d0:	461a      	mov	r2, r3
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	7bdb      	ldrb	r3, [r3, #15]
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f001 fe7a 	bl	8009ed6 <USBH_AllocPipe>
 80081e2:	4603      	mov	r3, r0
 80081e4:	461a      	mov	r2, r3
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	7b59      	ldrb	r1, [r3, #13]
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	7b98      	ldrb	r0, [r3, #14]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	8b12      	ldrh	r2, [r2, #24]
 8008202:	9202      	str	r2, [sp, #8]
 8008204:	2202      	movs	r2, #2
 8008206:	9201      	str	r2, [sp, #4]
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	4623      	mov	r3, r4
 800820c:	4602      	mov	r2, r0
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f001 fe32 	bl	8009e78 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	7b19      	ldrb	r1, [r3, #12]
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	7bd8      	ldrb	r0, [r3, #15]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	8b52      	ldrh	r2, [r2, #26]
 800822c:	9202      	str	r2, [sp, #8]
 800822e:	2202      	movs	r2, #2
 8008230:	9201      	str	r2, [sp, #4]
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	4623      	mov	r3, r4
 8008236:	4602      	mov	r2, r0
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f001 fe1d 	bl	8009e78 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	7b5b      	ldrb	r3, [r3, #13]
 800824a:	2200      	movs	r2, #0
 800824c:	4619      	mov	r1, r3
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f002 f928 	bl	800a4a4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	7b1b      	ldrb	r3, [r3, #12]
 8008258:	2200      	movs	r2, #0
 800825a:	4619      	mov	r1, r3
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f002 f921 	bl	800a4a4 <USBH_LL_SetToggle>

  return USBH_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3714      	adds	r7, #20
 8008268:	46bd      	mov	sp, r7
 800826a:	bd90      	pop	{r4, r7, pc}

0800826c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800827a:	69db      	ldr	r3, [r3, #28]
 800827c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00e      	beq.n	80082a4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f001 fe12 	bl	8009eb6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	4619      	mov	r1, r3
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f001 fe3d 	bl	8009f18 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	7b1b      	ldrb	r3, [r3, #12]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00e      	beq.n	80082ca <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	7b1b      	ldrb	r3, [r3, #12]
 80082b0:	4619      	mov	r1, r3
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f001 fdff 	bl	8009eb6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	7b1b      	ldrb	r3, [r3, #12]
 80082bc:	4619      	mov	r1, r3
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f001 fe2a 	bl	8009f18 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	7b5b      	ldrb	r3, [r3, #13]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00e      	beq.n	80082f0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	7b5b      	ldrb	r3, [r3, #13]
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f001 fdec 	bl	8009eb6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	7b5b      	ldrb	r3, [r3, #13]
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f001 fe17 	bl	8009f18 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082f6:	69db      	ldr	r3, [r3, #28]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00b      	beq.n	8008314 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008302:	69db      	ldr	r3, [r3, #28]
 8008304:	4618      	mov	r0, r3
 8008306:	f002 f983 	bl	800a610 <free>
    phost->pActiveClass->pData = 0U;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008310:	2200      	movs	r2, #0
 8008312:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b084      	sub	sp, #16
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800832c:	69db      	ldr	r3, [r3, #28]
 800832e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	3340      	adds	r3, #64	; 0x40
 8008334:	4619      	mov	r1, r3
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f8b1 	bl	800849e <GetLineCoding>
 800833c:	4603      	mov	r3, r0
 800833e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008340:	7afb      	ldrb	r3, [r7, #11]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d105      	bne.n	8008352 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800834c:	2102      	movs	r1, #2
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008352:	7afb      	ldrb	r3, [r7, #11]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008364:	2301      	movs	r3, #1
 8008366:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800837c:	2b04      	cmp	r3, #4
 800837e:	d877      	bhi.n	8008470 <USBH_CDC_Process+0x114>
 8008380:	a201      	add	r2, pc, #4	; (adr r2, 8008388 <USBH_CDC_Process+0x2c>)
 8008382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008386:	bf00      	nop
 8008388:	0800839d 	.word	0x0800839d
 800838c:	080083a3 	.word	0x080083a3
 8008390:	080083d3 	.word	0x080083d3
 8008394:	08008447 	.word	0x08008447
 8008398:	08008455 	.word	0x08008455
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800839c:	2300      	movs	r3, #0
 800839e:	73fb      	strb	r3, [r7, #15]
      break;
 80083a0:	e06d      	b.n	800847e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f897 	bl	80084dc <SetLineCoding>
 80083ae:	4603      	mov	r3, r0
 80083b0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80083b2:	7bbb      	ldrb	r3, [r7, #14]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d104      	bne.n	80083c2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	2202      	movs	r2, #2
 80083bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80083c0:	e058      	b.n	8008474 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d055      	beq.n	8008474 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	2204      	movs	r2, #4
 80083cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80083d0:	e050      	b.n	8008474 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	3340      	adds	r3, #64	; 0x40
 80083d6:	4619      	mov	r1, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 f860 	bl	800849e <GetLineCoding>
 80083de:	4603      	mov	r3, r0
 80083e0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80083e2:	7bbb      	ldrb	r3, [r7, #14]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d126      	bne.n	8008436 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083fa:	791b      	ldrb	r3, [r3, #4]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d13b      	bne.n	8008478 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800840a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800840c:	429a      	cmp	r2, r3
 800840e:	d133      	bne.n	8008478 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800841a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800841c:	429a      	cmp	r2, r3
 800841e:	d12b      	bne.n	8008478 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008428:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800842a:	429a      	cmp	r2, r3
 800842c:	d124      	bne.n	8008478 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 f958 	bl	80086e4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008434:	e020      	b.n	8008478 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008436:	7bbb      	ldrb	r3, [r7, #14]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d01d      	beq.n	8008478 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2204      	movs	r2, #4
 8008440:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008444:	e018      	b.n	8008478 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f867 	bl	800851a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f8da 	bl	8008606 <CDC_ProcessReception>
      break;
 8008452:	e014      	b.n	800847e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008454:	2100      	movs	r1, #0
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 ffef 	bl	800943a <USBH_ClrFeature>
 800845c:	4603      	mov	r3, r0
 800845e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008460:	7bbb      	ldrb	r3, [r7, #14]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10a      	bne.n	800847c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800846e:	e005      	b.n	800847c <USBH_CDC_Process+0x120>

    default:
      break;
 8008470:	bf00      	nop
 8008472:	e004      	b.n	800847e <USBH_CDC_Process+0x122>
      break;
 8008474:	bf00      	nop
 8008476:	e002      	b.n	800847e <USBH_CDC_Process+0x122>
      break;
 8008478:	bf00      	nop
 800847a:	e000      	b.n	800847e <USBH_CDC_Process+0x122>
      break;
 800847c:	bf00      	nop

  }

  return status;
 800847e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr

0800849e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b082      	sub	sp, #8
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
 80084a6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	22a1      	movs	r2, #161	; 0xa1
 80084ac:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2221      	movs	r2, #33	; 0x21
 80084b2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2207      	movs	r2, #7
 80084c4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	2207      	movs	r2, #7
 80084ca:	4619      	mov	r1, r3
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f001 fa81 	bl	80099d4 <USBH_CtlReq>
 80084d2:	4603      	mov	r3, r0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2221      	movs	r2, #33	; 0x21
 80084ea:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2220      	movs	r2, #32
 80084f0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2207      	movs	r2, #7
 8008502:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	2207      	movs	r2, #7
 8008508:	4619      	mov	r1, r3
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f001 fa62 	bl	80099d4 <USBH_CtlReq>
 8008510:	4603      	mov	r3, r0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b086      	sub	sp, #24
 800851e:	af02      	add	r7, sp, #8
 8008520:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008528:	69db      	ldr	r3, [r3, #28]
 800852a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800852c:	2300      	movs	r3, #0
 800852e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008536:	2b01      	cmp	r3, #1
 8008538:	d002      	beq.n	8008540 <CDC_ProcessTransmission+0x26>
 800853a:	2b02      	cmp	r3, #2
 800853c:	d023      	beq.n	8008586 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800853e:	e05e      	b.n	80085fe <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	8b12      	ldrh	r2, [r2, #24]
 8008548:	4293      	cmp	r3, r2
 800854a:	d90b      	bls.n	8008564 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	69d9      	ldr	r1, [r3, #28]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	8b1a      	ldrh	r2, [r3, #24]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	7b5b      	ldrb	r3, [r3, #13]
 8008558:	2001      	movs	r0, #1
 800855a:	9000      	str	r0, [sp, #0]
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f001 fc48 	bl	8009df2 <USBH_BulkSendData>
 8008562:	e00b      	b.n	800857c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800856c:	b29a      	uxth	r2, r3
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	7b5b      	ldrb	r3, [r3, #13]
 8008572:	2001      	movs	r0, #1
 8008574:	9000      	str	r0, [sp, #0]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f001 fc3b 	bl	8009df2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2202      	movs	r2, #2
 8008580:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008584:	e03b      	b.n	80085fe <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	7b5b      	ldrb	r3, [r3, #13]
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f001 ff5f 	bl	800a450 <USBH_LL_GetURBState>
 8008592:	4603      	mov	r3, r0
 8008594:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008596:	7afb      	ldrb	r3, [r7, #11]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d128      	bne.n	80085ee <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	8b12      	ldrh	r2, [r2, #24]
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d90e      	bls.n	80085c6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	8b12      	ldrh	r2, [r2, #24]
 80085b0:	1a9a      	subs	r2, r3, r2
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	69db      	ldr	r3, [r3, #28]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	8b12      	ldrh	r2, [r2, #24]
 80085be:	441a      	add	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	61da      	str	r2, [r3, #28]
 80085c4:	e002      	b.n	80085cc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d004      	beq.n	80085de <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80085dc:	e00e      	b.n	80085fc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 f868 	bl	80086bc <USBH_CDC_TransmitCallback>
      break;
 80085ec:	e006      	b.n	80085fc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80085ee:	7afb      	ldrb	r3, [r7, #11]
 80085f0:	2b02      	cmp	r3, #2
 80085f2:	d103      	bne.n	80085fc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80085fc:	bf00      	nop
  }
}
 80085fe:	bf00      	nop
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b086      	sub	sp, #24
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008618:	2300      	movs	r3, #0
 800861a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008622:	2b03      	cmp	r3, #3
 8008624:	d002      	beq.n	800862c <CDC_ProcessReception+0x26>
 8008626:	2b04      	cmp	r3, #4
 8008628:	d00e      	beq.n	8008648 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800862a:	e043      	b.n	80086b4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	6a19      	ldr	r1, [r3, #32]
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	8b5a      	ldrh	r2, [r3, #26]
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	7b1b      	ldrb	r3, [r3, #12]
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f001 fbff 	bl	8009e3c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	2204      	movs	r2, #4
 8008642:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008646:	e035      	b.n	80086b4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	7b1b      	ldrb	r3, [r3, #12]
 800864c:	4619      	mov	r1, r3
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f001 fefe 	bl	800a450 <USBH_LL_GetURBState>
 8008654:	4603      	mov	r3, r0
 8008656:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008658:	7cfb      	ldrb	r3, [r7, #19]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d129      	bne.n	80086b2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	7b1b      	ldrb	r3, [r3, #12]
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f001 fe61 	bl	800a32c <USBH_LL_GetLastXferSize>
 800866a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	429a      	cmp	r2, r3
 8008674:	d016      	beq.n	80086a4 <CDC_ProcessReception+0x9e>
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	8b5b      	ldrh	r3, [r3, #26]
 800867a:	461a      	mov	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	4293      	cmp	r3, r2
 8008680:	d910      	bls.n	80086a4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	1ad2      	subs	r2, r2, r3
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	6a1a      	ldr	r2, [r3, #32]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	441a      	add	r2, r3
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	2203      	movs	r2, #3
 800869e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80086a2:	e006      	b.n	80086b2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f80f 	bl	80086d0 <USBH_CDC_ReceiveCallback>
      break;
 80086b2:	bf00      	nop
  }
}
 80086b4:	bf00      	nop
 80086b6:	3718      	adds	r7, #24
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80086c4:	bf00      	nop
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	4613      	mov	r3, r2
 8008704:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d101      	bne.n	8008710 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800870c:	2302      	movs	r3, #2
 800870e:	e029      	b.n	8008764 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	79fa      	ldrb	r2, [r7, #7]
 8008714:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2200      	movs	r2, #0
 800871c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f000 f81f 	bl	800876c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d003      	beq.n	800875c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f001 fd31 	bl	800a1c4 <USBH_LL_Init>

  return USBH_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800876c:	b480      	push	{r7}
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008774:	2300      	movs	r3, #0
 8008776:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008778:	2300      	movs	r3, #0
 800877a:	60fb      	str	r3, [r7, #12]
 800877c:	e009      	b.n	8008792 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	33e0      	adds	r3, #224	; 0xe0
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	2200      	movs	r2, #0
 800878a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	3301      	adds	r3, #1
 8008790:	60fb      	str	r3, [r7, #12]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2b0f      	cmp	r3, #15
 8008796:	d9f2      	bls.n	800877e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008798:	2300      	movs	r3, #0
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	e009      	b.n	80087b2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	4413      	add	r3, r2
 80087a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80087a8:	2200      	movs	r2, #0
 80087aa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	3301      	adds	r3, #1
 80087b0:	60fb      	str	r3, [r7, #12]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087b8:	d3f1      	bcc.n	800879e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2240      	movs	r2, #64	; 0x40
 80087de:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2201      	movs	r2, #1
 80087f2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3714      	adds	r7, #20
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d016      	beq.n	8008856 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800882e:	2b00      	cmp	r3, #0
 8008830:	d10e      	bne.n	8008850 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008838:	1c59      	adds	r1, r3, #1
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	33de      	adds	r3, #222	; 0xde
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	73fb      	strb	r3, [r7, #15]
 800884e:	e004      	b.n	800885a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008850:	2302      	movs	r3, #2
 8008852:	73fb      	strb	r3, [r7, #15]
 8008854:	e001      	b.n	800885a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008856:	2302      	movs	r3, #2
 8008858:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800885a:	7bfb      	ldrb	r3, [r7, #15]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3714      	adds	r7, #20
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	460b      	mov	r3, r1
 8008872:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800887e:	78fa      	ldrb	r2, [r7, #3]
 8008880:	429a      	cmp	r2, r3
 8008882:	d204      	bcs.n	800888e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	78fa      	ldrb	r2, [r7, #3]
 8008888:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800888c:	e001      	b.n	8008892 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800888e:	2302      	movs	r3, #2
 8008890:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008892:	7bfb      	ldrb	r3, [r7, #15]
}
 8008894:	4618      	mov	r0, r3
 8008896:	3714      	adds	r7, #20
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b087      	sub	sp, #28
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	4608      	mov	r0, r1
 80088aa:	4611      	mov	r1, r2
 80088ac:	461a      	mov	r2, r3
 80088ae:	4603      	mov	r3, r0
 80088b0:	70fb      	strb	r3, [r7, #3]
 80088b2:	460b      	mov	r3, r1
 80088b4:	70bb      	strb	r3, [r7, #2]
 80088b6:	4613      	mov	r3, r2
 80088b8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80088ba:	2300      	movs	r3, #0
 80088bc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80088be:	2300      	movs	r3, #0
 80088c0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80088c8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80088ca:	e025      	b.n	8008918 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80088cc:	7dfb      	ldrb	r3, [r7, #23]
 80088ce:	221a      	movs	r2, #26
 80088d0:	fb02 f303 	mul.w	r3, r2, r3
 80088d4:	3308      	adds	r3, #8
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	4413      	add	r3, r2
 80088da:	3302      	adds	r3, #2
 80088dc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	795b      	ldrb	r3, [r3, #5]
 80088e2:	78fa      	ldrb	r2, [r7, #3]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d002      	beq.n	80088ee <USBH_FindInterface+0x4e>
 80088e8:	78fb      	ldrb	r3, [r7, #3]
 80088ea:	2bff      	cmp	r3, #255	; 0xff
 80088ec:	d111      	bne.n	8008912 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80088f2:	78ba      	ldrb	r2, [r7, #2]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d002      	beq.n	80088fe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80088f8:	78bb      	ldrb	r3, [r7, #2]
 80088fa:	2bff      	cmp	r3, #255	; 0xff
 80088fc:	d109      	bne.n	8008912 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008902:	787a      	ldrb	r2, [r7, #1]
 8008904:	429a      	cmp	r2, r3
 8008906:	d002      	beq.n	800890e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008908:	787b      	ldrb	r3, [r7, #1]
 800890a:	2bff      	cmp	r3, #255	; 0xff
 800890c:	d101      	bne.n	8008912 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800890e:	7dfb      	ldrb	r3, [r7, #23]
 8008910:	e006      	b.n	8008920 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008912:	7dfb      	ldrb	r3, [r7, #23]
 8008914:	3301      	adds	r3, #1
 8008916:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008918:	7dfb      	ldrb	r3, [r7, #23]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d9d6      	bls.n	80088cc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800891e:	23ff      	movs	r3, #255	; 0xff
}
 8008920:	4618      	mov	r0, r3
 8008922:	371c      	adds	r7, #28
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f001 fc81 	bl	800a23c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800893a:	2101      	movs	r1, #1
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f001 fd9a 	bl	800a476 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3708      	adds	r7, #8
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b088      	sub	sp, #32
 8008950:	af04      	add	r7, sp, #16
 8008952:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008954:	2302      	movs	r3, #2
 8008956:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008958:	2300      	movs	r3, #0
 800895a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b01      	cmp	r3, #1
 8008966:	d102      	bne.n	800896e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2203      	movs	r2, #3
 800896c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	b2db      	uxtb	r3, r3
 8008974:	2b0b      	cmp	r3, #11
 8008976:	f200 81be 	bhi.w	8008cf6 <USBH_Process+0x3aa>
 800897a:	a201      	add	r2, pc, #4	; (adr r2, 8008980 <USBH_Process+0x34>)
 800897c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008980:	080089b1 	.word	0x080089b1
 8008984:	080089e3 	.word	0x080089e3
 8008988:	08008a4b 	.word	0x08008a4b
 800898c:	08008c91 	.word	0x08008c91
 8008990:	08008cf7 	.word	0x08008cf7
 8008994:	08008aef 	.word	0x08008aef
 8008998:	08008c37 	.word	0x08008c37
 800899c:	08008b25 	.word	0x08008b25
 80089a0:	08008b45 	.word	0x08008b45
 80089a4:	08008b65 	.word	0x08008b65
 80089a8:	08008ba9 	.word	0x08008ba9
 80089ac:	08008c79 	.word	0x08008c79
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 819e 	beq.w	8008cfa <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80089c4:	20c8      	movs	r0, #200	; 0xc8
 80089c6:	f001 fd9d 	bl	800a504 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f001 fc93 	bl	800a2f6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80089e0:	e18b      	b.n	8008cfa <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d107      	bne.n	80089fc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2202      	movs	r2, #2
 80089f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80089fa:	e18d      	b.n	8008d18 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008a02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a06:	d914      	bls.n	8008a32 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008a0e:	3301      	adds	r3, #1
 8008a10:	b2da      	uxtb	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	d903      	bls.n	8008a2a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	220d      	movs	r2, #13
 8008a26:	701a      	strb	r2, [r3, #0]
      break;
 8008a28:	e176      	b.n	8008d18 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	701a      	strb	r2, [r3, #0]
      break;
 8008a30:	e172      	b.n	8008d18 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008a38:	f103 020a 	add.w	r2, r3, #10
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008a42:	200a      	movs	r0, #10
 8008a44:	f001 fd5e 	bl	800a504 <USBH_Delay>
      break;
 8008a48:	e166      	b.n	8008d18 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d005      	beq.n	8008a60 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a5a:	2104      	movs	r1, #4
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008a60:	2064      	movs	r0, #100	; 0x64
 8008a62:	f001 fd4f 	bl	800a504 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f001 fc1e 	bl	800a2a8 <USBH_LL_GetSpeed>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	461a      	mov	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2205      	movs	r2, #5
 8008a7a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f001 fa29 	bl	8009ed6 <USBH_AllocPipe>
 8008a84:	4603      	mov	r3, r0
 8008a86:	461a      	mov	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008a8c:	2180      	movs	r1, #128	; 0x80
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f001 fa21 	bl	8009ed6 <USBH_AllocPipe>
 8008a94:	4603      	mov	r3, r0
 8008a96:	461a      	mov	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	7919      	ldrb	r1, [r3, #4]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008ab0:	b292      	uxth	r2, r2
 8008ab2:	9202      	str	r2, [sp, #8]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	9201      	str	r2, [sp, #4]
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	4603      	mov	r3, r0
 8008abc:	2280      	movs	r2, #128	; 0x80
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f001 f9da 	bl	8009e78 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	7959      	ldrb	r1, [r3, #5]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008ad8:	b292      	uxth	r2, r2
 8008ada:	9202      	str	r2, [sp, #8]
 8008adc:	2200      	movs	r2, #0
 8008ade:	9201      	str	r2, [sp, #4]
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f001 f9c6 	bl	8009e78 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008aec:	e114      	b.n	8008d18 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f918 	bl	8008d24 <USBH_HandleEnum>
 8008af4:	4603      	mov	r3, r0
 8008af6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008af8:	7bbb      	ldrb	r3, [r7, #14]
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f040 80fe 	bne.w	8008cfe <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d103      	bne.n	8008b1c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2208      	movs	r2, #8
 8008b18:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008b1a:	e0f0      	b.n	8008cfe <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2207      	movs	r2, #7
 8008b20:	701a      	strb	r2, [r3, #0]
      break;
 8008b22:	e0ec      	b.n	8008cfe <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f000 80e9 	beq.w	8008d02 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b36:	2101      	movs	r1, #1
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2208      	movs	r2, #8
 8008b40:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008b42:	e0de      	b.n	8008d02 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fc2c 	bl	80093ac <USBH_SetCfg>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f040 80d5 	bne.w	8008d06 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2209      	movs	r2, #9
 8008b60:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b62:	e0d0      	b.n	8008d06 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008b6a:	f003 0320 	and.w	r3, r3, #32
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d016      	beq.n	8008ba0 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008b72:	2101      	movs	r1, #1
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fc3c 	bl	80093f2 <USBH_SetFeature>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008b7e:	7bbb      	ldrb	r3, [r7, #14]
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d103      	bne.n	8008b8e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	220a      	movs	r2, #10
 8008b8a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b8c:	e0bd      	b.n	8008d0a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8008b8e:	7bbb      	ldrb	r3, [r7, #14]
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	f040 80b9 	bne.w	8008d0a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	220a      	movs	r2, #10
 8008b9c:	701a      	strb	r2, [r3, #0]
      break;
 8008b9e:	e0b4      	b.n	8008d0a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	220a      	movs	r2, #10
 8008ba4:	701a      	strb	r2, [r3, #0]
      break;
 8008ba6:	e0b0      	b.n	8008d0a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f000 80ad 	beq.w	8008d0e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	73fb      	strb	r3, [r7, #15]
 8008bc0:	e016      	b.n	8008bf0 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008bc2:	7bfa      	ldrb	r2, [r7, #15]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	32de      	adds	r2, #222	; 0xde
 8008bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bcc:	791a      	ldrb	r2, [r3, #4]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d108      	bne.n	8008bea <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008bd8:	7bfa      	ldrb	r2, [r7, #15]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	32de      	adds	r2, #222	; 0xde
 8008bde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008be8:	e005      	b.n	8008bf6 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
 8008bec:	3301      	adds	r3, #1
 8008bee:	73fb      	strb	r3, [r7, #15]
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d0e5      	beq.n	8008bc2 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d016      	beq.n	8008c2e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	4798      	blx	r3
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d109      	bne.n	8008c26 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2206      	movs	r2, #6
 8008c16:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c1e:	2103      	movs	r1, #3
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c24:	e073      	b.n	8008d0e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	220d      	movs	r2, #13
 8008c2a:	701a      	strb	r2, [r3, #0]
      break;
 8008c2c:	e06f      	b.n	8008d0e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	220d      	movs	r2, #13
 8008c32:	701a      	strb	r2, [r3, #0]
      break;
 8008c34:	e06b      	b.n	8008d0e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d017      	beq.n	8008c70 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	4798      	blx	r3
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d103      	bne.n	8008c60 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	220b      	movs	r2, #11
 8008c5c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c5e:	e058      	b.n	8008d12 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008c60:	7bbb      	ldrb	r3, [r7, #14]
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d154      	bne.n	8008d12 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	220d      	movs	r2, #13
 8008c6c:	701a      	strb	r2, [r3, #0]
      break;
 8008c6e:	e050      	b.n	8008d12 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	220d      	movs	r2, #13
 8008c74:	701a      	strb	r2, [r3, #0]
      break;
 8008c76:	e04c      	b.n	8008d12 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d049      	beq.n	8008d16 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c88:	695b      	ldr	r3, [r3, #20]
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	4798      	blx	r3
      }
      break;
 8008c8e:	e042      	b.n	8008d16 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7ff fd67 	bl	800876c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d009      	beq.n	8008cbc <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d005      	beq.n	8008cd2 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ccc:	2105      	movs	r1, #5
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d107      	bne.n	8008cee <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7ff fe20 	bl	800892c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008cec:	e014      	b.n	8008d18 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f001 faa4 	bl	800a23c <USBH_LL_Start>
      break;
 8008cf4:	e010      	b.n	8008d18 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008cf6:	bf00      	nop
 8008cf8:	e00e      	b.n	8008d18 <USBH_Process+0x3cc>
      break;
 8008cfa:	bf00      	nop
 8008cfc:	e00c      	b.n	8008d18 <USBH_Process+0x3cc>
      break;
 8008cfe:	bf00      	nop
 8008d00:	e00a      	b.n	8008d18 <USBH_Process+0x3cc>
    break;
 8008d02:	bf00      	nop
 8008d04:	e008      	b.n	8008d18 <USBH_Process+0x3cc>
      break;
 8008d06:	bf00      	nop
 8008d08:	e006      	b.n	8008d18 <USBH_Process+0x3cc>
      break;
 8008d0a:	bf00      	nop
 8008d0c:	e004      	b.n	8008d18 <USBH_Process+0x3cc>
      break;
 8008d0e:	bf00      	nop
 8008d10:	e002      	b.n	8008d18 <USBH_Process+0x3cc>
      break;
 8008d12:	bf00      	nop
 8008d14:	e000      	b.n	8008d18 <USBH_Process+0x3cc>
      break;
 8008d16:	bf00      	nop
  }
  return USBH_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop

08008d24 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b088      	sub	sp, #32
 8008d28:	af04      	add	r7, sp, #16
 8008d2a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008d30:	2301      	movs	r3, #1
 8008d32:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	785b      	ldrb	r3, [r3, #1]
 8008d38:	2b07      	cmp	r3, #7
 8008d3a:	f200 81c1 	bhi.w	80090c0 <USBH_HandleEnum+0x39c>
 8008d3e:	a201      	add	r2, pc, #4	; (adr r2, 8008d44 <USBH_HandleEnum+0x20>)
 8008d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d44:	08008d65 	.word	0x08008d65
 8008d48:	08008e23 	.word	0x08008e23
 8008d4c:	08008e8d 	.word	0x08008e8d
 8008d50:	08008f1b 	.word	0x08008f1b
 8008d54:	08008f85 	.word	0x08008f85
 8008d58:	08008ff5 	.word	0x08008ff5
 8008d5c:	0800903b 	.word	0x0800903b
 8008d60:	08009081 	.word	0x08009081
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008d64:	2108      	movs	r1, #8
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fa50 	bl	800920c <USBH_Get_DevDesc>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008d70:	7bbb      	ldrb	r3, [r7, #14]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d130      	bne.n	8008dd8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	7919      	ldrb	r1, [r3, #4]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008d9a:	b292      	uxth	r2, r2
 8008d9c:	9202      	str	r2, [sp, #8]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	9201      	str	r2, [sp, #4]
 8008da2:	9300      	str	r3, [sp, #0]
 8008da4:	4603      	mov	r3, r0
 8008da6:	2280      	movs	r2, #128	; 0x80
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f001 f865 	bl	8009e78 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	7959      	ldrb	r1, [r3, #5]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008dc2:	b292      	uxth	r2, r2
 8008dc4:	9202      	str	r2, [sp, #8]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	9201      	str	r2, [sp, #4]
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2200      	movs	r2, #0
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f001 f851 	bl	8009e78 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008dd6:	e175      	b.n	80090c4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008dd8:	7bbb      	ldrb	r3, [r7, #14]
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	f040 8172 	bne.w	80090c4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008de6:	3301      	adds	r3, #1
 8008de8:	b2da      	uxtb	r2, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008df6:	2b03      	cmp	r3, #3
 8008df8:	d903      	bls.n	8008e02 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	220d      	movs	r2, #13
 8008dfe:	701a      	strb	r2, [r3, #0]
      break;
 8008e00:	e160      	b.n	80090c4 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	795b      	ldrb	r3, [r3, #5]
 8008e06:	4619      	mov	r1, r3
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f001 f885 	bl	8009f18 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	791b      	ldrb	r3, [r3, #4]
 8008e12:	4619      	mov	r1, r3
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f001 f87f 	bl	8009f18 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	701a      	strb	r2, [r3, #0]
      break;
 8008e20:	e150      	b.n	80090c4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008e22:	2112      	movs	r1, #18
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 f9f1 	bl	800920c <USBH_Get_DevDesc>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e2e:	7bbb      	ldrb	r3, [r7, #14]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d103      	bne.n	8008e3c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2202      	movs	r2, #2
 8008e38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008e3a:	e145      	b.n	80090c8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e3c:	7bbb      	ldrb	r3, [r7, #14]
 8008e3e:	2b03      	cmp	r3, #3
 8008e40:	f040 8142 	bne.w	80090c8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	b2da      	uxtb	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008e5a:	2b03      	cmp	r3, #3
 8008e5c:	d903      	bls.n	8008e66 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	220d      	movs	r2, #13
 8008e62:	701a      	strb	r2, [r3, #0]
      break;
 8008e64:	e130      	b.n	80090c8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	795b      	ldrb	r3, [r3, #5]
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f001 f853 	bl	8009f18 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	791b      	ldrb	r3, [r3, #4]
 8008e76:	4619      	mov	r1, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f001 f84d 	bl	8009f18 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	701a      	strb	r2, [r3, #0]
      break;
 8008e8a:	e11d      	b.n	80090c8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008e8c:	2101      	movs	r1, #1
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 fa68 	bl	8009364 <USBH_SetAddress>
 8008e94:	4603      	mov	r3, r0
 8008e96:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e98:	7bbb      	ldrb	r3, [r7, #14]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d132      	bne.n	8008f04 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008e9e:	2002      	movs	r0, #2
 8008ea0:	f001 fb30 	bl	800a504 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2203      	movs	r2, #3
 8008eb0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	7919      	ldrb	r1, [r3, #4]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008ec6:	b292      	uxth	r2, r2
 8008ec8:	9202      	str	r2, [sp, #8]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	9201      	str	r2, [sp, #4]
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2280      	movs	r2, #128	; 0x80
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 ffcf 	bl	8009e78 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	7959      	ldrb	r1, [r3, #5]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008eee:	b292      	uxth	r2, r2
 8008ef0:	9202      	str	r2, [sp, #8]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	9201      	str	r2, [sp, #4]
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2200      	movs	r2, #0
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 ffbb 	bl	8009e78 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008f02:	e0e3      	b.n	80090cc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f04:	7bbb      	ldrb	r3, [r7, #14]
 8008f06:	2b03      	cmp	r3, #3
 8008f08:	f040 80e0 	bne.w	80090cc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	220d      	movs	r2, #13
 8008f10:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	705a      	strb	r2, [r3, #1]
      break;
 8008f18:	e0d8      	b.n	80090cc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008f1a:	2109      	movs	r1, #9
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 f99d 	bl	800925c <USBH_Get_CfgDesc>
 8008f22:	4603      	mov	r3, r0
 8008f24:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f26:	7bbb      	ldrb	r3, [r7, #14]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d103      	bne.n	8008f34 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2204      	movs	r2, #4
 8008f30:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008f32:	e0cd      	b.n	80090d0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f34:	7bbb      	ldrb	r3, [r7, #14]
 8008f36:	2b03      	cmp	r3, #3
 8008f38:	f040 80ca 	bne.w	80090d0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f42:	3301      	adds	r3, #1
 8008f44:	b2da      	uxtb	r2, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d903      	bls.n	8008f5e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	220d      	movs	r2, #13
 8008f5a:	701a      	strb	r2, [r3, #0]
      break;
 8008f5c:	e0b8      	b.n	80090d0 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	795b      	ldrb	r3, [r3, #5]
 8008f62:	4619      	mov	r1, r3
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 ffd7 	bl	8009f18 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	791b      	ldrb	r3, [r3, #4]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 ffd1 	bl	8009f18 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	701a      	strb	r2, [r3, #0]
      break;
 8008f82:	e0a5      	b.n	80090d0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 f965 	bl	800925c <USBH_Get_CfgDesc>
 8008f92:	4603      	mov	r3, r0
 8008f94:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f96:	7bbb      	ldrb	r3, [r7, #14]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d103      	bne.n	8008fa4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2205      	movs	r2, #5
 8008fa0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008fa2:	e097      	b.n	80090d4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fa4:	7bbb      	ldrb	r3, [r7, #14]
 8008fa6:	2b03      	cmp	r3, #3
 8008fa8:	f040 8094 	bne.w	80090d4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	b2da      	uxtb	r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008fc2:	2b03      	cmp	r3, #3
 8008fc4:	d903      	bls.n	8008fce <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	220d      	movs	r2, #13
 8008fca:	701a      	strb	r2, [r3, #0]
      break;
 8008fcc:	e082      	b.n	80090d4 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	795b      	ldrb	r3, [r3, #5]
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 ff9f 	bl	8009f18 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	791b      	ldrb	r3, [r3, #4]
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 ff99 	bl	8009f18 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	701a      	strb	r2, [r3, #0]
      break;
 8008ff2:	e06f      	b.n	80090d4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d019      	beq.n	8009032 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800900a:	23ff      	movs	r3, #255	; 0xff
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 f949 	bl	80092a4 <USBH_Get_StringDesc>
 8009012:	4603      	mov	r3, r0
 8009014:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009016:	7bbb      	ldrb	r3, [r7, #14]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d103      	bne.n	8009024 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2206      	movs	r2, #6
 8009020:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009022:	e059      	b.n	80090d8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009024:	7bbb      	ldrb	r3, [r7, #14]
 8009026:	2b03      	cmp	r3, #3
 8009028:	d156      	bne.n	80090d8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2206      	movs	r2, #6
 800902e:	705a      	strb	r2, [r3, #1]
      break;
 8009030:	e052      	b.n	80090d8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2206      	movs	r2, #6
 8009036:	705a      	strb	r2, [r3, #1]
      break;
 8009038:	e04e      	b.n	80090d8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009040:	2b00      	cmp	r3, #0
 8009042:	d019      	beq.n	8009078 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009050:	23ff      	movs	r3, #255	; 0xff
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f926 	bl	80092a4 <USBH_Get_StringDesc>
 8009058:	4603      	mov	r3, r0
 800905a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800905c:	7bbb      	ldrb	r3, [r7, #14]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d103      	bne.n	800906a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2207      	movs	r2, #7
 8009066:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009068:	e038      	b.n	80090dc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800906a:	7bbb      	ldrb	r3, [r7, #14]
 800906c:	2b03      	cmp	r3, #3
 800906e:	d135      	bne.n	80090dc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2207      	movs	r2, #7
 8009074:	705a      	strb	r2, [r3, #1]
      break;
 8009076:	e031      	b.n	80090dc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2207      	movs	r2, #7
 800907c:	705a      	strb	r2, [r3, #1]
      break;
 800907e:	e02d      	b.n	80090dc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009086:	2b00      	cmp	r3, #0
 8009088:	d017      	beq.n	80090ba <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009096:	23ff      	movs	r3, #255	; 0xff
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 f903 	bl	80092a4 <USBH_Get_StringDesc>
 800909e:	4603      	mov	r3, r0
 80090a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80090a2:	7bbb      	ldrb	r3, [r7, #14]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d102      	bne.n	80090ae <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80090a8:	2300      	movs	r3, #0
 80090aa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80090ac:	e018      	b.n	80090e0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090ae:	7bbb      	ldrb	r3, [r7, #14]
 80090b0:	2b03      	cmp	r3, #3
 80090b2:	d115      	bne.n	80090e0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	73fb      	strb	r3, [r7, #15]
      break;
 80090b8:	e012      	b.n	80090e0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80090ba:	2300      	movs	r3, #0
 80090bc:	73fb      	strb	r3, [r7, #15]
      break;
 80090be:	e00f      	b.n	80090e0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80090c0:	bf00      	nop
 80090c2:	e00e      	b.n	80090e2 <USBH_HandleEnum+0x3be>
      break;
 80090c4:	bf00      	nop
 80090c6:	e00c      	b.n	80090e2 <USBH_HandleEnum+0x3be>
      break;
 80090c8:	bf00      	nop
 80090ca:	e00a      	b.n	80090e2 <USBH_HandleEnum+0x3be>
      break;
 80090cc:	bf00      	nop
 80090ce:	e008      	b.n	80090e2 <USBH_HandleEnum+0x3be>
      break;
 80090d0:	bf00      	nop
 80090d2:	e006      	b.n	80090e2 <USBH_HandleEnum+0x3be>
      break;
 80090d4:	bf00      	nop
 80090d6:	e004      	b.n	80090e2 <USBH_HandleEnum+0x3be>
      break;
 80090d8:	bf00      	nop
 80090da:	e002      	b.n	80090e2 <USBH_HandleEnum+0x3be>
      break;
 80090dc:	bf00      	nop
 80090de:	e000      	b.n	80090e2 <USBH_HandleEnum+0x3be>
      break;
 80090e0:	bf00      	nop
  }
  return Status;
 80090e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	683a      	ldr	r2, [r7, #0]
 80090fa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80090fe:	bf00      	nop
 8009100:	370c      	adds	r7, #12
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b082      	sub	sp, #8
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009118:	1c5a      	adds	r2, r3, #1
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f804 	bl	800912e <USBH_HandleSof>
}
 8009126:	bf00      	nop
 8009128:	3708      	adds	r7, #8
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b082      	sub	sp, #8
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	b2db      	uxtb	r3, r3
 800913c:	2b0b      	cmp	r3, #11
 800913e:	d10a      	bne.n	8009156 <USBH_HandleSof+0x28>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009146:	2b00      	cmp	r3, #0
 8009148:	d005      	beq.n	8009156 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	4798      	blx	r3
  }
}
 8009156:	bf00      	nop
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800915e:	b480      	push	{r7}
 8009160:	b083      	sub	sp, #12
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2201      	movs	r2, #1
 800916a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800916e:	bf00      	nop
}
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800917a:	b480      	push	{r7}
 800917c:	b083      	sub	sp, #12
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800918a:	bf00      	nop
}
 800918c:	370c      	adds	r7, #12
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr

08009196 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009196:	b480      	push	{r7}
 8009198:	b083      	sub	sp, #12
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f001 f844 	bl	800a272 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	791b      	ldrb	r3, [r3, #4]
 80091ee:	4619      	mov	r1, r3
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fe91 	bl	8009f18 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	795b      	ldrb	r3, [r3, #5]
 80091fa:	4619      	mov	r1, r3
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 fe8b 	bl	8009f18 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b086      	sub	sp, #24
 8009210:	af02      	add	r7, sp, #8
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	460b      	mov	r3, r1
 8009216:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800921e:	78fb      	ldrb	r3, [r7, #3]
 8009220:	b29b      	uxth	r3, r3
 8009222:	9300      	str	r3, [sp, #0]
 8009224:	4613      	mov	r3, r2
 8009226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800922a:	2100      	movs	r1, #0
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f864 	bl	80092fa <USBH_GetDescriptor>
 8009232:	4603      	mov	r3, r0
 8009234:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009236:	7bfb      	ldrb	r3, [r7, #15]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d10a      	bne.n	8009252 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009248:	78fa      	ldrb	r2, [r7, #3]
 800924a:	b292      	uxth	r2, r2
 800924c:	4619      	mov	r1, r3
 800924e:	f000 f918 	bl	8009482 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009252:	7bfb      	ldrb	r3, [r7, #15]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800925c:	b580      	push	{r7, lr}
 800925e:	b086      	sub	sp, #24
 8009260:	af02      	add	r7, sp, #8
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	460b      	mov	r3, r1
 8009266:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	331c      	adds	r3, #28
 800926c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800926e:	887b      	ldrh	r3, [r7, #2]
 8009270:	9300      	str	r3, [sp, #0]
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009278:	2100      	movs	r1, #0
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f83d 	bl	80092fa <USBH_GetDescriptor>
 8009280:	4603      	mov	r3, r0
 8009282:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009284:	7bfb      	ldrb	r3, [r7, #15]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d107      	bne.n	800929a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800928a:	887b      	ldrh	r3, [r7, #2]
 800928c:	461a      	mov	r2, r3
 800928e:	68b9      	ldr	r1, [r7, #8]
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f987 	bl	80095a4 <USBH_ParseCfgDesc>
 8009296:	4603      	mov	r3, r0
 8009298:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800929a:	7bfb      	ldrb	r3, [r7, #15]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b088      	sub	sp, #32
 80092a8:	af02      	add	r7, sp, #8
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	607a      	str	r2, [r7, #4]
 80092ae:	461a      	mov	r2, r3
 80092b0:	460b      	mov	r3, r1
 80092b2:	72fb      	strb	r3, [r7, #11]
 80092b4:	4613      	mov	r3, r2
 80092b6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80092b8:	7afb      	ldrb	r3, [r7, #11]
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80092c0:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80092c8:	893b      	ldrh	r3, [r7, #8]
 80092ca:	9300      	str	r3, [sp, #0]
 80092cc:	460b      	mov	r3, r1
 80092ce:	2100      	movs	r1, #0
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f000 f812 	bl	80092fa <USBH_GetDescriptor>
 80092d6:	4603      	mov	r3, r0
 80092d8:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80092da:	7dfb      	ldrb	r3, [r7, #23]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d107      	bne.n	80092f0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80092e6:	893a      	ldrh	r2, [r7, #8]
 80092e8:	6879      	ldr	r1, [r7, #4]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 fb24 	bl	8009938 <USBH_ParseStringDesc>
  }

  return status;
 80092f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3718      	adds	r7, #24
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	60f8      	str	r0, [r7, #12]
 8009302:	607b      	str	r3, [r7, #4]
 8009304:	460b      	mov	r3, r1
 8009306:	72fb      	strb	r3, [r7, #11]
 8009308:	4613      	mov	r3, r2
 800930a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	789b      	ldrb	r3, [r3, #2]
 8009310:	2b01      	cmp	r3, #1
 8009312:	d11c      	bne.n	800934e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009314:	7afb      	ldrb	r3, [r7, #11]
 8009316:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800931a:	b2da      	uxtb	r2, r3
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2206      	movs	r2, #6
 8009324:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	893a      	ldrh	r2, [r7, #8]
 800932a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800932c:	893b      	ldrh	r3, [r7, #8]
 800932e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009332:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009336:	d104      	bne.n	8009342 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f240 4209 	movw	r2, #1033	; 0x409
 800933e:	829a      	strh	r2, [r3, #20]
 8009340:	e002      	b.n	8009348 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	8b3a      	ldrh	r2, [r7, #24]
 800934c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800934e:	8b3b      	ldrh	r3, [r7, #24]
 8009350:	461a      	mov	r2, r3
 8009352:	6879      	ldr	r1, [r7, #4]
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f000 fb3d 	bl	80099d4 <USBH_CtlReq>
 800935a:	4603      	mov	r3, r0
}
 800935c:	4618      	mov	r0, r3
 800935e:	3710      	adds	r7, #16
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	460b      	mov	r3, r1
 800936e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	789b      	ldrb	r3, [r3, #2]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d10f      	bne.n	8009398 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2205      	movs	r2, #5
 8009382:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009384:	78fb      	ldrb	r3, [r7, #3]
 8009386:	b29a      	uxth	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009398:	2200      	movs	r2, #0
 800939a:	2100      	movs	r1, #0
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fb19 	bl	80099d4 <USBH_CtlReq>
 80093a2:	4603      	mov	r3, r0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	460b      	mov	r3, r1
 80093b6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	789b      	ldrb	r3, [r3, #2]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d10e      	bne.n	80093de <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2209      	movs	r2, #9
 80093ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	887a      	ldrh	r2, [r7, #2]
 80093d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80093de:	2200      	movs	r2, #0
 80093e0:	2100      	movs	r1, #0
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 faf6 	bl	80099d4 <USBH_CtlReq>
 80093e8:	4603      	mov	r3, r0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b082      	sub	sp, #8
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	460b      	mov	r3, r1
 80093fc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	789b      	ldrb	r3, [r3, #2]
 8009402:	2b01      	cmp	r3, #1
 8009404:	d10f      	bne.n	8009426 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2203      	movs	r2, #3
 8009410:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009412:	78fb      	ldrb	r3, [r7, #3]
 8009414:	b29a      	uxth	r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009426:	2200      	movs	r2, #0
 8009428:	2100      	movs	r1, #0
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fad2 	bl	80099d4 <USBH_CtlReq>
 8009430:	4603      	mov	r3, r0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b082      	sub	sp, #8
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	460b      	mov	r3, r1
 8009444:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	789b      	ldrb	r3, [r3, #2]
 800944a:	2b01      	cmp	r3, #1
 800944c:	d10f      	bne.n	800946e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2202      	movs	r2, #2
 8009452:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009460:	78fb      	ldrb	r3, [r7, #3]
 8009462:	b29a      	uxth	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800946e:	2200      	movs	r2, #0
 8009470:	2100      	movs	r1, #0
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 faae 	bl	80099d4 <USBH_CtlReq>
 8009478:	4603      	mov	r3, r0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009482:	b480      	push	{r7}
 8009484:	b085      	sub	sp, #20
 8009486:	af00      	add	r7, sp, #0
 8009488:	60f8      	str	r0, [r7, #12]
 800948a:	60b9      	str	r1, [r7, #8]
 800948c:	4613      	mov	r3, r2
 800948e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	781a      	ldrb	r2, [r3, #0]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	785a      	ldrb	r2, [r3, #1]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	3302      	adds	r3, #2
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	3303      	adds	r3, #3
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	021b      	lsls	r3, r3, #8
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	4313      	orrs	r3, r2
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	791a      	ldrb	r2, [r3, #4]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	795a      	ldrb	r2, [r3, #5]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	799a      	ldrb	r2, [r3, #6]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	79da      	ldrb	r2, [r3, #7]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	79db      	ldrb	r3, [r3, #7]
 80094e0:	2b20      	cmp	r3, #32
 80094e2:	dc11      	bgt.n	8009508 <USBH_ParseDevDesc+0x86>
 80094e4:	2b08      	cmp	r3, #8
 80094e6:	db16      	blt.n	8009516 <USBH_ParseDevDesc+0x94>
 80094e8:	3b08      	subs	r3, #8
 80094ea:	2201      	movs	r2, #1
 80094ec:	fa02 f303 	lsl.w	r3, r2, r3
 80094f0:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80094f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	bf14      	ite	ne
 80094fc:	2301      	movne	r3, #1
 80094fe:	2300      	moveq	r3, #0
 8009500:	b2db      	uxtb	r3, r3
 8009502:	2b00      	cmp	r3, #0
 8009504:	d102      	bne.n	800950c <USBH_ParseDevDesc+0x8a>
 8009506:	e006      	b.n	8009516 <USBH_ParseDevDesc+0x94>
 8009508:	2b40      	cmp	r3, #64	; 0x40
 800950a:	d104      	bne.n	8009516 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	79da      	ldrb	r2, [r3, #7]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	71da      	strb	r2, [r3, #7]
      break;
 8009514:	e003      	b.n	800951e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2240      	movs	r2, #64	; 0x40
 800951a:	71da      	strb	r2, [r3, #7]
      break;
 800951c:	bf00      	nop
  }

  if (length > 8U)
 800951e:	88fb      	ldrh	r3, [r7, #6]
 8009520:	2b08      	cmp	r3, #8
 8009522:	d939      	bls.n	8009598 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	3308      	adds	r3, #8
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	b29a      	uxth	r2, r3
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	3309      	adds	r3, #9
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	b29b      	uxth	r3, r3
 8009534:	021b      	lsls	r3, r3, #8
 8009536:	b29b      	uxth	r3, r3
 8009538:	4313      	orrs	r3, r2
 800953a:	b29a      	uxth	r2, r3
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	330a      	adds	r3, #10
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	b29a      	uxth	r2, r3
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	330b      	adds	r3, #11
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	b29b      	uxth	r3, r3
 8009550:	021b      	lsls	r3, r3, #8
 8009552:	b29b      	uxth	r3, r3
 8009554:	4313      	orrs	r3, r2
 8009556:	b29a      	uxth	r2, r3
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	330c      	adds	r3, #12
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	b29a      	uxth	r2, r3
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	330d      	adds	r3, #13
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	b29b      	uxth	r3, r3
 800956c:	021b      	lsls	r3, r3, #8
 800956e:	b29b      	uxth	r3, r3
 8009570:	4313      	orrs	r3, r2
 8009572:	b29a      	uxth	r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	7b9a      	ldrb	r2, [r3, #14]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	7bda      	ldrb	r2, [r3, #15]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	7c1a      	ldrb	r2, [r3, #16]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	7c5a      	ldrb	r2, [r3, #17]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	745a      	strb	r2, [r3, #17]
  }
}
 8009598:	bf00      	nop
 800959a:	3714      	adds	r7, #20
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b08c      	sub	sp, #48	; 0x30
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	4613      	mov	r3, r2
 80095b0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80095b8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80095ba:	2300      	movs	r3, #0
 80095bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80095c4:	2300      	movs	r3, #0
 80095c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80095ca:	2300      	movs	r3, #0
 80095cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	781a      	ldrb	r2, [r3, #0]
 80095d8:	6a3b      	ldr	r3, [r7, #32]
 80095da:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	785a      	ldrb	r2, [r3, #1]
 80095e0:	6a3b      	ldr	r3, [r7, #32]
 80095e2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	3302      	adds	r3, #2
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	3303      	adds	r3, #3
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	021b      	lsls	r3, r3, #8
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	4313      	orrs	r3, r2
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009600:	bf28      	it	cs
 8009602:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8009606:	b29a      	uxth	r2, r3
 8009608:	6a3b      	ldr	r3, [r7, #32]
 800960a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	791a      	ldrb	r2, [r3, #4]
 8009610:	6a3b      	ldr	r3, [r7, #32]
 8009612:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	795a      	ldrb	r2, [r3, #5]
 8009618:	6a3b      	ldr	r3, [r7, #32]
 800961a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	799a      	ldrb	r2, [r3, #6]
 8009620:	6a3b      	ldr	r3, [r7, #32]
 8009622:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	79da      	ldrb	r2, [r3, #7]
 8009628:	6a3b      	ldr	r3, [r7, #32]
 800962a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	7a1a      	ldrb	r2, [r3, #8]
 8009630:	6a3b      	ldr	r3, [r7, #32]
 8009632:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8009634:	6a3b      	ldr	r3, [r7, #32]
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	2b09      	cmp	r3, #9
 800963a:	d002      	beq.n	8009642 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800963c:	6a3b      	ldr	r3, [r7, #32]
 800963e:	2209      	movs	r2, #9
 8009640:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009642:	88fb      	ldrh	r3, [r7, #6]
 8009644:	2b09      	cmp	r3, #9
 8009646:	f240 809d 	bls.w	8009784 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800964a:	2309      	movs	r3, #9
 800964c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800964e:	2300      	movs	r3, #0
 8009650:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009652:	e081      	b.n	8009758 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009654:	f107 0316 	add.w	r3, r7, #22
 8009658:	4619      	mov	r1, r3
 800965a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800965c:	f000 f99f 	bl	800999e <USBH_GetNextDesc>
 8009660:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009664:	785b      	ldrb	r3, [r3, #1]
 8009666:	2b04      	cmp	r3, #4
 8009668:	d176      	bne.n	8009758 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	2b09      	cmp	r3, #9
 8009670:	d002      	beq.n	8009678 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009674:	2209      	movs	r2, #9
 8009676:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800967c:	221a      	movs	r2, #26
 800967e:	fb02 f303 	mul.w	r3, r2, r3
 8009682:	3308      	adds	r3, #8
 8009684:	6a3a      	ldr	r2, [r7, #32]
 8009686:	4413      	add	r3, r2
 8009688:	3302      	adds	r3, #2
 800968a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800968c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800968e:	69f8      	ldr	r0, [r7, #28]
 8009690:	f000 f87e 	bl	8009790 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009694:	2300      	movs	r3, #0
 8009696:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800969a:	2300      	movs	r3, #0
 800969c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800969e:	e043      	b.n	8009728 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80096a0:	f107 0316 	add.w	r3, r7, #22
 80096a4:	4619      	mov	r1, r3
 80096a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096a8:	f000 f979 	bl	800999e <USBH_GetNextDesc>
 80096ac:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80096ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b0:	785b      	ldrb	r3, [r3, #1]
 80096b2:	2b05      	cmp	r3, #5
 80096b4:	d138      	bne.n	8009728 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	795b      	ldrb	r3, [r3, #5]
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d10f      	bne.n	80096de <USBH_ParseCfgDesc+0x13a>
 80096be:	69fb      	ldr	r3, [r7, #28]
 80096c0:	799b      	ldrb	r3, [r3, #6]
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	d10b      	bne.n	80096de <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80096c6:	69fb      	ldr	r3, [r7, #28]
 80096c8:	79db      	ldrb	r3, [r3, #7]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d10f      	bne.n	80096ee <USBH_ParseCfgDesc+0x14a>
 80096ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	2b09      	cmp	r3, #9
 80096d4:	d00b      	beq.n	80096ee <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80096d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d8:	2209      	movs	r2, #9
 80096da:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80096dc:	e007      	b.n	80096ee <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80096de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	2b07      	cmp	r3, #7
 80096e4:	d004      	beq.n	80096f0 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80096e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e8:	2207      	movs	r2, #7
 80096ea:	701a      	strb	r2, [r3, #0]
 80096ec:	e000      	b.n	80096f0 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80096ee:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80096f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096f4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80096f8:	3201      	adds	r2, #1
 80096fa:	00d2      	lsls	r2, r2, #3
 80096fc:	211a      	movs	r1, #26
 80096fe:	fb01 f303 	mul.w	r3, r1, r3
 8009702:	4413      	add	r3, r2
 8009704:	3308      	adds	r3, #8
 8009706:	6a3a      	ldr	r2, [r7, #32]
 8009708:	4413      	add	r3, r2
 800970a:	3304      	adds	r3, #4
 800970c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800970e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009710:	69b9      	ldr	r1, [r7, #24]
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f000 f86b 	bl	80097ee <USBH_ParseEPDesc>
 8009718:	4603      	mov	r3, r0
 800971a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800971e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009722:	3301      	adds	r3, #1
 8009724:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	791b      	ldrb	r3, [r3, #4]
 800972c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009730:	429a      	cmp	r2, r3
 8009732:	d204      	bcs.n	800973e <USBH_ParseCfgDesc+0x19a>
 8009734:	6a3b      	ldr	r3, [r7, #32]
 8009736:	885a      	ldrh	r2, [r3, #2]
 8009738:	8afb      	ldrh	r3, [r7, #22]
 800973a:	429a      	cmp	r2, r3
 800973c:	d8b0      	bhi.n	80096a0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	791b      	ldrb	r3, [r3, #4]
 8009742:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009746:	429a      	cmp	r2, r3
 8009748:	d201      	bcs.n	800974e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800974a:	2303      	movs	r3, #3
 800974c:	e01c      	b.n	8009788 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800974e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009752:	3301      	adds	r3, #1
 8009754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800975c:	2b01      	cmp	r3, #1
 800975e:	d805      	bhi.n	800976c <USBH_ParseCfgDesc+0x1c8>
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	885a      	ldrh	r2, [r3, #2]
 8009764:	8afb      	ldrh	r3, [r7, #22]
 8009766:	429a      	cmp	r2, r3
 8009768:	f63f af74 	bhi.w	8009654 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800976c:	6a3b      	ldr	r3, [r7, #32]
 800976e:	791b      	ldrb	r3, [r3, #4]
 8009770:	2b02      	cmp	r3, #2
 8009772:	bf28      	it	cs
 8009774:	2302      	movcs	r3, #2
 8009776:	b2db      	uxtb	r3, r3
 8009778:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800977c:	429a      	cmp	r2, r3
 800977e:	d201      	bcs.n	8009784 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8009780:	2303      	movs	r3, #3
 8009782:	e001      	b.n	8009788 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8009784:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009788:	4618      	mov	r0, r3
 800978a:	3730      	adds	r7, #48	; 0x30
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	781a      	ldrb	r2, [r3, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	785a      	ldrb	r2, [r3, #1]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	789a      	ldrb	r2, [r3, #2]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	78da      	ldrb	r2, [r3, #3]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	791a      	ldrb	r2, [r3, #4]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	795a      	ldrb	r2, [r3, #5]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	799a      	ldrb	r2, [r3, #6]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	79da      	ldrb	r2, [r3, #7]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	7a1a      	ldrb	r2, [r3, #8]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	721a      	strb	r2, [r3, #8]
}
 80097e2:	bf00      	nop
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b087      	sub	sp, #28
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	60f8      	str	r0, [r7, #12]
 80097f6:	60b9      	str	r1, [r7, #8]
 80097f8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	781a      	ldrb	r2, [r3, #0]
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	785a      	ldrb	r2, [r3, #1]
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	789a      	ldrb	r2, [r3, #2]
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	78da      	ldrb	r2, [r3, #3]
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	3304      	adds	r3, #4
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	b29a      	uxth	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	3305      	adds	r3, #5
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	b29b      	uxth	r3, r3
 800982e:	021b      	lsls	r3, r3, #8
 8009830:	b29b      	uxth	r3, r3
 8009832:	4313      	orrs	r3, r2
 8009834:	b29a      	uxth	r2, r3
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	799a      	ldrb	r2, [r3, #6]
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	889b      	ldrh	r3, [r3, #4]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d102      	bne.n	8009850 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800984a:	2303      	movs	r3, #3
 800984c:	75fb      	strb	r3, [r7, #23]
 800984e:	e033      	b.n	80098b8 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	889b      	ldrh	r3, [r3, #4]
 8009854:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009858:	f023 0307 	bic.w	r3, r3, #7
 800985c:	b29a      	uxth	r2, r3
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	889b      	ldrh	r3, [r3, #4]
 8009866:	b21a      	sxth	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	3304      	adds	r3, #4
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	b299      	uxth	r1, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	3305      	adds	r3, #5
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	b29b      	uxth	r3, r3
 8009878:	021b      	lsls	r3, r3, #8
 800987a:	b29b      	uxth	r3, r3
 800987c:	430b      	orrs	r3, r1
 800987e:	b29b      	uxth	r3, r3
 8009880:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009884:	2b00      	cmp	r3, #0
 8009886:	d110      	bne.n	80098aa <USBH_ParseEPDesc+0xbc>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	3304      	adds	r3, #4
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	b299      	uxth	r1, r3
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	3305      	adds	r3, #5
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	b29b      	uxth	r3, r3
 8009898:	021b      	lsls	r3, r3, #8
 800989a:	b29b      	uxth	r3, r3
 800989c:	430b      	orrs	r3, r1
 800989e:	b29b      	uxth	r3, r3
 80098a0:	b21b      	sxth	r3, r3
 80098a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80098a6:	b21b      	sxth	r3, r3
 80098a8:	e001      	b.n	80098ae <USBH_ParseEPDesc+0xc0>
 80098aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098ae:	4313      	orrs	r3, r2
 80098b0:	b21b      	sxth	r3, r3
 80098b2:	b29a      	uxth	r2, r3
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d116      	bne.n	80098f0 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	78db      	ldrb	r3, [r3, #3]
 80098c6:	f003 0303 	and.w	r3, r3, #3
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d005      	beq.n	80098da <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	78db      	ldrb	r3, [r3, #3]
 80098d2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80098d6:	2b03      	cmp	r3, #3
 80098d8:	d127      	bne.n	800992a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	799b      	ldrb	r3, [r3, #6]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d003      	beq.n	80098ea <USBH_ParseEPDesc+0xfc>
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	799b      	ldrb	r3, [r3, #6]
 80098e6:	2b10      	cmp	r3, #16
 80098e8:	d91f      	bls.n	800992a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80098ea:	2303      	movs	r3, #3
 80098ec:	75fb      	strb	r3, [r7, #23]
 80098ee:	e01c      	b.n	800992a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	78db      	ldrb	r3, [r3, #3]
 80098f4:	f003 0303 	and.w	r3, r3, #3
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d10a      	bne.n	8009912 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	799b      	ldrb	r3, [r3, #6]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d003      	beq.n	800990c <USBH_ParseEPDesc+0x11e>
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	799b      	ldrb	r3, [r3, #6]
 8009908:	2b10      	cmp	r3, #16
 800990a:	d90e      	bls.n	800992a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800990c:	2303      	movs	r3, #3
 800990e:	75fb      	strb	r3, [r7, #23]
 8009910:	e00b      	b.n	800992a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	78db      	ldrb	r3, [r3, #3]
 8009916:	f003 0303 	and.w	r3, r3, #3
 800991a:	2b03      	cmp	r3, #3
 800991c:	d105      	bne.n	800992a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	799b      	ldrb	r3, [r3, #6]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d101      	bne.n	800992a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009926:	2303      	movs	r3, #3
 8009928:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800992a:	7dfb      	ldrb	r3, [r7, #23]
}
 800992c:	4618      	mov	r0, r3
 800992e:	371c      	adds	r7, #28
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009938:	b480      	push	{r7}
 800993a:	b087      	sub	sp, #28
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	4613      	mov	r3, r2
 8009944:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	3301      	adds	r3, #1
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	2b03      	cmp	r3, #3
 800994e:	d120      	bne.n	8009992 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	1e9a      	subs	r2, r3, #2
 8009956:	88fb      	ldrh	r3, [r7, #6]
 8009958:	4293      	cmp	r3, r2
 800995a:	bf28      	it	cs
 800995c:	4613      	movcs	r3, r2
 800995e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	3302      	adds	r3, #2
 8009964:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009966:	2300      	movs	r3, #0
 8009968:	82fb      	strh	r3, [r7, #22]
 800996a:	e00b      	b.n	8009984 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800996c:	8afb      	ldrh	r3, [r7, #22]
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	4413      	add	r3, r2
 8009972:	781a      	ldrb	r2, [r3, #0]
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	3301      	adds	r3, #1
 800997c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800997e:	8afb      	ldrh	r3, [r7, #22]
 8009980:	3302      	adds	r3, #2
 8009982:	82fb      	strh	r3, [r7, #22]
 8009984:	8afa      	ldrh	r2, [r7, #22]
 8009986:	8abb      	ldrh	r3, [r7, #20]
 8009988:	429a      	cmp	r2, r3
 800998a:	d3ef      	bcc.n	800996c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	2200      	movs	r2, #0
 8009990:	701a      	strb	r2, [r3, #0]
  }
}
 8009992:	bf00      	nop
 8009994:	371c      	adds	r7, #28
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr

0800999e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800999e:	b480      	push	{r7}
 80099a0:	b085      	sub	sp, #20
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
 80099a6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	881a      	ldrh	r2, [r3, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	4413      	add	r3, r2
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4413      	add	r3, r2
 80099c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80099c6:	68fb      	ldr	r3, [r7, #12]
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3714      	adds	r7, #20
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b086      	sub	sp, #24
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	4613      	mov	r3, r2
 80099e0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80099e2:	2301      	movs	r3, #1
 80099e4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	789b      	ldrb	r3, [r3, #2]
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d002      	beq.n	80099f4 <USBH_CtlReq+0x20>
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	d00f      	beq.n	8009a12 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80099f2:	e027      	b.n	8009a44 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	68ba      	ldr	r2, [r7, #8]
 80099f8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	88fa      	ldrh	r2, [r7, #6]
 80099fe:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2201      	movs	r2, #1
 8009a04:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2202      	movs	r2, #2
 8009a0a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a10:	e018      	b.n	8009a44 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f000 f81c 	bl	8009a50 <USBH_HandleControl>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009a1c:	7dfb      	ldrb	r3, [r7, #23]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d002      	beq.n	8009a28 <USBH_CtlReq+0x54>
 8009a22:	7dfb      	ldrb	r3, [r7, #23]
 8009a24:	2b03      	cmp	r3, #3
 8009a26:	d106      	bne.n	8009a36 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2200      	movs	r2, #0
 8009a32:	761a      	strb	r2, [r3, #24]
      break;
 8009a34:	e005      	b.n	8009a42 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009a36:	7dfb      	ldrb	r3, [r7, #23]
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	d102      	bne.n	8009a42 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	709a      	strb	r2, [r3, #2]
      break;
 8009a42:	bf00      	nop
  }
  return status;
 8009a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3718      	adds	r7, #24
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
	...

08009a50 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b086      	sub	sp, #24
 8009a54:	af02      	add	r7, sp, #8
 8009a56:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	7e1b      	ldrb	r3, [r3, #24]
 8009a64:	3b01      	subs	r3, #1
 8009a66:	2b0a      	cmp	r3, #10
 8009a68:	f200 8156 	bhi.w	8009d18 <USBH_HandleControl+0x2c8>
 8009a6c:	a201      	add	r2, pc, #4	; (adr r2, 8009a74 <USBH_HandleControl+0x24>)
 8009a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a72:	bf00      	nop
 8009a74:	08009aa1 	.word	0x08009aa1
 8009a78:	08009abb 	.word	0x08009abb
 8009a7c:	08009b25 	.word	0x08009b25
 8009a80:	08009b4b 	.word	0x08009b4b
 8009a84:	08009b83 	.word	0x08009b83
 8009a88:	08009bad 	.word	0x08009bad
 8009a8c:	08009bff 	.word	0x08009bff
 8009a90:	08009c21 	.word	0x08009c21
 8009a94:	08009c5d 	.word	0x08009c5d
 8009a98:	08009c83 	.word	0x08009c83
 8009a9c:	08009cc1 	.word	0x08009cc1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f103 0110 	add.w	r1, r3, #16
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	795b      	ldrb	r3, [r3, #5]
 8009aaa:	461a      	mov	r2, r3
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f943 	bl	8009d38 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2202      	movs	r2, #2
 8009ab6:	761a      	strb	r2, [r3, #24]
      break;
 8009ab8:	e139      	b.n	8009d2e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	795b      	ldrb	r3, [r3, #5]
 8009abe:	4619      	mov	r1, r3
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 fcc5 	bl	800a450 <USBH_LL_GetURBState>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009aca:	7bbb      	ldrb	r3, [r7, #14]
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d11e      	bne.n	8009b0e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	7c1b      	ldrb	r3, [r3, #16]
 8009ad4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009ad8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	8adb      	ldrh	r3, [r3, #22]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d00a      	beq.n	8009af8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009ae2:	7b7b      	ldrb	r3, [r7, #13]
 8009ae4:	2b80      	cmp	r3, #128	; 0x80
 8009ae6:	d103      	bne.n	8009af0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2203      	movs	r2, #3
 8009aec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009aee:	e115      	b.n	8009d1c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2205      	movs	r2, #5
 8009af4:	761a      	strb	r2, [r3, #24]
      break;
 8009af6:	e111      	b.n	8009d1c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009af8:	7b7b      	ldrb	r3, [r7, #13]
 8009afa:	2b80      	cmp	r3, #128	; 0x80
 8009afc:	d103      	bne.n	8009b06 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2209      	movs	r2, #9
 8009b02:	761a      	strb	r2, [r3, #24]
      break;
 8009b04:	e10a      	b.n	8009d1c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2207      	movs	r2, #7
 8009b0a:	761a      	strb	r2, [r3, #24]
      break;
 8009b0c:	e106      	b.n	8009d1c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009b0e:	7bbb      	ldrb	r3, [r7, #14]
 8009b10:	2b04      	cmp	r3, #4
 8009b12:	d003      	beq.n	8009b1c <USBH_HandleControl+0xcc>
 8009b14:	7bbb      	ldrb	r3, [r7, #14]
 8009b16:	2b02      	cmp	r3, #2
 8009b18:	f040 8100 	bne.w	8009d1c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	220b      	movs	r2, #11
 8009b20:	761a      	strb	r2, [r3, #24]
      break;
 8009b22:	e0fb      	b.n	8009d1c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6899      	ldr	r1, [r3, #8]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	899a      	ldrh	r2, [r3, #12]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	791b      	ldrb	r3, [r3, #4]
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 f93a 	bl	8009db6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2204      	movs	r2, #4
 8009b46:	761a      	strb	r2, [r3, #24]
      break;
 8009b48:	e0f1      	b.n	8009d2e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	791b      	ldrb	r3, [r3, #4]
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 fc7d 	bl	800a450 <USBH_LL_GetURBState>
 8009b56:	4603      	mov	r3, r0
 8009b58:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009b5a:	7bbb      	ldrb	r3, [r7, #14]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d102      	bne.n	8009b66 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2209      	movs	r2, #9
 8009b64:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009b66:	7bbb      	ldrb	r3, [r7, #14]
 8009b68:	2b05      	cmp	r3, #5
 8009b6a:	d102      	bne.n	8009b72 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009b6c:	2303      	movs	r3, #3
 8009b6e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009b70:	e0d6      	b.n	8009d20 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009b72:	7bbb      	ldrb	r3, [r7, #14]
 8009b74:	2b04      	cmp	r3, #4
 8009b76:	f040 80d3 	bne.w	8009d20 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	220b      	movs	r2, #11
 8009b7e:	761a      	strb	r2, [r3, #24]
      break;
 8009b80:	e0ce      	b.n	8009d20 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6899      	ldr	r1, [r3, #8]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	899a      	ldrh	r2, [r3, #12]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	795b      	ldrb	r3, [r3, #5]
 8009b8e:	2001      	movs	r0, #1
 8009b90:	9000      	str	r0, [sp, #0]
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 f8ea 	bl	8009d6c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2206      	movs	r2, #6
 8009ba8:	761a      	strb	r2, [r3, #24]
      break;
 8009baa:	e0c0      	b.n	8009d2e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	795b      	ldrb	r3, [r3, #5]
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fc4c 	bl	800a450 <USBH_LL_GetURBState>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009bbc:	7bbb      	ldrb	r3, [r7, #14]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d103      	bne.n	8009bca <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2207      	movs	r2, #7
 8009bc6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009bc8:	e0ac      	b.n	8009d24 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009bca:	7bbb      	ldrb	r3, [r7, #14]
 8009bcc:	2b05      	cmp	r3, #5
 8009bce:	d105      	bne.n	8009bdc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	220c      	movs	r2, #12
 8009bd4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	73fb      	strb	r3, [r7, #15]
      break;
 8009bda:	e0a3      	b.n	8009d24 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009bdc:	7bbb      	ldrb	r3, [r7, #14]
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	d103      	bne.n	8009bea <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2205      	movs	r2, #5
 8009be6:	761a      	strb	r2, [r3, #24]
      break;
 8009be8:	e09c      	b.n	8009d24 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009bea:	7bbb      	ldrb	r3, [r7, #14]
 8009bec:	2b04      	cmp	r3, #4
 8009bee:	f040 8099 	bne.w	8009d24 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	220b      	movs	r2, #11
 8009bf6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009bf8:	2302      	movs	r3, #2
 8009bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8009bfc:	e092      	b.n	8009d24 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	791b      	ldrb	r3, [r3, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	2100      	movs	r1, #0
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f8d5 	bl	8009db6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2208      	movs	r2, #8
 8009c1c:	761a      	strb	r2, [r3, #24]

      break;
 8009c1e:	e086      	b.n	8009d2e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	791b      	ldrb	r3, [r3, #4]
 8009c24:	4619      	mov	r1, r3
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fc12 	bl	800a450 <USBH_LL_GetURBState>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009c30:	7bbb      	ldrb	r3, [r7, #14]
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d105      	bne.n	8009c42 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	220d      	movs	r2, #13
 8009c3a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009c40:	e072      	b.n	8009d28 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009c42:	7bbb      	ldrb	r3, [r7, #14]
 8009c44:	2b04      	cmp	r3, #4
 8009c46:	d103      	bne.n	8009c50 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	220b      	movs	r2, #11
 8009c4c:	761a      	strb	r2, [r3, #24]
      break;
 8009c4e:	e06b      	b.n	8009d28 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009c50:	7bbb      	ldrb	r3, [r7, #14]
 8009c52:	2b05      	cmp	r3, #5
 8009c54:	d168      	bne.n	8009d28 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009c56:	2303      	movs	r3, #3
 8009c58:	73fb      	strb	r3, [r7, #15]
      break;
 8009c5a:	e065      	b.n	8009d28 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	795b      	ldrb	r3, [r3, #5]
 8009c60:	2201      	movs	r2, #1
 8009c62:	9200      	str	r2, [sp, #0]
 8009c64:	2200      	movs	r2, #0
 8009c66:	2100      	movs	r1, #0
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 f87f 	bl	8009d6c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009c74:	b29a      	uxth	r2, r3
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	220a      	movs	r2, #10
 8009c7e:	761a      	strb	r2, [r3, #24]
      break;
 8009c80:	e055      	b.n	8009d2e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	795b      	ldrb	r3, [r3, #5]
 8009c86:	4619      	mov	r1, r3
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fbe1 	bl	800a450 <USBH_LL_GetURBState>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009c92:	7bbb      	ldrb	r3, [r7, #14]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d105      	bne.n	8009ca4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	220d      	movs	r2, #13
 8009ca0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009ca2:	e043      	b.n	8009d2c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ca4:	7bbb      	ldrb	r3, [r7, #14]
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d103      	bne.n	8009cb2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2209      	movs	r2, #9
 8009cae:	761a      	strb	r2, [r3, #24]
      break;
 8009cb0:	e03c      	b.n	8009d2c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009cb2:	7bbb      	ldrb	r3, [r7, #14]
 8009cb4:	2b04      	cmp	r3, #4
 8009cb6:	d139      	bne.n	8009d2c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	220b      	movs	r2, #11
 8009cbc:	761a      	strb	r2, [r3, #24]
      break;
 8009cbe:	e035      	b.n	8009d2c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	7e5b      	ldrb	r3, [r3, #25]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	b2da      	uxtb	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	765a      	strb	r2, [r3, #25]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	7e5b      	ldrb	r3, [r3, #25]
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	d806      	bhi.n	8009ce2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009ce0:	e025      	b.n	8009d2e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009ce8:	2106      	movs	r1, #6
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	795b      	ldrb	r3, [r3, #5]
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 f90c 	bl	8009f18 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	791b      	ldrb	r3, [r3, #4]
 8009d04:	4619      	mov	r1, r3
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 f906 	bl	8009f18 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009d12:	2302      	movs	r3, #2
 8009d14:	73fb      	strb	r3, [r7, #15]
      break;
 8009d16:	e00a      	b.n	8009d2e <USBH_HandleControl+0x2de>

    default:
      break;
 8009d18:	bf00      	nop
 8009d1a:	e008      	b.n	8009d2e <USBH_HandleControl+0x2de>
      break;
 8009d1c:	bf00      	nop
 8009d1e:	e006      	b.n	8009d2e <USBH_HandleControl+0x2de>
      break;
 8009d20:	bf00      	nop
 8009d22:	e004      	b.n	8009d2e <USBH_HandleControl+0x2de>
      break;
 8009d24:	bf00      	nop
 8009d26:	e002      	b.n	8009d2e <USBH_HandleControl+0x2de>
      break;
 8009d28:	bf00      	nop
 8009d2a:	e000      	b.n	8009d2e <USBH_HandleControl+0x2de>
      break;
 8009d2c:	bf00      	nop
  }

  return status;
 8009d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b088      	sub	sp, #32
 8009d3c:	af04      	add	r7, sp, #16
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	4613      	mov	r3, r2
 8009d44:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009d46:	79f9      	ldrb	r1, [r7, #7]
 8009d48:	2300      	movs	r3, #0
 8009d4a:	9303      	str	r3, [sp, #12]
 8009d4c:	2308      	movs	r3, #8
 8009d4e:	9302      	str	r3, [sp, #8]
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	9301      	str	r3, [sp, #4]
 8009d54:	2300      	movs	r3, #0
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	2300      	movs	r3, #0
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f000 fb46 	bl	800a3ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b088      	sub	sp, #32
 8009d70:	af04      	add	r7, sp, #16
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	4611      	mov	r1, r2
 8009d78:	461a      	mov	r2, r3
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	80fb      	strh	r3, [r7, #6]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d001      	beq.n	8009d90 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009d90:	7979      	ldrb	r1, [r7, #5]
 8009d92:	7e3b      	ldrb	r3, [r7, #24]
 8009d94:	9303      	str	r3, [sp, #12]
 8009d96:	88fb      	ldrh	r3, [r7, #6]
 8009d98:	9302      	str	r3, [sp, #8]
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	9301      	str	r3, [sp, #4]
 8009d9e:	2301      	movs	r3, #1
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	2300      	movs	r3, #0
 8009da4:	2200      	movs	r2, #0
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f000 fb21 	bl	800a3ee <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b088      	sub	sp, #32
 8009dba:	af04      	add	r7, sp, #16
 8009dbc:	60f8      	str	r0, [r7, #12]
 8009dbe:	60b9      	str	r1, [r7, #8]
 8009dc0:	4611      	mov	r1, r2
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	80fb      	strh	r3, [r7, #6]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009dcc:	7979      	ldrb	r1, [r7, #5]
 8009dce:	2300      	movs	r3, #0
 8009dd0:	9303      	str	r3, [sp, #12]
 8009dd2:	88fb      	ldrh	r3, [r7, #6]
 8009dd4:	9302      	str	r3, [sp, #8]
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	9301      	str	r3, [sp, #4]
 8009dda:	2301      	movs	r3, #1
 8009ddc:	9300      	str	r3, [sp, #0]
 8009dde:	2300      	movs	r3, #0
 8009de0:	2201      	movs	r2, #1
 8009de2:	68f8      	ldr	r0, [r7, #12]
 8009de4:	f000 fb03 	bl	800a3ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009de8:	2300      	movs	r3, #0

}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b088      	sub	sp, #32
 8009df6:	af04      	add	r7, sp, #16
 8009df8:	60f8      	str	r0, [r7, #12]
 8009dfa:	60b9      	str	r1, [r7, #8]
 8009dfc:	4611      	mov	r1, r2
 8009dfe:	461a      	mov	r2, r3
 8009e00:	460b      	mov	r3, r1
 8009e02:	80fb      	strh	r3, [r7, #6]
 8009e04:	4613      	mov	r3, r2
 8009e06:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d001      	beq.n	8009e16 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009e12:	2300      	movs	r3, #0
 8009e14:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009e16:	7979      	ldrb	r1, [r7, #5]
 8009e18:	7e3b      	ldrb	r3, [r7, #24]
 8009e1a:	9303      	str	r3, [sp, #12]
 8009e1c:	88fb      	ldrh	r3, [r7, #6]
 8009e1e:	9302      	str	r3, [sp, #8]
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	9301      	str	r3, [sp, #4]
 8009e24:	2301      	movs	r3, #1
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	2302      	movs	r3, #2
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	68f8      	ldr	r0, [r7, #12]
 8009e2e:	f000 fade 	bl	800a3ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b088      	sub	sp, #32
 8009e40:	af04      	add	r7, sp, #16
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	4611      	mov	r1, r2
 8009e48:	461a      	mov	r2, r3
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	80fb      	strh	r3, [r7, #6]
 8009e4e:	4613      	mov	r3, r2
 8009e50:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009e52:	7979      	ldrb	r1, [r7, #5]
 8009e54:	2300      	movs	r3, #0
 8009e56:	9303      	str	r3, [sp, #12]
 8009e58:	88fb      	ldrh	r3, [r7, #6]
 8009e5a:	9302      	str	r3, [sp, #8]
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	9301      	str	r3, [sp, #4]
 8009e60:	2301      	movs	r3, #1
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	2302      	movs	r3, #2
 8009e66:	2201      	movs	r2, #1
 8009e68:	68f8      	ldr	r0, [r7, #12]
 8009e6a:	f000 fac0 	bl	800a3ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b086      	sub	sp, #24
 8009e7c:	af04      	add	r7, sp, #16
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	4608      	mov	r0, r1
 8009e82:	4611      	mov	r1, r2
 8009e84:	461a      	mov	r2, r3
 8009e86:	4603      	mov	r3, r0
 8009e88:	70fb      	strb	r3, [r7, #3]
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	70bb      	strb	r3, [r7, #2]
 8009e8e:	4613      	mov	r3, r2
 8009e90:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009e92:	7878      	ldrb	r0, [r7, #1]
 8009e94:	78ba      	ldrb	r2, [r7, #2]
 8009e96:	78f9      	ldrb	r1, [r7, #3]
 8009e98:	8b3b      	ldrh	r3, [r7, #24]
 8009e9a:	9302      	str	r3, [sp, #8]
 8009e9c:	7d3b      	ldrb	r3, [r7, #20]
 8009e9e:	9301      	str	r3, [sp, #4]
 8009ea0:	7c3b      	ldrb	r3, [r7, #16]
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fa53 	bl	800a352 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3708      	adds	r7, #8
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b082      	sub	sp, #8
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009ec2:	78fb      	ldrb	r3, [r7, #3]
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fa72 	bl	800a3b0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b084      	sub	sp, #16
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
 8009ede:	460b      	mov	r3, r1
 8009ee0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 f836 	bl	8009f54 <USBH_GetFreePipe>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009eec:	89fb      	ldrh	r3, [r7, #14]
 8009eee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d00a      	beq.n	8009f0c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009ef6:	78fa      	ldrb	r2, [r7, #3]
 8009ef8:	89fb      	ldrh	r3, [r7, #14]
 8009efa:	f003 030f 	and.w	r3, r3, #15
 8009efe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f02:	6879      	ldr	r1, [r7, #4]
 8009f04:	33e0      	adds	r3, #224	; 0xe0
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	440b      	add	r3, r1
 8009f0a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009f0c:	89fb      	ldrh	r3, [r7, #14]
 8009f0e:	b2db      	uxtb	r3, r3
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	460b      	mov	r3, r1
 8009f22:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009f24:	78fb      	ldrb	r3, [r7, #3]
 8009f26:	2b0f      	cmp	r3, #15
 8009f28:	d80d      	bhi.n	8009f46 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009f2a:	78fb      	ldrb	r3, [r7, #3]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	33e0      	adds	r3, #224	; 0xe0
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	4413      	add	r3, r2
 8009f34:	685a      	ldr	r2, [r3, #4]
 8009f36:	78fb      	ldrb	r3, [r7, #3]
 8009f38:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009f3c:	6879      	ldr	r1, [r7, #4]
 8009f3e:	33e0      	adds	r3, #224	; 0xe0
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	440b      	add	r3, r1
 8009f44:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009f60:	2300      	movs	r3, #0
 8009f62:	73fb      	strb	r3, [r7, #15]
 8009f64:	e00f      	b.n	8009f86 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	33e0      	adds	r3, #224	; 0xe0
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	4413      	add	r3, r2
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d102      	bne.n	8009f80 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009f7a:	7bfb      	ldrb	r3, [r7, #15]
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	e007      	b.n	8009f90 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009f80:	7bfb      	ldrb	r3, [r7, #15]
 8009f82:	3301      	adds	r3, #1
 8009f84:	73fb      	strb	r3, [r7, #15]
 8009f86:	7bfb      	ldrb	r3, [r7, #15]
 8009f88:	2b0f      	cmp	r3, #15
 8009f8a:	d9ec      	bls.n	8009f66 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009f8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3714      	adds	r7, #20
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	490e      	ldr	r1, [pc, #56]	; (8009fdc <MX_USB_HOST_Init+0x40>)
 8009fa4:	480e      	ldr	r0, [pc, #56]	; (8009fe0 <MX_USB_HOST_Init+0x44>)
 8009fa6:	f7fe fba7 	bl	80086f8 <USBH_Init>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d001      	beq.n	8009fb4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009fb0:	f7f7 ff96 	bl	8001ee0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009fb4:	490b      	ldr	r1, [pc, #44]	; (8009fe4 <MX_USB_HOST_Init+0x48>)
 8009fb6:	480a      	ldr	r0, [pc, #40]	; (8009fe0 <MX_USB_HOST_Init+0x44>)
 8009fb8:	f7fe fc2c 	bl	8008814 <USBH_RegisterClass>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d001      	beq.n	8009fc6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009fc2:	f7f7 ff8d 	bl	8001ee0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009fc6:	4806      	ldr	r0, [pc, #24]	; (8009fe0 <MX_USB_HOST_Init+0x44>)
 8009fc8:	f7fe fcb0 	bl	800892c <USBH_Start>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d001      	beq.n	8009fd6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009fd2:	f7f7 ff85 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009fd6:	bf00      	nop
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	08009ffd 	.word	0x08009ffd
 8009fe0:	20000278 	.word	0x20000278
 8009fe4:	2000000c 	.word	0x2000000c

08009fe8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009fec:	4802      	ldr	r0, [pc, #8]	; (8009ff8 <MX_USB_HOST_Process+0x10>)
 8009fee:	f7fe fcad 	bl	800894c <USBH_Process>
}
 8009ff2:	bf00      	nop
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	20000278 	.word	0x20000278

08009ffc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	460b      	mov	r3, r1
 800a006:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a008:	78fb      	ldrb	r3, [r7, #3]
 800a00a:	3b01      	subs	r3, #1
 800a00c:	2b04      	cmp	r3, #4
 800a00e:	d819      	bhi.n	800a044 <USBH_UserProcess+0x48>
 800a010:	a201      	add	r2, pc, #4	; (adr r2, 800a018 <USBH_UserProcess+0x1c>)
 800a012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a016:	bf00      	nop
 800a018:	0800a045 	.word	0x0800a045
 800a01c:	0800a035 	.word	0x0800a035
 800a020:	0800a045 	.word	0x0800a045
 800a024:	0800a03d 	.word	0x0800a03d
 800a028:	0800a02d 	.word	0x0800a02d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a02c:	4b09      	ldr	r3, [pc, #36]	; (800a054 <USBH_UserProcess+0x58>)
 800a02e:	2203      	movs	r2, #3
 800a030:	701a      	strb	r2, [r3, #0]
  break;
 800a032:	e008      	b.n	800a046 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a034:	4b07      	ldr	r3, [pc, #28]	; (800a054 <USBH_UserProcess+0x58>)
 800a036:	2202      	movs	r2, #2
 800a038:	701a      	strb	r2, [r3, #0]
  break;
 800a03a:	e004      	b.n	800a046 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a03c:	4b05      	ldr	r3, [pc, #20]	; (800a054 <USBH_UserProcess+0x58>)
 800a03e:	2201      	movs	r2, #1
 800a040:	701a      	strb	r2, [r3, #0]
  break;
 800a042:	e000      	b.n	800a046 <USBH_UserProcess+0x4a>

  default:
  break;
 800a044:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a046:	bf00      	nop
 800a048:	370c      	adds	r7, #12
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	20000650 	.word	0x20000650

0800a058 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b08a      	sub	sp, #40	; 0x28
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a060:	f107 0314 	add.w	r3, r7, #20
 800a064:	2200      	movs	r2, #0
 800a066:	601a      	str	r2, [r3, #0]
 800a068:	605a      	str	r2, [r3, #4]
 800a06a:	609a      	str	r2, [r3, #8]
 800a06c:	60da      	str	r2, [r3, #12]
 800a06e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a078:	d147      	bne.n	800a10a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a07a:	2300      	movs	r3, #0
 800a07c:	613b      	str	r3, [r7, #16]
 800a07e:	4b25      	ldr	r3, [pc, #148]	; (800a114 <HAL_HCD_MspInit+0xbc>)
 800a080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a082:	4a24      	ldr	r2, [pc, #144]	; (800a114 <HAL_HCD_MspInit+0xbc>)
 800a084:	f043 0301 	orr.w	r3, r3, #1
 800a088:	6313      	str	r3, [r2, #48]	; 0x30
 800a08a:	4b22      	ldr	r3, [pc, #136]	; (800a114 <HAL_HCD_MspInit+0xbc>)
 800a08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08e:	f003 0301 	and.w	r3, r3, #1
 800a092:	613b      	str	r3, [r7, #16]
 800a094:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a09a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a09c:	2300      	movs	r3, #0
 800a09e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a0a4:	f107 0314 	add.w	r3, r7, #20
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	481b      	ldr	r0, [pc, #108]	; (800a118 <HAL_HCD_MspInit+0xc0>)
 800a0ac:	f7f8 fb3a 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a0b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a0b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0b6:	2302      	movs	r3, #2
 800a0b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a0c2:	230a      	movs	r3, #10
 800a0c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0c6:	f107 0314 	add.w	r3, r7, #20
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	4812      	ldr	r0, [pc, #72]	; (800a118 <HAL_HCD_MspInit+0xc0>)
 800a0ce:	f7f8 fb29 	bl	8002724 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a0d2:	4b10      	ldr	r3, [pc, #64]	; (800a114 <HAL_HCD_MspInit+0xbc>)
 800a0d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d6:	4a0f      	ldr	r2, [pc, #60]	; (800a114 <HAL_HCD_MspInit+0xbc>)
 800a0d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0dc:	6353      	str	r3, [r2, #52]	; 0x34
 800a0de:	2300      	movs	r3, #0
 800a0e0:	60fb      	str	r3, [r7, #12]
 800a0e2:	4b0c      	ldr	r3, [pc, #48]	; (800a114 <HAL_HCD_MspInit+0xbc>)
 800a0e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0e6:	4a0b      	ldr	r2, [pc, #44]	; (800a114 <HAL_HCD_MspInit+0xbc>)
 800a0e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a0ec:	6453      	str	r3, [r2, #68]	; 0x44
 800a0ee:	4b09      	ldr	r3, [pc, #36]	; (800a114 <HAL_HCD_MspInit+0xbc>)
 800a0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0f6:	60fb      	str	r3, [r7, #12]
 800a0f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	2043      	movs	r0, #67	; 0x43
 800a100:	f7f8 fad9 	bl	80026b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a104:	2043      	movs	r0, #67	; 0x43
 800a106:	f7f8 faf2 	bl	80026ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a10a:	bf00      	nop
 800a10c:	3728      	adds	r7, #40	; 0x28
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	40023800 	.word	0x40023800
 800a118:	40020000 	.word	0x40020000

0800a11c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7fe ffed 	bl	800910a <USBH_LL_IncTimer>
}
 800a130:	bf00      	nop
 800a132:	3708      	adds	r7, #8
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a146:	4618      	mov	r0, r3
 800a148:	f7ff f825 	bl	8009196 <USBH_LL_Connect>
}
 800a14c:	bf00      	nop
 800a14e:	3708      	adds	r7, #8
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a162:	4618      	mov	r0, r3
 800a164:	f7ff f82e 	bl	80091c4 <USBH_LL_Disconnect>
}
 800a168:	bf00      	nop
 800a16a:	3708      	adds	r7, #8
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	460b      	mov	r3, r1
 800a17a:	70fb      	strb	r3, [r7, #3]
 800a17c:	4613      	mov	r3, r2
 800a17e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a180:	bf00      	nop
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7fe ffdf 	bl	800915e <USBH_LL_PortEnabled>
}
 800a1a0:	bf00      	nop
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7fe ffdf 	bl	800917a <USBH_LL_PortDisabled>
}
 800a1bc:	bf00      	nop
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d12a      	bne.n	800a22c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a1d6:	4a18      	ldr	r2, [pc, #96]	; (800a238 <USBH_LL_Init+0x74>)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4a15      	ldr	r2, [pc, #84]	; (800a238 <USBH_LL_Init+0x74>)
 800a1e2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a1e6:	4b14      	ldr	r3, [pc, #80]	; (800a238 <USBH_LL_Init+0x74>)
 800a1e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a1ec:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a1ee:	4b12      	ldr	r3, [pc, #72]	; (800a238 <USBH_LL_Init+0x74>)
 800a1f0:	2208      	movs	r2, #8
 800a1f2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a1f4:	4b10      	ldr	r3, [pc, #64]	; (800a238 <USBH_LL_Init+0x74>)
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a1fa:	4b0f      	ldr	r3, [pc, #60]	; (800a238 <USBH_LL_Init+0x74>)
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a200:	4b0d      	ldr	r3, [pc, #52]	; (800a238 <USBH_LL_Init+0x74>)
 800a202:	2202      	movs	r2, #2
 800a204:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a206:	4b0c      	ldr	r3, [pc, #48]	; (800a238 <USBH_LL_Init+0x74>)
 800a208:	2200      	movs	r2, #0
 800a20a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a20c:	480a      	ldr	r0, [pc, #40]	; (800a238 <USBH_LL_Init+0x74>)
 800a20e:	f7f8 fc26 	bl	8002a5e <HAL_HCD_Init>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d001      	beq.n	800a21c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a218:	f7f7 fe62 	bl	8001ee0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a21c:	4806      	ldr	r0, [pc, #24]	; (800a238 <USBH_LL_Init+0x74>)
 800a21e:	f7f9 f80a 	bl	8003236 <HAL_HCD_GetCurrentFrame>
 800a222:	4603      	mov	r3, r0
 800a224:	4619      	mov	r1, r3
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f7fe ff60 	bl	80090ec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a22c:	2300      	movs	r3, #0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3708      	adds	r7, #8
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	20000654 	.word	0x20000654

0800a23c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a244:	2300      	movs	r3, #0
 800a246:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a248:	2300      	movs	r3, #0
 800a24a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a252:	4618      	mov	r0, r3
 800a254:	f7f8 ff79 	bl	800314a <HAL_HCD_Start>
 800a258:	4603      	mov	r3, r0
 800a25a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a25c:	7bfb      	ldrb	r3, [r7, #15]
 800a25e:	4618      	mov	r0, r3
 800a260:	f000 f95c 	bl	800a51c <USBH_Get_USB_Status>
 800a264:	4603      	mov	r3, r0
 800a266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a268:	7bbb      	ldrb	r3, [r7, #14]
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a272:	b580      	push	{r7, lr}
 800a274:	b084      	sub	sp, #16
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a27a:	2300      	movs	r3, #0
 800a27c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a27e:	2300      	movs	r3, #0
 800a280:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a288:	4618      	mov	r0, r3
 800a28a:	f7f8 ff81 	bl	8003190 <HAL_HCD_Stop>
 800a28e:	4603      	mov	r3, r0
 800a290:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a292:	7bfb      	ldrb	r3, [r7, #15]
 800a294:	4618      	mov	r0, r3
 800a296:	f000 f941 	bl	800a51c <USBH_Get_USB_Status>
 800a29a:	4603      	mov	r3, r0
 800a29c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a29e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3710      	adds	r7, #16
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7f8 ffc9 	bl	8003252 <HAL_HCD_GetCurrentSpeed>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d00c      	beq.n	800a2e0 <USBH_LL_GetSpeed+0x38>
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	d80d      	bhi.n	800a2e6 <USBH_LL_GetSpeed+0x3e>
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d002      	beq.n	800a2d4 <USBH_LL_GetSpeed+0x2c>
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d003      	beq.n	800a2da <USBH_LL_GetSpeed+0x32>
 800a2d2:	e008      	b.n	800a2e6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a2d8:	e008      	b.n	800a2ec <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	73fb      	strb	r3, [r7, #15]
    break;
 800a2de:	e005      	b.n	800a2ec <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a2e0:	2302      	movs	r3, #2
 800a2e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2e4:	e002      	b.n	800a2ec <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ea:	bf00      	nop
  }
  return  speed;
 800a2ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b084      	sub	sp, #16
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a302:	2300      	movs	r3, #0
 800a304:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7f8 ff5c 	bl	80031ca <HAL_HCD_ResetPort>
 800a312:	4603      	mov	r3, r0
 800a314:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a316:	7bfb      	ldrb	r3, [r7, #15]
 800a318:	4618      	mov	r0, r3
 800a31a:	f000 f8ff 	bl	800a51c <USBH_Get_USB_Status>
 800a31e:	4603      	mov	r3, r0
 800a320:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a322:	7bbb      	ldrb	r3, [r7, #14]
}
 800a324:	4618      	mov	r0, r3
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	460b      	mov	r3, r1
 800a336:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a33e:	78fa      	ldrb	r2, [r7, #3]
 800a340:	4611      	mov	r1, r2
 800a342:	4618      	mov	r0, r3
 800a344:	f7f8 ff63 	bl	800320e <HAL_HCD_HC_GetXferCount>
 800a348:	4603      	mov	r3, r0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a352:	b590      	push	{r4, r7, lr}
 800a354:	b089      	sub	sp, #36	; 0x24
 800a356:	af04      	add	r7, sp, #16
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	4608      	mov	r0, r1
 800a35c:	4611      	mov	r1, r2
 800a35e:	461a      	mov	r2, r3
 800a360:	4603      	mov	r3, r0
 800a362:	70fb      	strb	r3, [r7, #3]
 800a364:	460b      	mov	r3, r1
 800a366:	70bb      	strb	r3, [r7, #2]
 800a368:	4613      	mov	r3, r2
 800a36a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a36c:	2300      	movs	r3, #0
 800a36e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a370:	2300      	movs	r3, #0
 800a372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a37a:	787c      	ldrb	r4, [r7, #1]
 800a37c:	78ba      	ldrb	r2, [r7, #2]
 800a37e:	78f9      	ldrb	r1, [r7, #3]
 800a380:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a382:	9302      	str	r3, [sp, #8]
 800a384:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a388:	9301      	str	r3, [sp, #4]
 800a38a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a38e:	9300      	str	r3, [sp, #0]
 800a390:	4623      	mov	r3, r4
 800a392:	f7f8 fbc6 	bl	8002b22 <HAL_HCD_HC_Init>
 800a396:	4603      	mov	r3, r0
 800a398:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a39a:	7bfb      	ldrb	r3, [r7, #15]
 800a39c:	4618      	mov	r0, r3
 800a39e:	f000 f8bd 	bl	800a51c <USBH_Get_USB_Status>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3714      	adds	r7, #20
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd90      	pop	{r4, r7, pc}

0800a3b0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a3ca:	78fa      	ldrb	r2, [r7, #3]
 800a3cc:	4611      	mov	r1, r2
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7f8 fc36 	bl	8002c40 <HAL_HCD_HC_Halt>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a3d8:	7bfb      	ldrb	r3, [r7, #15]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f000 f89e 	bl	800a51c <USBH_Get_USB_Status>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a3ee:	b590      	push	{r4, r7, lr}
 800a3f0:	b089      	sub	sp, #36	; 0x24
 800a3f2:	af04      	add	r7, sp, #16
 800a3f4:	6078      	str	r0, [r7, #4]
 800a3f6:	4608      	mov	r0, r1
 800a3f8:	4611      	mov	r1, r2
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	70fb      	strb	r3, [r7, #3]
 800a400:	460b      	mov	r3, r1
 800a402:	70bb      	strb	r3, [r7, #2]
 800a404:	4613      	mov	r3, r2
 800a406:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a408:	2300      	movs	r3, #0
 800a40a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a40c:	2300      	movs	r3, #0
 800a40e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a416:	787c      	ldrb	r4, [r7, #1]
 800a418:	78ba      	ldrb	r2, [r7, #2]
 800a41a:	78f9      	ldrb	r1, [r7, #3]
 800a41c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a420:	9303      	str	r3, [sp, #12]
 800a422:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a424:	9302      	str	r3, [sp, #8]
 800a426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a428:	9301      	str	r3, [sp, #4]
 800a42a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a42e:	9300      	str	r3, [sp, #0]
 800a430:	4623      	mov	r3, r4
 800a432:	f7f8 fc29 	bl	8002c88 <HAL_HCD_HC_SubmitRequest>
 800a436:	4603      	mov	r3, r0
 800a438:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a43a:	7bfb      	ldrb	r3, [r7, #15]
 800a43c:	4618      	mov	r0, r3
 800a43e:	f000 f86d 	bl	800a51c <USBH_Get_USB_Status>
 800a442:	4603      	mov	r3, r0
 800a444:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a446:	7bbb      	ldrb	r3, [r7, #14]
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3714      	adds	r7, #20
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd90      	pop	{r4, r7, pc}

0800a450 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	460b      	mov	r3, r1
 800a45a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a462:	78fa      	ldrb	r2, [r7, #3]
 800a464:	4611      	mov	r1, r2
 800a466:	4618      	mov	r0, r3
 800a468:	f7f8 febd 	bl	80031e6 <HAL_HCD_HC_GetURBState>
 800a46c:	4603      	mov	r3, r0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b082      	sub	sp, #8
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
 800a47e:	460b      	mov	r3, r1
 800a480:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d103      	bne.n	800a494 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a48c:	78fb      	ldrb	r3, [r7, #3]
 800a48e:	4618      	mov	r0, r3
 800a490:	f000 f870 	bl	800a574 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a494:	20c8      	movs	r0, #200	; 0xc8
 800a496:	f7f8 f80f 	bl	80024b8 <HAL_Delay>
  return USBH_OK;
 800a49a:	2300      	movs	r3, #0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3708      	adds	r7, #8
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	70fb      	strb	r3, [r7, #3]
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a4ba:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a4bc:	78fb      	ldrb	r3, [r7, #3]
 800a4be:	68fa      	ldr	r2, [r7, #12]
 800a4c0:	212c      	movs	r1, #44	; 0x2c
 800a4c2:	fb01 f303 	mul.w	r3, r1, r3
 800a4c6:	4413      	add	r3, r2
 800a4c8:	333b      	adds	r3, #59	; 0x3b
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d009      	beq.n	800a4e4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a4d0:	78fb      	ldrb	r3, [r7, #3]
 800a4d2:	68fa      	ldr	r2, [r7, #12]
 800a4d4:	212c      	movs	r1, #44	; 0x2c
 800a4d6:	fb01 f303 	mul.w	r3, r1, r3
 800a4da:	4413      	add	r3, r2
 800a4dc:	3354      	adds	r3, #84	; 0x54
 800a4de:	78ba      	ldrb	r2, [r7, #2]
 800a4e0:	701a      	strb	r2, [r3, #0]
 800a4e2:	e008      	b.n	800a4f6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a4e4:	78fb      	ldrb	r3, [r7, #3]
 800a4e6:	68fa      	ldr	r2, [r7, #12]
 800a4e8:	212c      	movs	r1, #44	; 0x2c
 800a4ea:	fb01 f303 	mul.w	r3, r1, r3
 800a4ee:	4413      	add	r3, r2
 800a4f0:	3355      	adds	r3, #85	; 0x55
 800a4f2:	78ba      	ldrb	r2, [r7, #2]
 800a4f4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3714      	adds	r7, #20
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f7f7 ffd3 	bl	80024b8 <HAL_Delay>
}
 800a512:	bf00      	nop
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
	...

0800a51c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b085      	sub	sp, #20
 800a520:	af00      	add	r7, sp, #0
 800a522:	4603      	mov	r3, r0
 800a524:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a52a:	79fb      	ldrb	r3, [r7, #7]
 800a52c:	2b03      	cmp	r3, #3
 800a52e:	d817      	bhi.n	800a560 <USBH_Get_USB_Status+0x44>
 800a530:	a201      	add	r2, pc, #4	; (adr r2, 800a538 <USBH_Get_USB_Status+0x1c>)
 800a532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a536:	bf00      	nop
 800a538:	0800a549 	.word	0x0800a549
 800a53c:	0800a54f 	.word	0x0800a54f
 800a540:	0800a555 	.word	0x0800a555
 800a544:	0800a55b 	.word	0x0800a55b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a548:	2300      	movs	r3, #0
 800a54a:	73fb      	strb	r3, [r7, #15]
    break;
 800a54c:	e00b      	b.n	800a566 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a54e:	2302      	movs	r3, #2
 800a550:	73fb      	strb	r3, [r7, #15]
    break;
 800a552:	e008      	b.n	800a566 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a554:	2301      	movs	r3, #1
 800a556:	73fb      	strb	r3, [r7, #15]
    break;
 800a558:	e005      	b.n	800a566 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a55a:	2302      	movs	r3, #2
 800a55c:	73fb      	strb	r3, [r7, #15]
    break;
 800a55e:	e002      	b.n	800a566 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a560:	2302      	movs	r3, #2
 800a562:	73fb      	strb	r3, [r7, #15]
    break;
 800a564:	bf00      	nop
  }
  return usb_status;
 800a566:	7bfb      	ldrb	r3, [r7, #15]
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3714      	adds	r7, #20
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	4603      	mov	r3, r0
 800a57c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a57e:	79fb      	ldrb	r3, [r7, #7]
 800a580:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a582:	79fb      	ldrb	r3, [r7, #7]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d102      	bne.n	800a58e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a588:	2300      	movs	r3, #0
 800a58a:	73fb      	strb	r3, [r7, #15]
 800a58c:	e001      	b.n	800a592 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a58e:	2301      	movs	r3, #1
 800a590:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a592:	7bfb      	ldrb	r3, [r7, #15]
 800a594:	461a      	mov	r2, r3
 800a596:	2101      	movs	r1, #1
 800a598:	4803      	ldr	r0, [pc, #12]	; (800a5a8 <MX_DriverVbusFS+0x34>)
 800a59a:	f7f8 fa47 	bl	8002a2c <HAL_GPIO_WritePin>
}
 800a59e:	bf00      	nop
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	40020800 	.word	0x40020800

0800a5ac <__errno>:
 800a5ac:	4b01      	ldr	r3, [pc, #4]	; (800a5b4 <__errno+0x8>)
 800a5ae:	6818      	ldr	r0, [r3, #0]
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	2000002c 	.word	0x2000002c

0800a5b8 <__libc_init_array>:
 800a5b8:	b570      	push	{r4, r5, r6, lr}
 800a5ba:	4d0d      	ldr	r5, [pc, #52]	; (800a5f0 <__libc_init_array+0x38>)
 800a5bc:	4c0d      	ldr	r4, [pc, #52]	; (800a5f4 <__libc_init_array+0x3c>)
 800a5be:	1b64      	subs	r4, r4, r5
 800a5c0:	10a4      	asrs	r4, r4, #2
 800a5c2:	2600      	movs	r6, #0
 800a5c4:	42a6      	cmp	r6, r4
 800a5c6:	d109      	bne.n	800a5dc <__libc_init_array+0x24>
 800a5c8:	4d0b      	ldr	r5, [pc, #44]	; (800a5f8 <__libc_init_array+0x40>)
 800a5ca:	4c0c      	ldr	r4, [pc, #48]	; (800a5fc <__libc_init_array+0x44>)
 800a5cc:	f000 f92e 	bl	800a82c <_init>
 800a5d0:	1b64      	subs	r4, r4, r5
 800a5d2:	10a4      	asrs	r4, r4, #2
 800a5d4:	2600      	movs	r6, #0
 800a5d6:	42a6      	cmp	r6, r4
 800a5d8:	d105      	bne.n	800a5e6 <__libc_init_array+0x2e>
 800a5da:	bd70      	pop	{r4, r5, r6, pc}
 800a5dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5e0:	4798      	blx	r3
 800a5e2:	3601      	adds	r6, #1
 800a5e4:	e7ee      	b.n	800a5c4 <__libc_init_array+0xc>
 800a5e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5ea:	4798      	blx	r3
 800a5ec:	3601      	adds	r6, #1
 800a5ee:	e7f2      	b.n	800a5d6 <__libc_init_array+0x1e>
 800a5f0:	0800a868 	.word	0x0800a868
 800a5f4:	0800a868 	.word	0x0800a868
 800a5f8:	0800a868 	.word	0x0800a868
 800a5fc:	0800a86c 	.word	0x0800a86c

0800a600 <malloc>:
 800a600:	4b02      	ldr	r3, [pc, #8]	; (800a60c <malloc+0xc>)
 800a602:	4601      	mov	r1, r0
 800a604:	6818      	ldr	r0, [r3, #0]
 800a606:	f000 b87f 	b.w	800a708 <_malloc_r>
 800a60a:	bf00      	nop
 800a60c:	2000002c 	.word	0x2000002c

0800a610 <free>:
 800a610:	4b02      	ldr	r3, [pc, #8]	; (800a61c <free+0xc>)
 800a612:	4601      	mov	r1, r0
 800a614:	6818      	ldr	r0, [r3, #0]
 800a616:	f000 b80b 	b.w	800a630 <_free_r>
 800a61a:	bf00      	nop
 800a61c:	2000002c 	.word	0x2000002c

0800a620 <memset>:
 800a620:	4402      	add	r2, r0
 800a622:	4603      	mov	r3, r0
 800a624:	4293      	cmp	r3, r2
 800a626:	d100      	bne.n	800a62a <memset+0xa>
 800a628:	4770      	bx	lr
 800a62a:	f803 1b01 	strb.w	r1, [r3], #1
 800a62e:	e7f9      	b.n	800a624 <memset+0x4>

0800a630 <_free_r>:
 800a630:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a632:	2900      	cmp	r1, #0
 800a634:	d044      	beq.n	800a6c0 <_free_r+0x90>
 800a636:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a63a:	9001      	str	r0, [sp, #4]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f1a1 0404 	sub.w	r4, r1, #4
 800a642:	bfb8      	it	lt
 800a644:	18e4      	addlt	r4, r4, r3
 800a646:	f000 f8e3 	bl	800a810 <__malloc_lock>
 800a64a:	4a1e      	ldr	r2, [pc, #120]	; (800a6c4 <_free_r+0x94>)
 800a64c:	9801      	ldr	r0, [sp, #4]
 800a64e:	6813      	ldr	r3, [r2, #0]
 800a650:	b933      	cbnz	r3, 800a660 <_free_r+0x30>
 800a652:	6063      	str	r3, [r4, #4]
 800a654:	6014      	str	r4, [r2, #0]
 800a656:	b003      	add	sp, #12
 800a658:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a65c:	f000 b8de 	b.w	800a81c <__malloc_unlock>
 800a660:	42a3      	cmp	r3, r4
 800a662:	d908      	bls.n	800a676 <_free_r+0x46>
 800a664:	6825      	ldr	r5, [r4, #0]
 800a666:	1961      	adds	r1, r4, r5
 800a668:	428b      	cmp	r3, r1
 800a66a:	bf01      	itttt	eq
 800a66c:	6819      	ldreq	r1, [r3, #0]
 800a66e:	685b      	ldreq	r3, [r3, #4]
 800a670:	1949      	addeq	r1, r1, r5
 800a672:	6021      	streq	r1, [r4, #0]
 800a674:	e7ed      	b.n	800a652 <_free_r+0x22>
 800a676:	461a      	mov	r2, r3
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	b10b      	cbz	r3, 800a680 <_free_r+0x50>
 800a67c:	42a3      	cmp	r3, r4
 800a67e:	d9fa      	bls.n	800a676 <_free_r+0x46>
 800a680:	6811      	ldr	r1, [r2, #0]
 800a682:	1855      	adds	r5, r2, r1
 800a684:	42a5      	cmp	r5, r4
 800a686:	d10b      	bne.n	800a6a0 <_free_r+0x70>
 800a688:	6824      	ldr	r4, [r4, #0]
 800a68a:	4421      	add	r1, r4
 800a68c:	1854      	adds	r4, r2, r1
 800a68e:	42a3      	cmp	r3, r4
 800a690:	6011      	str	r1, [r2, #0]
 800a692:	d1e0      	bne.n	800a656 <_free_r+0x26>
 800a694:	681c      	ldr	r4, [r3, #0]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	6053      	str	r3, [r2, #4]
 800a69a:	4421      	add	r1, r4
 800a69c:	6011      	str	r1, [r2, #0]
 800a69e:	e7da      	b.n	800a656 <_free_r+0x26>
 800a6a0:	d902      	bls.n	800a6a8 <_free_r+0x78>
 800a6a2:	230c      	movs	r3, #12
 800a6a4:	6003      	str	r3, [r0, #0]
 800a6a6:	e7d6      	b.n	800a656 <_free_r+0x26>
 800a6a8:	6825      	ldr	r5, [r4, #0]
 800a6aa:	1961      	adds	r1, r4, r5
 800a6ac:	428b      	cmp	r3, r1
 800a6ae:	bf04      	itt	eq
 800a6b0:	6819      	ldreq	r1, [r3, #0]
 800a6b2:	685b      	ldreq	r3, [r3, #4]
 800a6b4:	6063      	str	r3, [r4, #4]
 800a6b6:	bf04      	itt	eq
 800a6b8:	1949      	addeq	r1, r1, r5
 800a6ba:	6021      	streq	r1, [r4, #0]
 800a6bc:	6054      	str	r4, [r2, #4]
 800a6be:	e7ca      	b.n	800a656 <_free_r+0x26>
 800a6c0:	b003      	add	sp, #12
 800a6c2:	bd30      	pop	{r4, r5, pc}
 800a6c4:	20000958 	.word	0x20000958

0800a6c8 <sbrk_aligned>:
 800a6c8:	b570      	push	{r4, r5, r6, lr}
 800a6ca:	4e0e      	ldr	r6, [pc, #56]	; (800a704 <sbrk_aligned+0x3c>)
 800a6cc:	460c      	mov	r4, r1
 800a6ce:	6831      	ldr	r1, [r6, #0]
 800a6d0:	4605      	mov	r5, r0
 800a6d2:	b911      	cbnz	r1, 800a6da <sbrk_aligned+0x12>
 800a6d4:	f000 f88c 	bl	800a7f0 <_sbrk_r>
 800a6d8:	6030      	str	r0, [r6, #0]
 800a6da:	4621      	mov	r1, r4
 800a6dc:	4628      	mov	r0, r5
 800a6de:	f000 f887 	bl	800a7f0 <_sbrk_r>
 800a6e2:	1c43      	adds	r3, r0, #1
 800a6e4:	d00a      	beq.n	800a6fc <sbrk_aligned+0x34>
 800a6e6:	1cc4      	adds	r4, r0, #3
 800a6e8:	f024 0403 	bic.w	r4, r4, #3
 800a6ec:	42a0      	cmp	r0, r4
 800a6ee:	d007      	beq.n	800a700 <sbrk_aligned+0x38>
 800a6f0:	1a21      	subs	r1, r4, r0
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	f000 f87c 	bl	800a7f0 <_sbrk_r>
 800a6f8:	3001      	adds	r0, #1
 800a6fa:	d101      	bne.n	800a700 <sbrk_aligned+0x38>
 800a6fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a700:	4620      	mov	r0, r4
 800a702:	bd70      	pop	{r4, r5, r6, pc}
 800a704:	2000095c 	.word	0x2000095c

0800a708 <_malloc_r>:
 800a708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a70c:	1ccd      	adds	r5, r1, #3
 800a70e:	f025 0503 	bic.w	r5, r5, #3
 800a712:	3508      	adds	r5, #8
 800a714:	2d0c      	cmp	r5, #12
 800a716:	bf38      	it	cc
 800a718:	250c      	movcc	r5, #12
 800a71a:	2d00      	cmp	r5, #0
 800a71c:	4607      	mov	r7, r0
 800a71e:	db01      	blt.n	800a724 <_malloc_r+0x1c>
 800a720:	42a9      	cmp	r1, r5
 800a722:	d905      	bls.n	800a730 <_malloc_r+0x28>
 800a724:	230c      	movs	r3, #12
 800a726:	603b      	str	r3, [r7, #0]
 800a728:	2600      	movs	r6, #0
 800a72a:	4630      	mov	r0, r6
 800a72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a730:	4e2e      	ldr	r6, [pc, #184]	; (800a7ec <_malloc_r+0xe4>)
 800a732:	f000 f86d 	bl	800a810 <__malloc_lock>
 800a736:	6833      	ldr	r3, [r6, #0]
 800a738:	461c      	mov	r4, r3
 800a73a:	bb34      	cbnz	r4, 800a78a <_malloc_r+0x82>
 800a73c:	4629      	mov	r1, r5
 800a73e:	4638      	mov	r0, r7
 800a740:	f7ff ffc2 	bl	800a6c8 <sbrk_aligned>
 800a744:	1c43      	adds	r3, r0, #1
 800a746:	4604      	mov	r4, r0
 800a748:	d14d      	bne.n	800a7e6 <_malloc_r+0xde>
 800a74a:	6834      	ldr	r4, [r6, #0]
 800a74c:	4626      	mov	r6, r4
 800a74e:	2e00      	cmp	r6, #0
 800a750:	d140      	bne.n	800a7d4 <_malloc_r+0xcc>
 800a752:	6823      	ldr	r3, [r4, #0]
 800a754:	4631      	mov	r1, r6
 800a756:	4638      	mov	r0, r7
 800a758:	eb04 0803 	add.w	r8, r4, r3
 800a75c:	f000 f848 	bl	800a7f0 <_sbrk_r>
 800a760:	4580      	cmp	r8, r0
 800a762:	d13a      	bne.n	800a7da <_malloc_r+0xd2>
 800a764:	6821      	ldr	r1, [r4, #0]
 800a766:	3503      	adds	r5, #3
 800a768:	1a6d      	subs	r5, r5, r1
 800a76a:	f025 0503 	bic.w	r5, r5, #3
 800a76e:	3508      	adds	r5, #8
 800a770:	2d0c      	cmp	r5, #12
 800a772:	bf38      	it	cc
 800a774:	250c      	movcc	r5, #12
 800a776:	4629      	mov	r1, r5
 800a778:	4638      	mov	r0, r7
 800a77a:	f7ff ffa5 	bl	800a6c8 <sbrk_aligned>
 800a77e:	3001      	adds	r0, #1
 800a780:	d02b      	beq.n	800a7da <_malloc_r+0xd2>
 800a782:	6823      	ldr	r3, [r4, #0]
 800a784:	442b      	add	r3, r5
 800a786:	6023      	str	r3, [r4, #0]
 800a788:	e00e      	b.n	800a7a8 <_malloc_r+0xa0>
 800a78a:	6822      	ldr	r2, [r4, #0]
 800a78c:	1b52      	subs	r2, r2, r5
 800a78e:	d41e      	bmi.n	800a7ce <_malloc_r+0xc6>
 800a790:	2a0b      	cmp	r2, #11
 800a792:	d916      	bls.n	800a7c2 <_malloc_r+0xba>
 800a794:	1961      	adds	r1, r4, r5
 800a796:	42a3      	cmp	r3, r4
 800a798:	6025      	str	r5, [r4, #0]
 800a79a:	bf18      	it	ne
 800a79c:	6059      	strne	r1, [r3, #4]
 800a79e:	6863      	ldr	r3, [r4, #4]
 800a7a0:	bf08      	it	eq
 800a7a2:	6031      	streq	r1, [r6, #0]
 800a7a4:	5162      	str	r2, [r4, r5]
 800a7a6:	604b      	str	r3, [r1, #4]
 800a7a8:	4638      	mov	r0, r7
 800a7aa:	f104 060b 	add.w	r6, r4, #11
 800a7ae:	f000 f835 	bl	800a81c <__malloc_unlock>
 800a7b2:	f026 0607 	bic.w	r6, r6, #7
 800a7b6:	1d23      	adds	r3, r4, #4
 800a7b8:	1af2      	subs	r2, r6, r3
 800a7ba:	d0b6      	beq.n	800a72a <_malloc_r+0x22>
 800a7bc:	1b9b      	subs	r3, r3, r6
 800a7be:	50a3      	str	r3, [r4, r2]
 800a7c0:	e7b3      	b.n	800a72a <_malloc_r+0x22>
 800a7c2:	6862      	ldr	r2, [r4, #4]
 800a7c4:	42a3      	cmp	r3, r4
 800a7c6:	bf0c      	ite	eq
 800a7c8:	6032      	streq	r2, [r6, #0]
 800a7ca:	605a      	strne	r2, [r3, #4]
 800a7cc:	e7ec      	b.n	800a7a8 <_malloc_r+0xa0>
 800a7ce:	4623      	mov	r3, r4
 800a7d0:	6864      	ldr	r4, [r4, #4]
 800a7d2:	e7b2      	b.n	800a73a <_malloc_r+0x32>
 800a7d4:	4634      	mov	r4, r6
 800a7d6:	6876      	ldr	r6, [r6, #4]
 800a7d8:	e7b9      	b.n	800a74e <_malloc_r+0x46>
 800a7da:	230c      	movs	r3, #12
 800a7dc:	603b      	str	r3, [r7, #0]
 800a7de:	4638      	mov	r0, r7
 800a7e0:	f000 f81c 	bl	800a81c <__malloc_unlock>
 800a7e4:	e7a1      	b.n	800a72a <_malloc_r+0x22>
 800a7e6:	6025      	str	r5, [r4, #0]
 800a7e8:	e7de      	b.n	800a7a8 <_malloc_r+0xa0>
 800a7ea:	bf00      	nop
 800a7ec:	20000958 	.word	0x20000958

0800a7f0 <_sbrk_r>:
 800a7f0:	b538      	push	{r3, r4, r5, lr}
 800a7f2:	4d06      	ldr	r5, [pc, #24]	; (800a80c <_sbrk_r+0x1c>)
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	4608      	mov	r0, r1
 800a7fa:	602b      	str	r3, [r5, #0]
 800a7fc:	f7f7 fd78 	bl	80022f0 <_sbrk>
 800a800:	1c43      	adds	r3, r0, #1
 800a802:	d102      	bne.n	800a80a <_sbrk_r+0x1a>
 800a804:	682b      	ldr	r3, [r5, #0]
 800a806:	b103      	cbz	r3, 800a80a <_sbrk_r+0x1a>
 800a808:	6023      	str	r3, [r4, #0]
 800a80a:	bd38      	pop	{r3, r4, r5, pc}
 800a80c:	20000960 	.word	0x20000960

0800a810 <__malloc_lock>:
 800a810:	4801      	ldr	r0, [pc, #4]	; (800a818 <__malloc_lock+0x8>)
 800a812:	f000 b809 	b.w	800a828 <__retarget_lock_acquire_recursive>
 800a816:	bf00      	nop
 800a818:	20000964 	.word	0x20000964

0800a81c <__malloc_unlock>:
 800a81c:	4801      	ldr	r0, [pc, #4]	; (800a824 <__malloc_unlock+0x8>)
 800a81e:	f000 b804 	b.w	800a82a <__retarget_lock_release_recursive>
 800a822:	bf00      	nop
 800a824:	20000964 	.word	0x20000964

0800a828 <__retarget_lock_acquire_recursive>:
 800a828:	4770      	bx	lr

0800a82a <__retarget_lock_release_recursive>:
 800a82a:	4770      	bx	lr

0800a82c <_init>:
 800a82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82e:	bf00      	nop
 800a830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a832:	bc08      	pop	{r3}
 800a834:	469e      	mov	lr, r3
 800a836:	4770      	bx	lr

0800a838 <_fini>:
 800a838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a83a:	bf00      	nop
 800a83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a83e:	bc08      	pop	{r3}
 800a840:	469e      	mov	lr, r3
 800a842:	4770      	bx	lr
