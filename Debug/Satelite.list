
Satelite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad3c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800aed4  0800aed4  0001aed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aef8  0800aef8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800aef8  0800aef8  0001aef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af00  0800af00  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af00  0800af00  0001af00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af04  0800af04  0001af04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800af08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000938  20000090  0800af98  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009c8  0800af98  000209c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a92a  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f47  00000000  00000000  0003a9ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  0003e938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003fd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019777  00000000  00000000  00041038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bfbb  00000000  00000000  0005a7af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091313  00000000  00000000  0007676a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107a7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057fc  00000000  00000000  00107ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800aebc 	.word	0x0800aebc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	0800aebc 	.word	0x0800aebc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_ldivmod>:
 8000a14:	b97b      	cbnz	r3, 8000a36 <__aeabi_ldivmod+0x22>
 8000a16:	b972      	cbnz	r2, 8000a36 <__aeabi_ldivmod+0x22>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bfbe      	ittt	lt
 8000a1c:	2000      	movlt	r0, #0
 8000a1e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000a22:	e006      	blt.n	8000a32 <__aeabi_ldivmod+0x1e>
 8000a24:	bf08      	it	eq
 8000a26:	2800      	cmpeq	r0, #0
 8000a28:	bf1c      	itt	ne
 8000a2a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000a2e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a32:	f000 b9bf 	b.w	8000db4 <__aeabi_idiv0>
 8000a36:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a3a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a3e:	2900      	cmp	r1, #0
 8000a40:	db09      	blt.n	8000a56 <__aeabi_ldivmod+0x42>
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	db1a      	blt.n	8000a7c <__aeabi_ldivmod+0x68>
 8000a46:	f000 f84d 	bl	8000ae4 <__udivmoddi4>
 8000a4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a52:	b004      	add	sp, #16
 8000a54:	4770      	bx	lr
 8000a56:	4240      	negs	r0, r0
 8000a58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db1b      	blt.n	8000a98 <__aeabi_ldivmod+0x84>
 8000a60:	f000 f840 	bl	8000ae4 <__udivmoddi4>
 8000a64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a6c:	b004      	add	sp, #16
 8000a6e:	4240      	negs	r0, r0
 8000a70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a74:	4252      	negs	r2, r2
 8000a76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a7a:	4770      	bx	lr
 8000a7c:	4252      	negs	r2, r2
 8000a7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a82:	f000 f82f 	bl	8000ae4 <__udivmoddi4>
 8000a86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a8e:	b004      	add	sp, #16
 8000a90:	4240      	negs	r0, r0
 8000a92:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a96:	4770      	bx	lr
 8000a98:	4252      	negs	r2, r2
 8000a9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a9e:	f000 f821 	bl	8000ae4 <__udivmoddi4>
 8000aa2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aaa:	b004      	add	sp, #16
 8000aac:	4252      	negs	r2, r2
 8000aae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_uldivmod>:
 8000ab4:	b953      	cbnz	r3, 8000acc <__aeabi_uldivmod+0x18>
 8000ab6:	b94a      	cbnz	r2, 8000acc <__aeabi_uldivmod+0x18>
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	bf08      	it	eq
 8000abc:	2800      	cmpeq	r0, #0
 8000abe:	bf1c      	itt	ne
 8000ac0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ac4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac8:	f000 b974 	b.w	8000db4 <__aeabi_idiv0>
 8000acc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad4:	f000 f806 	bl	8000ae4 <__udivmoddi4>
 8000ad8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae0:	b004      	add	sp, #16
 8000ae2:	4770      	bx	lr

08000ae4 <__udivmoddi4>:
 8000ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae8:	9d08      	ldr	r5, [sp, #32]
 8000aea:	4604      	mov	r4, r0
 8000aec:	468e      	mov	lr, r1
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d14d      	bne.n	8000b8e <__udivmoddi4+0xaa>
 8000af2:	428a      	cmp	r2, r1
 8000af4:	4694      	mov	ip, r2
 8000af6:	d969      	bls.n	8000bcc <__udivmoddi4+0xe8>
 8000af8:	fab2 f282 	clz	r2, r2
 8000afc:	b152      	cbz	r2, 8000b14 <__udivmoddi4+0x30>
 8000afe:	fa01 f302 	lsl.w	r3, r1, r2
 8000b02:	f1c2 0120 	rsb	r1, r2, #32
 8000b06:	fa20 f101 	lsr.w	r1, r0, r1
 8000b0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b12:	4094      	lsls	r4, r2
 8000b14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b18:	0c21      	lsrs	r1, r4, #16
 8000b1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b1e:	fa1f f78c 	uxth.w	r7, ip
 8000b22:	fb08 e316 	mls	r3, r8, r6, lr
 8000b26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b2a:	fb06 f107 	mul.w	r1, r6, r7
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	d90a      	bls.n	8000b48 <__udivmoddi4+0x64>
 8000b32:	eb1c 0303 	adds.w	r3, ip, r3
 8000b36:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b3a:	f080 811f 	bcs.w	8000d7c <__udivmoddi4+0x298>
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	f240 811c 	bls.w	8000d7c <__udivmoddi4+0x298>
 8000b44:	3e02      	subs	r6, #2
 8000b46:	4463      	add	r3, ip
 8000b48:	1a5b      	subs	r3, r3, r1
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b50:	fb08 3310 	mls	r3, r8, r0, r3
 8000b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b58:	fb00 f707 	mul.w	r7, r0, r7
 8000b5c:	42a7      	cmp	r7, r4
 8000b5e:	d90a      	bls.n	8000b76 <__udivmoddi4+0x92>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b68:	f080 810a 	bcs.w	8000d80 <__udivmoddi4+0x29c>
 8000b6c:	42a7      	cmp	r7, r4
 8000b6e:	f240 8107 	bls.w	8000d80 <__udivmoddi4+0x29c>
 8000b72:	4464      	add	r4, ip
 8000b74:	3802      	subs	r0, #2
 8000b76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7a:	1be4      	subs	r4, r4, r7
 8000b7c:	2600      	movs	r6, #0
 8000b7e:	b11d      	cbz	r5, 8000b88 <__udivmoddi4+0xa4>
 8000b80:	40d4      	lsrs	r4, r2
 8000b82:	2300      	movs	r3, #0
 8000b84:	e9c5 4300 	strd	r4, r3, [r5]
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	428b      	cmp	r3, r1
 8000b90:	d909      	bls.n	8000ba6 <__udivmoddi4+0xc2>
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	f000 80ef 	beq.w	8000d76 <__udivmoddi4+0x292>
 8000b98:	2600      	movs	r6, #0
 8000b9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b9e:	4630      	mov	r0, r6
 8000ba0:	4631      	mov	r1, r6
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	fab3 f683 	clz	r6, r3
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	d14a      	bne.n	8000c44 <__udivmoddi4+0x160>
 8000bae:	428b      	cmp	r3, r1
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xd4>
 8000bb2:	4282      	cmp	r2, r0
 8000bb4:	f200 80f9 	bhi.w	8000daa <__udivmoddi4+0x2c6>
 8000bb8:	1a84      	subs	r4, r0, r2
 8000bba:	eb61 0303 	sbc.w	r3, r1, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	469e      	mov	lr, r3
 8000bc2:	2d00      	cmp	r5, #0
 8000bc4:	d0e0      	beq.n	8000b88 <__udivmoddi4+0xa4>
 8000bc6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bca:	e7dd      	b.n	8000b88 <__udivmoddi4+0xa4>
 8000bcc:	b902      	cbnz	r2, 8000bd0 <__udivmoddi4+0xec>
 8000bce:	deff      	udf	#255	; 0xff
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	2a00      	cmp	r2, #0
 8000bd6:	f040 8092 	bne.w	8000cfe <__udivmoddi4+0x21a>
 8000bda:	eba1 010c 	sub.w	r1, r1, ip
 8000bde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000be2:	fa1f fe8c 	uxth.w	lr, ip
 8000be6:	2601      	movs	r6, #1
 8000be8:	0c20      	lsrs	r0, r4, #16
 8000bea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bee:	fb07 1113 	mls	r1, r7, r3, r1
 8000bf2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bf6:	fb0e f003 	mul.w	r0, lr, r3
 8000bfa:	4288      	cmp	r0, r1
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x12c>
 8000bfe:	eb1c 0101 	adds.w	r1, ip, r1
 8000c02:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x12a>
 8000c08:	4288      	cmp	r0, r1
 8000c0a:	f200 80cb 	bhi.w	8000da4 <__udivmoddi4+0x2c0>
 8000c0e:	4643      	mov	r3, r8
 8000c10:	1a09      	subs	r1, r1, r0
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c18:	fb07 1110 	mls	r1, r7, r0, r1
 8000c1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c20:	fb0e fe00 	mul.w	lr, lr, r0
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d908      	bls.n	8000c3a <__udivmoddi4+0x156>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c30:	d202      	bcs.n	8000c38 <__udivmoddi4+0x154>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f200 80bb 	bhi.w	8000dae <__udivmoddi4+0x2ca>
 8000c38:	4608      	mov	r0, r1
 8000c3a:	eba4 040e 	sub.w	r4, r4, lr
 8000c3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c42:	e79c      	b.n	8000b7e <__udivmoddi4+0x9a>
 8000c44:	f1c6 0720 	rsb	r7, r6, #32
 8000c48:	40b3      	lsls	r3, r6
 8000c4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c52:	fa20 f407 	lsr.w	r4, r0, r7
 8000c56:	fa01 f306 	lsl.w	r3, r1, r6
 8000c5a:	431c      	orrs	r4, r3
 8000c5c:	40f9      	lsrs	r1, r7
 8000c5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c62:	fa00 f306 	lsl.w	r3, r0, r6
 8000c66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c6a:	0c20      	lsrs	r0, r4, #16
 8000c6c:	fa1f fe8c 	uxth.w	lr, ip
 8000c70:	fb09 1118 	mls	r1, r9, r8, r1
 8000c74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c78:	fb08 f00e 	mul.w	r0, r8, lr
 8000c7c:	4288      	cmp	r0, r1
 8000c7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b8>
 8000c84:	eb1c 0101 	adds.w	r1, ip, r1
 8000c88:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c8c:	f080 8088 	bcs.w	8000da0 <__udivmoddi4+0x2bc>
 8000c90:	4288      	cmp	r0, r1
 8000c92:	f240 8085 	bls.w	8000da0 <__udivmoddi4+0x2bc>
 8000c96:	f1a8 0802 	sub.w	r8, r8, #2
 8000c9a:	4461      	add	r1, ip
 8000c9c:	1a09      	subs	r1, r1, r0
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ca4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ca8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb0:	458e      	cmp	lr, r1
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1e2>
 8000cb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000cbc:	d26c      	bcs.n	8000d98 <__udivmoddi4+0x2b4>
 8000cbe:	458e      	cmp	lr, r1
 8000cc0:	d96a      	bls.n	8000d98 <__udivmoddi4+0x2b4>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	4461      	add	r1, ip
 8000cc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cca:	fba0 9402 	umull	r9, r4, r0, r2
 8000cce:	eba1 010e 	sub.w	r1, r1, lr
 8000cd2:	42a1      	cmp	r1, r4
 8000cd4:	46c8      	mov	r8, r9
 8000cd6:	46a6      	mov	lr, r4
 8000cd8:	d356      	bcc.n	8000d88 <__udivmoddi4+0x2a4>
 8000cda:	d053      	beq.n	8000d84 <__udivmoddi4+0x2a0>
 8000cdc:	b15d      	cbz	r5, 8000cf6 <__udivmoddi4+0x212>
 8000cde:	ebb3 0208 	subs.w	r2, r3, r8
 8000ce2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ce6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cea:	fa22 f306 	lsr.w	r3, r2, r6
 8000cee:	40f1      	lsrs	r1, r6
 8000cf0:	431f      	orrs	r7, r3
 8000cf2:	e9c5 7100 	strd	r7, r1, [r5]
 8000cf6:	2600      	movs	r6, #0
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	f1c2 0320 	rsb	r3, r2, #32
 8000d02:	40d8      	lsrs	r0, r3
 8000d04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d08:	fa21 f303 	lsr.w	r3, r1, r3
 8000d0c:	4091      	lsls	r1, r2
 8000d0e:	4301      	orrs	r1, r0
 8000d10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d14:	fa1f fe8c 	uxth.w	lr, ip
 8000d18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d20:	0c0b      	lsrs	r3, r1, #16
 8000d22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d26:	fb00 f60e 	mul.w	r6, r0, lr
 8000d2a:	429e      	cmp	r6, r3
 8000d2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x260>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d3a:	d22f      	bcs.n	8000d9c <__udivmoddi4+0x2b8>
 8000d3c:	429e      	cmp	r6, r3
 8000d3e:	d92d      	bls.n	8000d9c <__udivmoddi4+0x2b8>
 8000d40:	3802      	subs	r0, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	1b9b      	subs	r3, r3, r6
 8000d46:	b289      	uxth	r1, r1
 8000d48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb06 f30e 	mul.w	r3, r6, lr
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x28a>
 8000d5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d60:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d64:	d216      	bcs.n	8000d94 <__udivmoddi4+0x2b0>
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d914      	bls.n	8000d94 <__udivmoddi4+0x2b0>
 8000d6a:	3e02      	subs	r6, #2
 8000d6c:	4461      	add	r1, ip
 8000d6e:	1ac9      	subs	r1, r1, r3
 8000d70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d74:	e738      	b.n	8000be8 <__udivmoddi4+0x104>
 8000d76:	462e      	mov	r6, r5
 8000d78:	4628      	mov	r0, r5
 8000d7a:	e705      	b.n	8000b88 <__udivmoddi4+0xa4>
 8000d7c:	4606      	mov	r6, r0
 8000d7e:	e6e3      	b.n	8000b48 <__udivmoddi4+0x64>
 8000d80:	4618      	mov	r0, r3
 8000d82:	e6f8      	b.n	8000b76 <__udivmoddi4+0x92>
 8000d84:	454b      	cmp	r3, r9
 8000d86:	d2a9      	bcs.n	8000cdc <__udivmoddi4+0x1f8>
 8000d88:	ebb9 0802 	subs.w	r8, r9, r2
 8000d8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d90:	3801      	subs	r0, #1
 8000d92:	e7a3      	b.n	8000cdc <__udivmoddi4+0x1f8>
 8000d94:	4646      	mov	r6, r8
 8000d96:	e7ea      	b.n	8000d6e <__udivmoddi4+0x28a>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	e794      	b.n	8000cc6 <__udivmoddi4+0x1e2>
 8000d9c:	4640      	mov	r0, r8
 8000d9e:	e7d1      	b.n	8000d44 <__udivmoddi4+0x260>
 8000da0:	46d0      	mov	r8, sl
 8000da2:	e77b      	b.n	8000c9c <__udivmoddi4+0x1b8>
 8000da4:	3b02      	subs	r3, #2
 8000da6:	4461      	add	r1, ip
 8000da8:	e732      	b.n	8000c10 <__udivmoddi4+0x12c>
 8000daa:	4630      	mov	r0, r6
 8000dac:	e709      	b.n	8000bc2 <__udivmoddi4+0xde>
 8000dae:	4464      	add	r4, ip
 8000db0:	3802      	subs	r0, #2
 8000db2:	e742      	b.n	8000c3a <__udivmoddi4+0x156>

08000db4 <__aeabi_idiv0>:
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

08000db8 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08c      	sub	sp, #48	; 0x30
 8000dbc:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dc2:	9302      	str	r3, [sp, #8]
 8000dc4:	2319      	movs	r3, #25
 8000dc6:	9301      	str	r3, [sp, #4]
 8000dc8:	463b      	mov	r3, r7
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2301      	movs	r3, #1
 8000dce:	2288      	movs	r2, #136	; 0x88
 8000dd0:	21ec      	movs	r1, #236	; 0xec
 8000dd2:	4857      	ldr	r0, [pc, #348]	; (8000f30 <TrimRead+0x178>)
 8000dd4:	f003 ffd4 	bl	8004d80 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8000dd8:	463b      	mov	r3, r7
 8000dda:	3319      	adds	r3, #25
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000de0:	9202      	str	r2, [sp, #8]
 8000de2:	2207      	movs	r2, #7
 8000de4:	9201      	str	r2, [sp, #4]
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2301      	movs	r3, #1
 8000dea:	22e1      	movs	r2, #225	; 0xe1
 8000dec:	21ec      	movs	r1, #236	; 0xec
 8000dee:	4850      	ldr	r0, [pc, #320]	; (8000f30 <TrimRead+0x178>)
 8000df0:	f003 ffc6 	bl	8004d80 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8000df4:	787b      	ldrb	r3, [r7, #1]
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	783b      	ldrb	r3, [r7, #0]
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	4b4b      	ldr	r3, [pc, #300]	; (8000f34 <TrimRead+0x17c>)
 8000e06:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8000e08:	78fb      	ldrb	r3, [r7, #3]
 8000e0a:	021b      	lsls	r3, r3, #8
 8000e0c:	b21a      	sxth	r2, r3
 8000e0e:	78bb      	ldrb	r3, [r7, #2]
 8000e10:	b21b      	sxth	r3, r3
 8000e12:	4313      	orrs	r3, r2
 8000e14:	b21a      	sxth	r2, r3
 8000e16:	4b48      	ldr	r3, [pc, #288]	; (8000f38 <TrimRead+0x180>)
 8000e18:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8000e1a:	797b      	ldrb	r3, [r7, #5]
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	b21a      	sxth	r2, r3
 8000e20:	793b      	ldrb	r3, [r7, #4]
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	4313      	orrs	r3, r2
 8000e26:	b21a      	sxth	r2, r3
 8000e28:	4b44      	ldr	r3, [pc, #272]	; (8000f3c <TrimRead+0x184>)
 8000e2a:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	797b      	ldrb	r3, [r7, #5]
 8000e34:	b21b      	sxth	r3, r3
 8000e36:	4313      	orrs	r3, r2
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	4b40      	ldr	r3, [pc, #256]	; (8000f40 <TrimRead+0x188>)
 8000e3e:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8000e40:	7a7b      	ldrb	r3, [r7, #9]
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	b21a      	sxth	r2, r3
 8000e46:	79bb      	ldrb	r3, [r7, #6]
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	4b3d      	ldr	r3, [pc, #244]	; (8000f44 <TrimRead+0x18c>)
 8000e50:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8000e52:	7afb      	ldrb	r3, [r7, #11]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	7abb      	ldrb	r3, [r7, #10]
 8000e5a:	b21b      	sxth	r3, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b21a      	sxth	r2, r3
 8000e60:	4b39      	ldr	r3, [pc, #228]	; (8000f48 <TrimRead+0x190>)
 8000e62:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8000e64:	7b7b      	ldrb	r3, [r7, #13]
 8000e66:	021b      	lsls	r3, r3, #8
 8000e68:	b21a      	sxth	r2, r3
 8000e6a:	7b3b      	ldrb	r3, [r7, #12]
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	b21a      	sxth	r2, r3
 8000e72:	4b36      	ldr	r3, [pc, #216]	; (8000f4c <TrimRead+0x194>)
 8000e74:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	b21a      	sxth	r2, r3
 8000e7c:	7bbb      	ldrb	r3, [r7, #14]
 8000e7e:	b21b      	sxth	r3, r3
 8000e80:	4313      	orrs	r3, r2
 8000e82:	b21a      	sxth	r2, r3
 8000e84:	4b32      	ldr	r3, [pc, #200]	; (8000f50 <TrimRead+0x198>)
 8000e86:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8000e88:	7c7b      	ldrb	r3, [r7, #17]
 8000e8a:	021b      	lsls	r3, r3, #8
 8000e8c:	b21a      	sxth	r2, r3
 8000e8e:	7c3b      	ldrb	r3, [r7, #16]
 8000e90:	b21b      	sxth	r3, r3
 8000e92:	4313      	orrs	r3, r2
 8000e94:	b21a      	sxth	r2, r3
 8000e96:	4b2f      	ldr	r3, [pc, #188]	; (8000f54 <TrimRead+0x19c>)
 8000e98:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8000e9a:	7cfb      	ldrb	r3, [r7, #19]
 8000e9c:	021b      	lsls	r3, r3, #8
 8000e9e:	b21a      	sxth	r2, r3
 8000ea0:	7cbb      	ldrb	r3, [r7, #18]
 8000ea2:	b21b      	sxth	r3, r3
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b21a      	sxth	r2, r3
 8000ea8:	4b2b      	ldr	r3, [pc, #172]	; (8000f58 <TrimRead+0x1a0>)
 8000eaa:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8000eac:	7d7b      	ldrb	r3, [r7, #21]
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	b21a      	sxth	r2, r3
 8000eb2:	7d3b      	ldrb	r3, [r7, #20]
 8000eb4:	b21b      	sxth	r3, r3
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	b21a      	sxth	r2, r3
 8000eba:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <TrimRead+0x1a4>)
 8000ebc:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8000ebe:	7dfb      	ldrb	r3, [r7, #23]
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	b21a      	sxth	r2, r3
 8000ec4:	7dbb      	ldrb	r3, [r7, #22]
 8000ec6:	b21b      	sxth	r3, r3
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	b21a      	sxth	r2, r3
 8000ecc:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <TrimRead+0x1a8>)
 8000ece:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8000ed0:	7e3b      	ldrb	r3, [r7, #24]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <TrimRead+0x1ac>)
 8000ed6:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8000ed8:	7ebb      	ldrb	r3, [r7, #26]
 8000eda:	021b      	lsls	r3, r3, #8
 8000edc:	b21a      	sxth	r2, r3
 8000ede:	7e7b      	ldrb	r3, [r7, #25]
 8000ee0:	b21b      	sxth	r3, r3
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	b21a      	sxth	r2, r3
 8000ee6:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <TrimRead+0x1b0>)
 8000ee8:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8000eea:	7efb      	ldrb	r3, [r7, #27]
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <TrimRead+0x1b4>)
 8000ef0:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8000ef2:	7f3b      	ldrb	r3, [r7, #28]
 8000ef4:	011b      	lsls	r3, r3, #4
 8000ef6:	b21a      	sxth	r2, r3
 8000ef8:	7f7b      	ldrb	r3, [r7, #29]
 8000efa:	b21b      	sxth	r3, r3
 8000efc:	f003 030f 	and.w	r3, r3, #15
 8000f00:	b21b      	sxth	r3, r3
 8000f02:	4313      	orrs	r3, r2
 8000f04:	b21a      	sxth	r2, r3
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <TrimRead+0x1b8>)
 8000f08:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8000f0a:	7fbb      	ldrb	r3, [r7, #30]
 8000f0c:	011b      	lsls	r3, r3, #4
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	7f7b      	ldrb	r3, [r7, #29]
 8000f12:	091b      	lsrs	r3, r3, #4
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b21a      	sxth	r2, r3
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <TrimRead+0x1bc>)
 8000f1e:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8000f20:	7ffb      	ldrb	r3, [r7, #31]
 8000f22:	b21a      	sxth	r2, r3
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <TrimRead+0x1c0>)
 8000f26:	801a      	strh	r2, [r3, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200000e4 	.word	0x200000e4
 8000f34:	200000bc 	.word	0x200000bc
 8000f38:	200000c4 	.word	0x200000c4
 8000f3c:	200000c6 	.word	0x200000c6
 8000f40:	200000be 	.word	0x200000be
 8000f44:	200000c8 	.word	0x200000c8
 8000f48:	200000ca 	.word	0x200000ca
 8000f4c:	200000cc 	.word	0x200000cc
 8000f50:	200000ce 	.word	0x200000ce
 8000f54:	200000d0 	.word	0x200000d0
 8000f58:	200000d2 	.word	0x200000d2
 8000f5c:	200000d4 	.word	0x200000d4
 8000f60:	200000d6 	.word	0x200000d6
 8000f64:	200000c0 	.word	0x200000c0
 8000f68:	200000d8 	.word	0x200000d8
 8000f6c:	200000c2 	.word	0x200000c2
 8000f70:	200000da 	.word	0x200000da
 8000f74:	200000dc 	.word	0x200000dc
 8000f78:	200000de 	.word	0x200000de

08000f7c <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af04      	add	r7, sp, #16
 8000f82:	4604      	mov	r4, r0
 8000f84:	4608      	mov	r0, r1
 8000f86:	4611      	mov	r1, r2
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4623      	mov	r3, r4
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71bb      	strb	r3, [r7, #6]
 8000f92:	460b      	mov	r3, r1
 8000f94:	717b      	strb	r3, [r7, #5]
 8000f96:	4613      	mov	r3, r2
 8000f98:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8000f9a:	f7ff ff0d 	bl	8000db8 <TrimRead>


	uint8_t datatowrite = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8000fa6:	23b6      	movs	r3, #182	; 0xb6
 8000fa8:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	f107 030f 	add.w	r3, r7, #15
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	22e0      	movs	r2, #224	; 0xe0
 8000fbe:	21ec      	movs	r1, #236	; 0xec
 8000fc0:	4858      	ldr	r0, [pc, #352]	; (8001124 <BME280_Config+0x1a8>)
 8000fc2:	f003 fde3 	bl	8004b8c <HAL_I2C_Mem_Write>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <BME280_Config+0x56>
	{
		return -1;
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fd0:	e0a3      	b.n	800111a <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 8000fd2:	2064      	movs	r0, #100	; 0x64
 8000fd4:	f001 face 	bl	8002574 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8000fd8:	797b      	ldrb	r3, [r7, #5]
 8000fda:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe0:	9302      	str	r3, [sp, #8]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	9301      	str	r3, [sp, #4]
 8000fe6:	f107 030f 	add.w	r3, r7, #15
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2301      	movs	r3, #1
 8000fee:	22f2      	movs	r2, #242	; 0xf2
 8000ff0:	21ec      	movs	r1, #236	; 0xec
 8000ff2:	484c      	ldr	r0, [pc, #304]	; (8001124 <BME280_Config+0x1a8>)
 8000ff4:	f003 fdca 	bl	8004b8c <HAL_I2C_Mem_Write>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d002      	beq.n	8001004 <BME280_Config+0x88>
	{
		return -1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001002:	e08a      	b.n	800111a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001004:	2064      	movs	r0, #100	; 0x64
 8001006:	f001 fab5 	bl	8002574 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 800100a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100e:	9302      	str	r3, [sp, #8]
 8001010:	2301      	movs	r3, #1
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	f107 030e 	add.w	r3, r7, #14
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2301      	movs	r3, #1
 800101c:	22f2      	movs	r2, #242	; 0xf2
 800101e:	21ec      	movs	r1, #236	; 0xec
 8001020:	4840      	ldr	r0, [pc, #256]	; (8001124 <BME280_Config+0x1a8>)
 8001022:	f003 fead 	bl	8004d80 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001026:	7bba      	ldrb	r2, [r7, #14]
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	429a      	cmp	r2, r3
 800102c:	d002      	beq.n	8001034 <BME280_Config+0xb8>
	{
		return -1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001032:	e072      	b.n	800111a <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001034:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001038:	015b      	lsls	r3, r3, #5
 800103a:	b25a      	sxtb	r2, r3
 800103c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	b25b      	sxtb	r3, r3
 8001044:	4313      	orrs	r3, r2
 8001046:	b25b      	sxtb	r3, r3
 8001048:	b2db      	uxtb	r3, r3
 800104a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800104c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	2301      	movs	r3, #1
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	f107 030f 	add.w	r3, r7, #15
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	22f5      	movs	r2, #245	; 0xf5
 8001060:	21ec      	movs	r1, #236	; 0xec
 8001062:	4830      	ldr	r0, [pc, #192]	; (8001124 <BME280_Config+0x1a8>)
 8001064:	f003 fd92 	bl	8004b8c <HAL_I2C_Mem_Write>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <BME280_Config+0xf8>
	{
		return -1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001072:	e052      	b.n	800111a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001074:	2064      	movs	r0, #100	; 0x64
 8001076:	f001 fa7d 	bl	8002574 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 800107a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107e:	9302      	str	r3, [sp, #8]
 8001080:	2301      	movs	r3, #1
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	f107 030e 	add.w	r3, r7, #14
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2301      	movs	r3, #1
 800108c:	22f5      	movs	r2, #245	; 0xf5
 800108e:	21ec      	movs	r1, #236	; 0xec
 8001090:	4824      	ldr	r0, [pc, #144]	; (8001124 <BME280_Config+0x1a8>)
 8001092:	f003 fe75 	bl	8004d80 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001096:	7bba      	ldrb	r2, [r7, #14]
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	429a      	cmp	r2, r3
 800109c:	d002      	beq.n	80010a4 <BME280_Config+0x128>
	{
		return -1;
 800109e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010a2:	e03a      	b.n	800111a <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	015b      	lsls	r3, r3, #5
 80010a8:	b25a      	sxtb	r2, r3
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b25a      	sxtb	r2, r3
 80010b4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b25b      	sxtb	r3, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80010c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	2301      	movs	r3, #1
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	f107 030f 	add.w	r3, r7, #15
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	22f4      	movs	r2, #244	; 0xf4
 80010d4:	21ec      	movs	r1, #236	; 0xec
 80010d6:	4813      	ldr	r0, [pc, #76]	; (8001124 <BME280_Config+0x1a8>)
 80010d8:	f003 fd58 	bl	8004b8c <HAL_I2C_Mem_Write>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d002      	beq.n	80010e8 <BME280_Config+0x16c>
	{
		return -1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010e6:	e018      	b.n	800111a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80010e8:	2064      	movs	r0, #100	; 0x64
 80010ea:	f001 fa43 	bl	8002574 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80010ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	2301      	movs	r3, #1
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	f107 030e 	add.w	r3, r7, #14
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2301      	movs	r3, #1
 8001100:	22f4      	movs	r2, #244	; 0xf4
 8001102:	21ec      	movs	r1, #236	; 0xec
 8001104:	4807      	ldr	r0, [pc, #28]	; (8001124 <BME280_Config+0x1a8>)
 8001106:	f003 fe3b 	bl	8004d80 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800110a:	7bba      	ldrb	r2, [r7, #14]
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	429a      	cmp	r2, r3
 8001110:	d002      	beq.n	8001118 <BME280_Config+0x19c>
	{
		return -1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001116:	e000      	b.n	800111a <BME280_Config+0x19e>
	}

	return 0;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	bd90      	pop	{r4, r7, pc}
 8001122:	bf00      	nop
 8001124:	200000e4 	.word	0x200000e4

08001128 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800112e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001132:	9302      	str	r3, [sp, #8]
 8001134:	2301      	movs	r3, #1
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <BMEReadRaw+0x8c>)
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2301      	movs	r3, #1
 800113e:	22d0      	movs	r2, #208	; 0xd0
 8001140:	21ec      	movs	r1, #236	; 0xec
 8001142:	481d      	ldr	r0, [pc, #116]	; (80011b8 <BMEReadRaw+0x90>)
 8001144:	f003 fe1c 	bl	8004d80 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001148:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <BMEReadRaw+0x8c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b60      	cmp	r3, #96	; 0x60
 800114e:	d12a      	bne.n	80011a6 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001154:	9302      	str	r3, [sp, #8]
 8001156:	2308      	movs	r3, #8
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	463b      	mov	r3, r7
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2301      	movs	r3, #1
 8001160:	22f7      	movs	r2, #247	; 0xf7
 8001162:	21ec      	movs	r1, #236	; 0xec
 8001164:	4814      	ldr	r0, [pc, #80]	; (80011b8 <BMEReadRaw+0x90>)
 8001166:	f003 fe0b 	bl	8004d80 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800116a:	783b      	ldrb	r3, [r7, #0]
 800116c:	031a      	lsls	r2, r3, #12
 800116e:	787b      	ldrb	r3, [r7, #1]
 8001170:	011b      	lsls	r3, r3, #4
 8001172:	4313      	orrs	r3, r2
 8001174:	78ba      	ldrb	r2, [r7, #2]
 8001176:	0912      	lsrs	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	4313      	orrs	r3, r2
 800117c:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <BMEReadRaw+0x94>)
 800117e:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	031a      	lsls	r2, r3, #12
 8001184:	793b      	ldrb	r3, [r7, #4]
 8001186:	011b      	lsls	r3, r3, #4
 8001188:	4313      	orrs	r3, r2
 800118a:	797a      	ldrb	r2, [r7, #5]
 800118c:	0912      	lsrs	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	4313      	orrs	r3, r2
 8001192:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <BMEReadRaw+0x98>)
 8001194:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001196:	79bb      	ldrb	r3, [r7, #6]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	79fa      	ldrb	r2, [r7, #7]
 800119c:	4313      	orrs	r3, r2
 800119e:	4a09      	ldr	r2, [pc, #36]	; (80011c4 <BMEReadRaw+0x9c>)
 80011a0:	6013      	str	r3, [r2, #0]

		return 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e001      	b.n	80011aa <BMEReadRaw+0x82>
	}

	else return -1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200000ac 	.word	0x200000ac
 80011b8:	200000e4 	.word	0x200000e4
 80011bc:	200000b4 	.word	0x200000b4
 80011c0:	200000b0 	.word	0x200000b0
 80011c4:	200000b8 	.word	0x200000b8

080011c8 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	10da      	asrs	r2, r3, #3
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <BME280_compensate_T_int32+0x74>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	4a18      	ldr	r2, [pc, #96]	; (8001240 <BME280_compensate_T_int32+0x78>)
 80011de:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011e2:	fb02 f303 	mul.w	r3, r2, r3
 80011e6:	12db      	asrs	r3, r3, #11
 80011e8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	111b      	asrs	r3, r3, #4
 80011ee:	4a13      	ldr	r2, [pc, #76]	; (800123c <BME280_compensate_T_int32+0x74>)
 80011f0:	8812      	ldrh	r2, [r2, #0]
 80011f2:	1a9b      	subs	r3, r3, r2
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	1112      	asrs	r2, r2, #4
 80011f8:	4910      	ldr	r1, [pc, #64]	; (800123c <BME280_compensate_T_int32+0x74>)
 80011fa:	8809      	ldrh	r1, [r1, #0]
 80011fc:	1a52      	subs	r2, r2, r1
 80011fe:	fb02 f303 	mul.w	r3, r2, r3
 8001202:	131b      	asrs	r3, r3, #12
 8001204:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <BME280_compensate_T_int32+0x7c>)
 8001206:	f9b2 2000 	ldrsh.w	r2, [r2]
 800120a:	fb02 f303 	mul.w	r3, r2, r3
 800120e:	139b      	asrs	r3, r3, #14
 8001210:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4413      	add	r3, r2
 8001218:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <BME280_compensate_T_int32+0x80>)
 800121a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <BME280_compensate_T_int32+0x80>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	3380      	adds	r3, #128	; 0x80
 8001228:	121b      	asrs	r3, r3, #8
 800122a:	60fb      	str	r3, [r7, #12]
	return T;
 800122c:	68fb      	ldr	r3, [r7, #12]
}
 800122e:	4618      	mov	r0, r3
 8001230:	371c      	adds	r7, #28
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	200000bc 	.word	0x200000bc
 8001240:	200000c4 	.word	0x200000c4
 8001244:	200000c6 	.word	0x200000c6
 8001248:	200000e0 	.word	0x200000e0

0800124c <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 800124c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001250:	b0ca      	sub	sp, #296	; 0x128
 8001252:	af00      	add	r7, sp, #0
 8001254:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001258:	4baf      	ldr	r3, [pc, #700]	; (8001518 <BME280_compensate_P_int64+0x2cc>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	17da      	asrs	r2, r3, #31
 800125e:	461c      	mov	r4, r3
 8001260:	4615      	mov	r5, r2
 8001262:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001266:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 800126a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800126e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001272:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001276:	fb03 f102 	mul.w	r1, r3, r2
 800127a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800127e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001282:	fb02 f303 	mul.w	r3, r2, r3
 8001286:	18ca      	adds	r2, r1, r3
 8001288:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800128c:	fba3 8903 	umull	r8, r9, r3, r3
 8001290:	eb02 0309 	add.w	r3, r2, r9
 8001294:	4699      	mov	r9, r3
 8001296:	4ba1      	ldr	r3, [pc, #644]	; (800151c <BME280_compensate_P_int64+0x2d0>)
 8001298:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129c:	b21b      	sxth	r3, r3
 800129e:	17da      	asrs	r2, r3, #31
 80012a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80012a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80012a8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80012ac:	4603      	mov	r3, r0
 80012ae:	fb03 f209 	mul.w	r2, r3, r9
 80012b2:	460b      	mov	r3, r1
 80012b4:	fb08 f303 	mul.w	r3, r8, r3
 80012b8:	4413      	add	r3, r2
 80012ba:	4602      	mov	r2, r0
 80012bc:	fba8 1202 	umull	r1, r2, r8, r2
 80012c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80012c4:	460a      	mov	r2, r1
 80012c6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80012ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80012ce:	4413      	add	r3, r2
 80012d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80012d4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80012d8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80012dc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80012e0:	4b8f      	ldr	r3, [pc, #572]	; (8001520 <BME280_compensate_P_int64+0x2d4>)
 80012e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	17da      	asrs	r2, r3, #31
 80012ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80012ee:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80012f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012f6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80012fa:	462a      	mov	r2, r5
 80012fc:	fb02 f203 	mul.w	r2, r2, r3
 8001300:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001304:	4621      	mov	r1, r4
 8001306:	fb01 f303 	mul.w	r3, r1, r3
 800130a:	441a      	add	r2, r3
 800130c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001310:	4621      	mov	r1, r4
 8001312:	fba3 1301 	umull	r1, r3, r3, r1
 8001316:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800131a:	460b      	mov	r3, r1
 800131c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001324:	18d3      	adds	r3, r2, r3
 8001326:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800132a:	f04f 0000 	mov.w	r0, #0
 800132e:	f04f 0100 	mov.w	r1, #0
 8001332:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001336:	462b      	mov	r3, r5
 8001338:	0459      	lsls	r1, r3, #17
 800133a:	4623      	mov	r3, r4
 800133c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001340:	4623      	mov	r3, r4
 8001342:	0458      	lsls	r0, r3, #17
 8001344:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001348:	1814      	adds	r4, r2, r0
 800134a:	643c      	str	r4, [r7, #64]	; 0x40
 800134c:	414b      	adcs	r3, r1
 800134e:	647b      	str	r3, [r7, #68]	; 0x44
 8001350:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001354:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001358:	4b72      	ldr	r3, [pc, #456]	; (8001524 <BME280_compensate_P_int64+0x2d8>)
 800135a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135e:	b21b      	sxth	r3, r3
 8001360:	17da      	asrs	r2, r3, #31
 8001362:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001366:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800136a:	f04f 0000 	mov.w	r0, #0
 800136e:	f04f 0100 	mov.w	r1, #0
 8001372:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001376:	00d9      	lsls	r1, r3, #3
 8001378:	2000      	movs	r0, #0
 800137a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800137e:	1814      	adds	r4, r2, r0
 8001380:	63bc      	str	r4, [r7, #56]	; 0x38
 8001382:	414b      	adcs	r3, r1
 8001384:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001386:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800138a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800138e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001392:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001396:	fb03 f102 	mul.w	r1, r3, r2
 800139a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800139e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013a2:	fb02 f303 	mul.w	r3, r2, r3
 80013a6:	18ca      	adds	r2, r1, r3
 80013a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013ac:	fba3 1303 	umull	r1, r3, r3, r3
 80013b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80013b4:	460b      	mov	r3, r1
 80013b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80013ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80013be:	18d3      	adds	r3, r2, r3
 80013c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80013c4:	4b58      	ldr	r3, [pc, #352]	; (8001528 <BME280_compensate_P_int64+0x2dc>)
 80013c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	17da      	asrs	r2, r3, #31
 80013ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80013d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80013d6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80013da:	462b      	mov	r3, r5
 80013dc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80013e0:	4642      	mov	r2, r8
 80013e2:	fb02 f203 	mul.w	r2, r2, r3
 80013e6:	464b      	mov	r3, r9
 80013e8:	4621      	mov	r1, r4
 80013ea:	fb01 f303 	mul.w	r3, r1, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	4622      	mov	r2, r4
 80013f2:	4641      	mov	r1, r8
 80013f4:	fba2 1201 	umull	r1, r2, r2, r1
 80013f8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80013fc:	460a      	mov	r2, r1
 80013fe:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001402:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001406:	4413      	add	r3, r2
 8001408:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800140c:	f04f 0000 	mov.w	r0, #0
 8001410:	f04f 0100 	mov.w	r1, #0
 8001414:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001418:	4623      	mov	r3, r4
 800141a:	0a18      	lsrs	r0, r3, #8
 800141c:	462b      	mov	r3, r5
 800141e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001422:	462b      	mov	r3, r5
 8001424:	1219      	asrs	r1, r3, #8
 8001426:	4b41      	ldr	r3, [pc, #260]	; (800152c <BME280_compensate_P_int64+0x2e0>)
 8001428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142c:	b21b      	sxth	r3, r3
 800142e:	17da      	asrs	r2, r3, #31
 8001430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001434:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001438:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800143c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001440:	464a      	mov	r2, r9
 8001442:	fb02 f203 	mul.w	r2, r2, r3
 8001446:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800144a:	4644      	mov	r4, r8
 800144c:	fb04 f303 	mul.w	r3, r4, r3
 8001450:	441a      	add	r2, r3
 8001452:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001456:	4644      	mov	r4, r8
 8001458:	fba3 4304 	umull	r4, r3, r3, r4
 800145c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001460:	4623      	mov	r3, r4
 8001462:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001466:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800146a:	18d3      	adds	r3, r2, r3
 800146c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800147c:	464c      	mov	r4, r9
 800147e:	0323      	lsls	r3, r4, #12
 8001480:	4644      	mov	r4, r8
 8001482:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001486:	4644      	mov	r4, r8
 8001488:	0322      	lsls	r2, r4, #12
 800148a:	1884      	adds	r4, r0, r2
 800148c:	633c      	str	r4, [r7, #48]	; 0x30
 800148e:	eb41 0303 	adc.w	r3, r1, r3
 8001492:	637b      	str	r3, [r7, #52]	; 0x34
 8001494:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001498:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 800149c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80014a0:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80014a4:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80014a8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80014ac:	4b20      	ldr	r3, [pc, #128]	; (8001530 <BME280_compensate_P_int64+0x2e4>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	2200      	movs	r2, #0
 80014b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80014b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80014bc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80014c0:	462b      	mov	r3, r5
 80014c2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80014c6:	4642      	mov	r2, r8
 80014c8:	fb02 f203 	mul.w	r2, r2, r3
 80014cc:	464b      	mov	r3, r9
 80014ce:	4621      	mov	r1, r4
 80014d0:	fb01 f303 	mul.w	r3, r1, r3
 80014d4:	4413      	add	r3, r2
 80014d6:	4622      	mov	r2, r4
 80014d8:	4641      	mov	r1, r8
 80014da:	fba2 1201 	umull	r1, r2, r2, r1
 80014de:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80014e2:	460a      	mov	r2, r1
 80014e4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80014e8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80014ec:	4413      	add	r3, r2
 80014ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80014fe:	4629      	mov	r1, r5
 8001500:	104a      	asrs	r2, r1, #1
 8001502:	4629      	mov	r1, r5
 8001504:	17cb      	asrs	r3, r1, #31
 8001506:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 800150a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800150e:	4313      	orrs	r3, r2
 8001510:	d110      	bne.n	8001534 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001512:	2300      	movs	r3, #0
 8001514:	e154      	b.n	80017c0 <BME280_compensate_P_int64+0x574>
 8001516:	bf00      	nop
 8001518:	200000e0 	.word	0x200000e0
 800151c:	200000d0 	.word	0x200000d0
 8001520:	200000ce 	.word	0x200000ce
 8001524:	200000cc 	.word	0x200000cc
 8001528:	200000ca 	.word	0x200000ca
 800152c:	200000c8 	.word	0x200000c8
 8001530:	200000be 	.word	0x200000be
	}
	p = 1048576-adc_P;
 8001534:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001538:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800153c:	17da      	asrs	r2, r3, #31
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001540:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001542:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001546:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800154a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800154e:	105b      	asrs	r3, r3, #1
 8001550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001554:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001558:	07db      	lsls	r3, r3, #31
 800155a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800155e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001562:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001566:	4621      	mov	r1, r4
 8001568:	1a89      	subs	r1, r1, r2
 800156a:	67b9      	str	r1, [r7, #120]	; 0x78
 800156c:	4629      	mov	r1, r5
 800156e:	eb61 0303 	sbc.w	r3, r1, r3
 8001572:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001574:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001578:	4622      	mov	r2, r4
 800157a:	462b      	mov	r3, r5
 800157c:	1891      	adds	r1, r2, r2
 800157e:	6239      	str	r1, [r7, #32]
 8001580:	415b      	adcs	r3, r3
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
 8001584:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001588:	4621      	mov	r1, r4
 800158a:	1851      	adds	r1, r2, r1
 800158c:	61b9      	str	r1, [r7, #24]
 800158e:	4629      	mov	r1, r5
 8001590:	414b      	adcs	r3, r1
 8001592:	61fb      	str	r3, [r7, #28]
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80015a0:	4649      	mov	r1, r9
 80015a2:	018b      	lsls	r3, r1, #6
 80015a4:	4641      	mov	r1, r8
 80015a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015aa:	4641      	mov	r1, r8
 80015ac:	018a      	lsls	r2, r1, #6
 80015ae:	4641      	mov	r1, r8
 80015b0:	1889      	adds	r1, r1, r2
 80015b2:	6139      	str	r1, [r7, #16]
 80015b4:	4649      	mov	r1, r9
 80015b6:	eb43 0101 	adc.w	r1, r3, r1
 80015ba:	6179      	str	r1, [r7, #20]
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80015c8:	4649      	mov	r1, r9
 80015ca:	008b      	lsls	r3, r1, #2
 80015cc:	4641      	mov	r1, r8
 80015ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015d2:	4641      	mov	r1, r8
 80015d4:	008a      	lsls	r2, r1, #2
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	4603      	mov	r3, r0
 80015dc:	4622      	mov	r2, r4
 80015de:	189b      	adds	r3, r3, r2
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	460b      	mov	r3, r1
 80015e4:	462a      	mov	r2, r5
 80015e6:	eb42 0303 	adc.w	r3, r2, r3
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80015f8:	4649      	mov	r1, r9
 80015fa:	008b      	lsls	r3, r1, #2
 80015fc:	4641      	mov	r1, r8
 80015fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001602:	4641      	mov	r1, r8
 8001604:	008a      	lsls	r2, r1, #2
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	4603      	mov	r3, r0
 800160c:	4622      	mov	r2, r4
 800160e:	189b      	adds	r3, r3, r2
 8001610:	673b      	str	r3, [r7, #112]	; 0x70
 8001612:	462b      	mov	r3, r5
 8001614:	460a      	mov	r2, r1
 8001616:	eb42 0303 	adc.w	r3, r2, r3
 800161a:	677b      	str	r3, [r7, #116]	; 0x74
 800161c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001620:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001624:	f7ff f9f6 	bl	8000a14 <__aeabi_ldivmod>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001630:	4b66      	ldr	r3, [pc, #408]	; (80017cc <BME280_compensate_P_int64+0x580>)
 8001632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001636:	b21b      	sxth	r3, r3
 8001638:	17da      	asrs	r2, r3, #31
 800163a:	66bb      	str	r3, [r7, #104]	; 0x68
 800163c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800163e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001642:	f04f 0000 	mov.w	r0, #0
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	0b50      	lsrs	r0, r2, #13
 800164c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001650:	1359      	asrs	r1, r3, #13
 8001652:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001656:	462b      	mov	r3, r5
 8001658:	fb00 f203 	mul.w	r2, r0, r3
 800165c:	4623      	mov	r3, r4
 800165e:	fb03 f301 	mul.w	r3, r3, r1
 8001662:	4413      	add	r3, r2
 8001664:	4622      	mov	r2, r4
 8001666:	fba2 1200 	umull	r1, r2, r2, r0
 800166a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800166e:	460a      	mov	r2, r1
 8001670:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001674:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001678:	4413      	add	r3, r2
 800167a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800167e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001682:	f04f 0000 	mov.w	r0, #0
 8001686:	f04f 0100 	mov.w	r1, #0
 800168a:	0b50      	lsrs	r0, r2, #13
 800168c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001690:	1359      	asrs	r1, r3, #13
 8001692:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001696:	462b      	mov	r3, r5
 8001698:	fb00 f203 	mul.w	r2, r0, r3
 800169c:	4623      	mov	r3, r4
 800169e:	fb03 f301 	mul.w	r3, r3, r1
 80016a2:	4413      	add	r3, r2
 80016a4:	4622      	mov	r2, r4
 80016a6:	fba2 1200 	umull	r1, r2, r2, r0
 80016aa:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80016ae:	460a      	mov	r2, r1
 80016b0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80016b4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80016b8:	4413      	add	r3, r2
 80016ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80016ca:	4621      	mov	r1, r4
 80016cc:	0e4a      	lsrs	r2, r1, #25
 80016ce:	4629      	mov	r1, r5
 80016d0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80016d4:	4629      	mov	r1, r5
 80016d6:	164b      	asrs	r3, r1, #25
 80016d8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80016dc:	4b3c      	ldr	r3, [pc, #240]	; (80017d0 <BME280_compensate_P_int64+0x584>)
 80016de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	17da      	asrs	r2, r3, #31
 80016e6:	663b      	str	r3, [r7, #96]	; 0x60
 80016e8:	667a      	str	r2, [r7, #100]	; 0x64
 80016ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016ee:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80016f2:	462a      	mov	r2, r5
 80016f4:	fb02 f203 	mul.w	r2, r2, r3
 80016f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016fc:	4621      	mov	r1, r4
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	4413      	add	r3, r2
 8001704:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001708:	4621      	mov	r1, r4
 800170a:	fba2 1201 	umull	r1, r2, r2, r1
 800170e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001712:	460a      	mov	r2, r1
 8001714:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001718:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800171c:	4413      	add	r3, r2
 800171e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800172e:	4621      	mov	r1, r4
 8001730:	0cca      	lsrs	r2, r1, #19
 8001732:	4629      	mov	r1, r5
 8001734:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001738:	4629      	mov	r1, r5
 800173a:	14cb      	asrs	r3, r1, #19
 800173c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001740:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001744:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001748:	1884      	adds	r4, r0, r2
 800174a:	65bc      	str	r4, [r7, #88]	; 0x58
 800174c:	eb41 0303 	adc.w	r3, r1, r3
 8001750:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001752:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001756:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800175a:	4621      	mov	r1, r4
 800175c:	1889      	adds	r1, r1, r2
 800175e:	6539      	str	r1, [r7, #80]	; 0x50
 8001760:	4629      	mov	r1, r5
 8001762:	eb43 0101 	adc.w	r1, r3, r1
 8001766:	6579      	str	r1, [r7, #84]	; 0x54
 8001768:	f04f 0000 	mov.w	r0, #0
 800176c:	f04f 0100 	mov.w	r1, #0
 8001770:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001774:	4623      	mov	r3, r4
 8001776:	0a18      	lsrs	r0, r3, #8
 8001778:	462b      	mov	r3, r5
 800177a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800177e:	462b      	mov	r3, r5
 8001780:	1219      	asrs	r1, r3, #8
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <BME280_compensate_P_int64+0x588>)
 8001784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001788:	b21b      	sxth	r3, r3
 800178a:	17da      	asrs	r2, r3, #31
 800178c:	64bb      	str	r3, [r7, #72]	; 0x48
 800178e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800179c:	464c      	mov	r4, r9
 800179e:	0123      	lsls	r3, r4, #4
 80017a0:	4644      	mov	r4, r8
 80017a2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80017a6:	4644      	mov	r4, r8
 80017a8:	0122      	lsls	r2, r4, #4
 80017aa:	1884      	adds	r4, r0, r2
 80017ac:	603c      	str	r4, [r7, #0]
 80017ae:	eb41 0303 	adc.w	r3, r1, r3
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017b8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 80017bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80017c6:	46bd      	mov	sp, r7
 80017c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017cc:	200000d6 	.word	0x200000d6
 80017d0:	200000d4 	.word	0x200000d4
 80017d4:	200000d2 	.word	0x200000d2

080017d8 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 80017e0:	4b2c      	ldr	r3, [pc, #176]	; (8001894 <bme280_compensate_H_int32+0xbc>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80017e8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	039a      	lsls	r2, r3, #14
 80017ee:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <bme280_compensate_H_int32+0xc0>)
 80017f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f4:	051b      	lsls	r3, r3, #20
 80017f6:	1ad2      	subs	r2, r2, r3
 80017f8:	4b28      	ldr	r3, [pc, #160]	; (800189c <bme280_compensate_H_int32+0xc4>)
 80017fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017fe:	4619      	mov	r1, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	fb01 f303 	mul.w	r3, r1, r3
 8001806:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001808:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800180c:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 800180e:	4a24      	ldr	r2, [pc, #144]	; (80018a0 <bme280_compensate_H_int32+0xc8>)
 8001810:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001814:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 800181c:	1292      	asrs	r2, r2, #10
 800181e:	4921      	ldr	r1, [pc, #132]	; (80018a4 <bme280_compensate_H_int32+0xcc>)
 8001820:	8809      	ldrh	r1, [r1, #0]
 8001822:	4608      	mov	r0, r1
 8001824:	68f9      	ldr	r1, [r7, #12]
 8001826:	fb00 f101 	mul.w	r1, r0, r1
 800182a:	12c9      	asrs	r1, r1, #11
 800182c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001830:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001834:	1292      	asrs	r2, r2, #10
 8001836:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800183a:	491b      	ldr	r1, [pc, #108]	; (80018a8 <bme280_compensate_H_int32+0xd0>)
 800183c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001840:	fb01 f202 	mul.w	r2, r1, r2
 8001844:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001848:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 800184a:	fb02 f303 	mul.w	r3, r2, r3
 800184e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	13db      	asrs	r3, r3, #15
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	13d2      	asrs	r2, r2, #15
 8001858:	fb02 f303 	mul.w	r3, r2, r3
 800185c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 800185e:	4a13      	ldr	r2, [pc, #76]	; (80018ac <bme280_compensate_H_int32+0xd4>)
 8001860:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001862:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001866:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001874:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 800187c:	bfa8      	it	ge
 800187e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001882:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	131b      	asrs	r3, r3, #12
}
 8001888:	4618      	mov	r0, r3
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	200000e0 	.word	0x200000e0
 8001898:	200000da 	.word	0x200000da
 800189c:	200000dc 	.word	0x200000dc
 80018a0:	200000de 	.word	0x200000de
 80018a4:	200000c2 	.word	0x200000c2
 80018a8:	200000d8 	.word	0x200000d8
 80018ac:	200000c0 	.word	0x200000c0

080018b0 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 80018b4:	f7ff fc38 	bl	8001128 <BMEReadRaw>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d163      	bne.n	8001986 <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 80018be:	4b39      	ldr	r3, [pc, #228]	; (80019a4 <BME280_Measure+0xf4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80018c6:	d104      	bne.n	80018d2 <BME280_Measure+0x22>
 80018c8:	4b37      	ldr	r3, [pc, #220]	; (80019a8 <BME280_Measure+0xf8>)
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	e016      	b.n	8001900 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 80018d2:	4b34      	ldr	r3, [pc, #208]	; (80019a4 <BME280_Measure+0xf4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fc76 	bl	80011c8 <BME280_compensate_T_int32>
 80018dc:	4603      	mov	r3, r0
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fdcc 	bl	800047c <__aeabi_i2d>
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	4b30      	ldr	r3, [pc, #192]	; (80019ac <BME280_Measure+0xfc>)
 80018ea:	f7fe ff5b 	bl	80007a4 <__aeabi_ddiv>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f7ff f83d 	bl	8000974 <__aeabi_d2f>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4a2a      	ldr	r2, [pc, #168]	; (80019a8 <BME280_Measure+0xf8>)
 80018fe:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001900:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <BME280_Measure+0x100>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001908:	d104      	bne.n	8001914 <BME280_Measure+0x64>
 800190a:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <BME280_Measure+0x104>)
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	e016      	b.n	8001942 <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001914:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <BME280_Measure+0x100>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fc97 	bl	800124c <BME280_compensate_P_int64>
 800191e:	4603      	mov	r3, r0
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fd9b 	bl	800045c <__aeabi_ui2d>
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <BME280_Measure+0x108>)
 800192c:	f7fe ff3a 	bl	80007a4 <__aeabi_ddiv>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	f7ff f81c 	bl	8000974 <__aeabi_d2f>
 800193c:	4603      	mov	r3, r0
 800193e:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <BME280_Measure+0x104>)
 8001940:	6013      	str	r3, [r2, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001942:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <BME280_Measure+0x10c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800194a:	d104      	bne.n	8001956 <BME280_Measure+0xa6>
 800194c:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <BME280_Measure+0x110>)
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001954:	e023      	b.n	800199e <BME280_Measure+0xee>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001956:	4b19      	ldr	r3, [pc, #100]	; (80019bc <BME280_Measure+0x10c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ff3c 	bl	80017d8 <bme280_compensate_H_int32>
 8001960:	4603      	mov	r3, r0
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fd7a 	bl	800045c <__aeabi_ui2d>
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <BME280_Measure+0x114>)
 800196e:	f7fe ff19 	bl	80007a4 <__aeabi_ddiv>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	f7fe fffb 	bl	8000974 <__aeabi_d2f>
 800197e:	4603      	mov	r3, r0
 8001980:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <BME280_Measure+0x110>)
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	e00b      	b.n	800199e <BME280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <BME280_Measure+0x110>)
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <BME280_Measure+0x110>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <BME280_Measure+0x104>)
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <BME280_Measure+0x104>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a03      	ldr	r2, [pc, #12]	; (80019a8 <BME280_Measure+0xf8>)
 800199c:	6013      	str	r3, [r2, #0]
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200000b0 	.word	0x200000b0
 80019a8:	200002c4 	.word	0x200002c4
 80019ac:	40590000 	.word	0x40590000
 80019b0:	200000b4 	.word	0x200000b4
 80019b4:	200002c8 	.word	0x200002c8
 80019b8:	40700000 	.word	0x40700000
 80019bc:	200000b8 	.word	0x200000b8
 80019c0:	200002cc 	.word	0x200002cc
 80019c4:	40900000 	.word	0x40900000

080019c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ce:	f000 fd5f 	bl	8002490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019d2:	f000 f839 	bl	8001a48 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80019d6:	f000 f89f 	bl	8001b18 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 80019da:	2304      	movs	r3, #4
 80019dc:	9301      	str	r3, [sp, #4]
 80019de:	2300      	movs	r3, #0
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	2303      	movs	r3, #3
 80019e4:	2201      	movs	r2, #1
 80019e6:	2105      	movs	r1, #5
 80019e8:	2002      	movs	r0, #2
 80019ea:	f7ff fac7 	bl	8000f7c <BME280_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ee:	f000 f9bf 	bl	8001d70 <MX_GPIO_Init>
  MX_DMA_Init();
 80019f2:	f000 f99d 	bl	8001d30 <MX_DMA_Init>
  MX_I2C1_Init();
 80019f6:	f000 f8af 	bl	8001b58 <MX_I2C1_Init>
  MX_I2S2_Init();
 80019fa:	f000 f8db 	bl	8001bb4 <MX_I2S2_Init>
  MX_I2S3_Init();
 80019fe:	f000 f907 	bl	8001c10 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001a02:	f000 f935 	bl	8001c70 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001a06:	f008 fe11 	bl	800a62c <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8001a0a:	f000 f967 	bl	8001cdc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_I2C_IsDeviceReady(&hi2c1, 0xEC, 2, 10) == HAL_OK){
 8001a0e:	230a      	movs	r3, #10
 8001a10:	2202      	movs	r2, #2
 8001a12:	21ec      	movs	r1, #236	; 0xec
 8001a14:	480a      	ldr	r0, [pc, #40]	; (8001a40 <main+0x78>)
 8001a16:	f003 fbd9 	bl	80051cc <HAL_I2C_IsDeviceReady>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d105      	bne.n	8001a2c <main+0x64>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001a20:	2201      	movs	r2, #1
 8001a22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a26:	4807      	ldr	r0, [pc, #28]	; (8001a44 <main+0x7c>)
 8001a28:	f001 fb48 	bl	80030bc <HAL_GPIO_WritePin>
//	  HAL_Delay(500);
//	  printf("Hello count = %d", count++);
//	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
//	  HAL_Delay(500);
//
	  BME280_Measure();
 8001a2c:	f7ff ff40 	bl	80018b0 <BME280_Measure>
	  HAL_Delay(500);
 8001a30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a34:	f000 fd9e 	bl	8002574 <HAL_Delay>
//	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
//	  HAL_Delay(500);


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001a38:	f008 fe1e 	bl	800a678 <MX_USB_HOST_Process>
	  BME280_Measure();
 8001a3c:	e7f6      	b.n	8001a2c <main+0x64>
 8001a3e:	bf00      	nop
 8001a40:	200000e4 	.word	0x200000e4
 8001a44:	40020c00 	.word	0x40020c00

08001a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b094      	sub	sp, #80	; 0x50
 8001a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a4e:	f107 0320 	add.w	r3, r7, #32
 8001a52:	2230      	movs	r2, #48	; 0x30
 8001a54:	2100      	movs	r1, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	f009 f92a 	bl	800acb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <SystemClock_Config+0xc8>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	4a26      	ldr	r2, [pc, #152]	; (8001b10 <SystemClock_Config+0xc8>)
 8001a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7c:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <SystemClock_Config+0xc8>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a88:	2300      	movs	r3, #0
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <SystemClock_Config+0xcc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a20      	ldr	r2, [pc, #128]	; (8001b14 <SystemClock_Config+0xcc>)
 8001a92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <SystemClock_Config+0xcc>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ab2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ab8:	2304      	movs	r3, #4
 8001aba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001abc:	2348      	movs	r3, #72	; 0x48
 8001abe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac8:	f107 0320 	add.w	r3, r7, #32
 8001acc:	4618      	mov	r0, r3
 8001ace:	f004 fca7 	bl	8006420 <HAL_RCC_OscConfig>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ad8:	f000 fa24 	bl	8001f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001adc:	230f      	movs	r3, #15
 8001ade:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001af2:	f107 030c 	add.w	r3, r7, #12
 8001af6:	2102      	movs	r1, #2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f004 ff09 	bl	8006910 <HAL_RCC_ClockConfig>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b04:	f000 fa0e 	bl	8001f24 <Error_Handler>
  }
}
 8001b08:	bf00      	nop
 8001b0a:	3750      	adds	r7, #80	; 0x50
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40007000 	.word	0x40007000

08001b18 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b1e:	463b      	mov	r3, r7
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
 8001b2c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001b32:	23c8      	movs	r3, #200	; 0xc8
 8001b34:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001b36:	2305      	movs	r3, #5
 8001b38:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b3e:	463b      	mov	r3, r7
 8001b40:	4618      	mov	r0, r3
 8001b42:	f005 f905 	bl	8006d50 <HAL_RCCEx_PeriphCLKConfig>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001b4c:	f000 f9ea 	bl	8001f24 <Error_Handler>
  }
}
 8001b50:	bf00      	nop
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <MX_I2C1_Init+0x50>)
 8001b5e:	4a13      	ldr	r2, [pc, #76]	; (8001bac <MX_I2C1_Init+0x54>)
 8001b60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <MX_I2C1_Init+0x50>)
 8001b64:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <MX_I2C1_Init+0x58>)
 8001b66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <MX_I2C1_Init+0x50>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <MX_I2C1_Init+0x50>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <MX_I2C1_Init+0x50>)
 8001b76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <MX_I2C1_Init+0x50>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <MX_I2C1_Init+0x50>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b88:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <MX_I2C1_Init+0x50>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <MX_I2C1_Init+0x50>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b94:	4804      	ldr	r0, [pc, #16]	; (8001ba8 <MX_I2C1_Init+0x50>)
 8001b96:	f002 feb5 	bl	8004904 <HAL_I2C_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ba0:	f000 f9c0 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	200000e4 	.word	0x200000e4
 8001bac:	40005400 	.word	0x40005400
 8001bb0:	000186a0 	.word	0x000186a0

08001bb4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <MX_I2S2_Init+0x50>)
 8001bba:	4a13      	ldr	r2, [pc, #76]	; (8001c08 <MX_I2S2_Init+0x54>)
 8001bbc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001bbe:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <MX_I2S2_Init+0x50>)
 8001bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <MX_I2S2_Init+0x50>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <MX_I2S2_Init+0x50>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <MX_I2S2_Init+0x50>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <MX_I2S2_Init+0x50>)
 8001bda:	4a0c      	ldr	r2, [pc, #48]	; (8001c0c <MX_I2S2_Init+0x58>)
 8001bdc:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <MX_I2S2_Init+0x50>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001be4:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <MX_I2S2_Init+0x50>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <MX_I2S2_Init+0x50>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001bf0:	4804      	ldr	r0, [pc, #16]	; (8001c04 <MX_I2S2_Init+0x50>)
 8001bf2:	f003 ff75 	bl	8005ae0 <HAL_I2S_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8001bfc:	f000 f992 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000138 	.word	0x20000138
 8001c08:	40003800 	.word	0x40003800
 8001c0c:	00017700 	.word	0x00017700

08001c10 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <MX_I2S3_Init+0x54>)
 8001c16:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <MX_I2S3_Init+0x58>)
 8001c18:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001c1a:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <MX_I2S3_Init+0x54>)
 8001c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c20:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <MX_I2S3_Init+0x54>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001c28:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <MX_I2S3_Init+0x54>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <MX_I2S3_Init+0x54>)
 8001c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c34:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001c36:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <MX_I2S3_Init+0x54>)
 8001c38:	4a0c      	ldr	r2, [pc, #48]	; (8001c6c <MX_I2S3_Init+0x5c>)
 8001c3a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <MX_I2S3_Init+0x54>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <MX_I2S3_Init+0x54>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <MX_I2S3_Init+0x54>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001c4e:	4805      	ldr	r0, [pc, #20]	; (8001c64 <MX_I2S3_Init+0x54>)
 8001c50:	f003 ff46 	bl	8005ae0 <HAL_I2S_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001c5a:	f000 f963 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000180 	.word	0x20000180
 8001c68:	40003c00 	.word	0x40003c00
 8001c6c:	00017700 	.word	0x00017700

08001c70 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c74:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001c76:	4a18      	ldr	r2, [pc, #96]	; (8001cd8 <MX_SPI1_Init+0x68>)
 8001c78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c7a:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001c7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001cbc:	220a      	movs	r2, #10
 8001cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cc0:	4804      	ldr	r0, [pc, #16]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001cc2:	f005 f995 	bl	8006ff0 <HAL_SPI_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ccc:	f000 f92a 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	200001c8 	.word	0x200001c8
 8001cd8:	40013000 	.word	0x40013000

08001cdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001ce2:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <MX_USART2_UART_Init+0x50>)
 8001ce4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001ce8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001d02:	220c      	movs	r2, #12
 8001d04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d12:	4805      	ldr	r0, [pc, #20]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001d14:	f005 f9f5 	bl	8007102 <HAL_UART_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d1e:	f000 f901 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000220 	.word	0x20000220
 8001d2c:	40004400 	.word	0x40004400

08001d30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <MX_DMA_Init+0x3c>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a0b      	ldr	r2, [pc, #44]	; (8001d6c <MX_DMA_Init+0x3c>)
 8001d40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <MX_DMA_Init+0x3c>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2100      	movs	r1, #0
 8001d56:	2010      	movs	r0, #16
 8001d58:	f000 fd0b 	bl	8002772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d5c:	2010      	movs	r0, #16
 8001d5e:	f000 fd24 	bl	80027aa <HAL_NVIC_EnableIRQ>

}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800

08001d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08c      	sub	sp, #48	; 0x30
 8001d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d76:	f107 031c 	add.w	r3, r7, #28
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	609a      	str	r2, [r3, #8]
 8001d82:	60da      	str	r2, [r3, #12]
 8001d84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
 8001d8a:	4b61      	ldr	r3, [pc, #388]	; (8001f10 <MX_GPIO_Init+0x1a0>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a60      	ldr	r2, [pc, #384]	; (8001f10 <MX_GPIO_Init+0x1a0>)
 8001d90:	f043 0310 	orr.w	r3, r3, #16
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b5e      	ldr	r3, [pc, #376]	; (8001f10 <MX_GPIO_Init+0x1a0>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	61bb      	str	r3, [r7, #24]
 8001da0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	4b5a      	ldr	r3, [pc, #360]	; (8001f10 <MX_GPIO_Init+0x1a0>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a59      	ldr	r2, [pc, #356]	; (8001f10 <MX_GPIO_Init+0x1a0>)
 8001dac:	f043 0304 	orr.w	r3, r3, #4
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b57      	ldr	r3, [pc, #348]	; (8001f10 <MX_GPIO_Init+0x1a0>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	4b53      	ldr	r3, [pc, #332]	; (8001f10 <MX_GPIO_Init+0x1a0>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a52      	ldr	r2, [pc, #328]	; (8001f10 <MX_GPIO_Init+0x1a0>)
 8001dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b50      	ldr	r3, [pc, #320]	; (8001f10 <MX_GPIO_Init+0x1a0>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b4c      	ldr	r3, [pc, #304]	; (8001f10 <MX_GPIO_Init+0x1a0>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a4b      	ldr	r2, [pc, #300]	; (8001f10 <MX_GPIO_Init+0x1a0>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b49      	ldr	r3, [pc, #292]	; (8001f10 <MX_GPIO_Init+0x1a0>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	4b45      	ldr	r3, [pc, #276]	; (8001f10 <MX_GPIO_Init+0x1a0>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a44      	ldr	r2, [pc, #272]	; (8001f10 <MX_GPIO_Init+0x1a0>)
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b42      	ldr	r3, [pc, #264]	; (8001f10 <MX_GPIO_Init+0x1a0>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	607b      	str	r3, [r7, #4]
 8001e16:	4b3e      	ldr	r3, [pc, #248]	; (8001f10 <MX_GPIO_Init+0x1a0>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a3d      	ldr	r2, [pc, #244]	; (8001f10 <MX_GPIO_Init+0x1a0>)
 8001e1c:	f043 0308 	orr.w	r3, r3, #8
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <MX_GPIO_Init+0x1a0>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2108      	movs	r1, #8
 8001e32:	4838      	ldr	r0, [pc, #224]	; (8001f14 <MX_GPIO_Init+0x1a4>)
 8001e34:	f001 f942 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001e38:	2201      	movs	r2, #1
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	4836      	ldr	r0, [pc, #216]	; (8001f18 <MX_GPIO_Init+0x1a8>)
 8001e3e:	f001 f93d 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|GPIO_PIN_15
 8001e42:	2200      	movs	r2, #0
 8001e44:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001e48:	4834      	ldr	r0, [pc, #208]	; (8001f1c <MX_GPIO_Init+0x1ac>)
 8001e4a:	f001 f937 	bl	80030bc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001e4e:	2304      	movs	r3, #4
 8001e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e52:	2300      	movs	r3, #0
 8001e54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001e5a:	f107 031c 	add.w	r3, r7, #28
 8001e5e:	4619      	mov	r1, r3
 8001e60:	482c      	ldr	r0, [pc, #176]	; (8001f14 <MX_GPIO_Init+0x1a4>)
 8001e62:	f000 ffa7 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001e66:	2308      	movs	r3, #8
 8001e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4825      	ldr	r0, [pc, #148]	; (8001f14 <MX_GPIO_Init+0x1a4>)
 8001e7e:	f000 ff99 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001e82:	2332      	movs	r3, #50	; 0x32
 8001e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e86:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e90:	f107 031c 	add.w	r3, r7, #28
 8001e94:	4619      	mov	r1, r3
 8001e96:	481f      	ldr	r0, [pc, #124]	; (8001f14 <MX_GPIO_Init+0x1a4>)
 8001e98:	f000 ff8c 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001eac:	f107 031c 	add.w	r3, r7, #28
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4819      	ldr	r0, [pc, #100]	; (8001f18 <MX_GPIO_Init+0x1a8>)
 8001eb4:	f000 ff7e 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ebc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec6:	f107 031c 	add.w	r3, r7, #28
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4814      	ldr	r0, [pc, #80]	; (8001f20 <MX_GPIO_Init+0x1b0>)
 8001ece:	f000 ff71 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin PD15
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|GPIO_PIN_15
 8001ed2:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001ed6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ee4:	f107 031c 	add.w	r3, r7, #28
 8001ee8:	4619      	mov	r1, r3
 8001eea:	480c      	ldr	r0, [pc, #48]	; (8001f1c <MX_GPIO_Init+0x1ac>)
 8001eec:	f000 ff62 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001ef0:	2320      	movs	r3, #32
 8001ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001efc:	f107 031c 	add.w	r3, r7, #28
 8001f00:	4619      	mov	r1, r3
 8001f02:	4806      	ldr	r0, [pc, #24]	; (8001f1c <MX_GPIO_Init+0x1ac>)
 8001f04:	f000 ff56 	bl	8002db4 <HAL_GPIO_Init>

}
 8001f08:	bf00      	nop
 8001f0a:	3730      	adds	r7, #48	; 0x30
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40020800 	.word	0x40020800
 8001f1c:	40020c00 	.word	0x40020c00
 8001f20:	40020000 	.word	0x40020000

08001f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f28:	b672      	cpsid	i
}
 8001f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <Error_Handler+0x8>
	...

08001f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <HAL_MspInit+0x4c>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	4a0f      	ldr	r2, [pc, #60]	; (8001f7c <HAL_MspInit+0x4c>)
 8001f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f44:	6453      	str	r3, [r2, #68]	; 0x44
 8001f46:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <HAL_MspInit+0x4c>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	603b      	str	r3, [r7, #0]
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <HAL_MspInit+0x4c>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	4a08      	ldr	r2, [pc, #32]	; (8001f7c <HAL_MspInit+0x4c>)
 8001f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f60:	6413      	str	r3, [r2, #64]	; 0x40
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_MspInit+0x4c>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f6e:	2007      	movs	r0, #7
 8001f70:	f000 fbf4 	bl	800275c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40023800 	.word	0x40023800

08001f80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	; 0x28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a19      	ldr	r2, [pc, #100]	; (8002004 <HAL_I2C_MspInit+0x84>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d12b      	bne.n	8001ffa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	4b18      	ldr	r3, [pc, #96]	; (8002008 <HAL_I2C_MspInit+0x88>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	4a17      	ldr	r2, [pc, #92]	; (8002008 <HAL_I2C_MspInit+0x88>)
 8001fac:	f043 0302 	orr.w	r3, r3, #2
 8001fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb2:	4b15      	ldr	r3, [pc, #84]	; (8002008 <HAL_I2C_MspInit+0x88>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fbe:	23c0      	movs	r3, #192	; 0xc0
 8001fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fc2:	2312      	movs	r3, #18
 8001fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fce:	2304      	movs	r3, #4
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd2:	f107 0314 	add.w	r3, r7, #20
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	480c      	ldr	r0, [pc, #48]	; (800200c <HAL_I2C_MspInit+0x8c>)
 8001fda:	f000 feeb 	bl	8002db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <HAL_I2C_MspInit+0x88>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	4a08      	ldr	r2, [pc, #32]	; (8002008 <HAL_I2C_MspInit+0x88>)
 8001fe8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fec:	6413      	str	r3, [r2, #64]	; 0x40
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_I2C_MspInit+0x88>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ffa:	bf00      	nop
 8001ffc:	3728      	adds	r7, #40	; 0x28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40005400 	.word	0x40005400
 8002008:	40023800 	.word	0x40023800
 800200c:	40020400 	.word	0x40020400

08002010 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08e      	sub	sp, #56	; 0x38
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a59      	ldr	r2, [pc, #356]	; (8002194 <HAL_I2S_MspInit+0x184>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d15b      	bne.n	80020ea <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
 8002036:	4b58      	ldr	r3, [pc, #352]	; (8002198 <HAL_I2S_MspInit+0x188>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	4a57      	ldr	r2, [pc, #348]	; (8002198 <HAL_I2S_MspInit+0x188>)
 800203c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002040:	6413      	str	r3, [r2, #64]	; 0x40
 8002042:	4b55      	ldr	r3, [pc, #340]	; (8002198 <HAL_I2S_MspInit+0x188>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204a:	623b      	str	r3, [r7, #32]
 800204c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	4b51      	ldr	r3, [pc, #324]	; (8002198 <HAL_I2S_MspInit+0x188>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a50      	ldr	r2, [pc, #320]	; (8002198 <HAL_I2S_MspInit+0x188>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b4e      	ldr	r3, [pc, #312]	; (8002198 <HAL_I2S_MspInit+0x188>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	61fb      	str	r3, [r7, #28]
 8002068:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	4b4a      	ldr	r3, [pc, #296]	; (8002198 <HAL_I2S_MspInit+0x188>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a49      	ldr	r2, [pc, #292]	; (8002198 <HAL_I2S_MspInit+0x188>)
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b47      	ldr	r3, [pc, #284]	; (8002198 <HAL_I2S_MspInit+0x188>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	61bb      	str	r3, [r7, #24]
 8002084:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002086:	2304      	movs	r3, #4
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002092:	2300      	movs	r3, #0
 8002094:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8002096:	2306      	movs	r3, #6
 8002098:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209e:	4619      	mov	r1, r3
 80020a0:	483e      	ldr	r0, [pc, #248]	; (800219c <HAL_I2S_MspInit+0x18c>)
 80020a2:	f000 fe87 	bl	8002db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80020a6:	2308      	movs	r3, #8
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b2:	2300      	movs	r3, #0
 80020b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020b6:	2305      	movs	r3, #5
 80020b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80020ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020be:	4619      	mov	r1, r3
 80020c0:	4836      	ldr	r0, [pc, #216]	; (800219c <HAL_I2S_MspInit+0x18c>)
 80020c2:	f000 fe77 	bl	8002db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80020c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d4:	2300      	movs	r3, #0
 80020d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020d8:	2305      	movs	r3, #5
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e0:	4619      	mov	r1, r3
 80020e2:	482f      	ldr	r0, [pc, #188]	; (80021a0 <HAL_I2S_MspInit+0x190>)
 80020e4:	f000 fe66 	bl	8002db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80020e8:	e04f      	b.n	800218a <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a2d      	ldr	r2, [pc, #180]	; (80021a4 <HAL_I2S_MspInit+0x194>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d14a      	bne.n	800218a <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	4b27      	ldr	r3, [pc, #156]	; (8002198 <HAL_I2S_MspInit+0x188>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	4a26      	ldr	r2, [pc, #152]	; (8002198 <HAL_I2S_MspInit+0x188>)
 80020fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002102:	6413      	str	r3, [r2, #64]	; 0x40
 8002104:	4b24      	ldr	r3, [pc, #144]	; (8002198 <HAL_I2S_MspInit+0x188>)
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002110:	2300      	movs	r3, #0
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	4b20      	ldr	r3, [pc, #128]	; (8002198 <HAL_I2S_MspInit+0x188>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	4a1f      	ldr	r2, [pc, #124]	; (8002198 <HAL_I2S_MspInit+0x188>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6313      	str	r3, [r2, #48]	; 0x30
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_I2S_MspInit+0x188>)
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_I2S_MspInit+0x188>)
 8002132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002134:	4a18      	ldr	r2, [pc, #96]	; (8002198 <HAL_I2S_MspInit+0x188>)
 8002136:	f043 0304 	orr.w	r3, r3, #4
 800213a:	6313      	str	r3, [r2, #48]	; 0x30
 800213c:	4b16      	ldr	r3, [pc, #88]	; (8002198 <HAL_I2S_MspInit+0x188>)
 800213e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002148:	2310      	movs	r3, #16
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002154:	2300      	movs	r3, #0
 8002156:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002158:	2306      	movs	r3, #6
 800215a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800215c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002160:	4619      	mov	r1, r3
 8002162:	4811      	ldr	r0, [pc, #68]	; (80021a8 <HAL_I2S_MspInit+0x198>)
 8002164:	f000 fe26 	bl	8002db4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002168:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002176:	2300      	movs	r3, #0
 8002178:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800217a:	2306      	movs	r3, #6
 800217c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800217e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002182:	4619      	mov	r1, r3
 8002184:	4805      	ldr	r0, [pc, #20]	; (800219c <HAL_I2S_MspInit+0x18c>)
 8002186:	f000 fe15 	bl	8002db4 <HAL_GPIO_Init>
}
 800218a:	bf00      	nop
 800218c:	3738      	adds	r7, #56	; 0x38
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40003800 	.word	0x40003800
 8002198:	40023800 	.word	0x40023800
 800219c:	40020800 	.word	0x40020800
 80021a0:	40020400 	.word	0x40020400
 80021a4:	40003c00 	.word	0x40003c00
 80021a8:	40020000 	.word	0x40020000

080021ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08a      	sub	sp, #40	; 0x28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a19      	ldr	r2, [pc, #100]	; (8002230 <HAL_SPI_MspInit+0x84>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d12b      	bne.n	8002226 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	4b18      	ldr	r3, [pc, #96]	; (8002234 <HAL_SPI_MspInit+0x88>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	4a17      	ldr	r2, [pc, #92]	; (8002234 <HAL_SPI_MspInit+0x88>)
 80021d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021dc:	6453      	str	r3, [r2, #68]	; 0x44
 80021de:	4b15      	ldr	r3, [pc, #84]	; (8002234 <HAL_SPI_MspInit+0x88>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	4b11      	ldr	r3, [pc, #68]	; (8002234 <HAL_SPI_MspInit+0x88>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a10      	ldr	r2, [pc, #64]	; (8002234 <HAL_SPI_MspInit+0x88>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <HAL_SPI_MspInit+0x88>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002206:	23e0      	movs	r3, #224	; 0xe0
 8002208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220a:	2302      	movs	r3, #2
 800220c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002212:	2303      	movs	r3, #3
 8002214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002216:	2305      	movs	r3, #5
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	4619      	mov	r1, r3
 8002220:	4805      	ldr	r0, [pc, #20]	; (8002238 <HAL_SPI_MspInit+0x8c>)
 8002222:	f000 fdc7 	bl	8002db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002226:	bf00      	nop
 8002228:	3728      	adds	r7, #40	; 0x28
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40013000 	.word	0x40013000
 8002234:	40023800 	.word	0x40023800
 8002238:	40020000 	.word	0x40020000

0800223c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a30      	ldr	r2, [pc, #192]	; (800231c <HAL_UART_MspInit+0xe0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d159      	bne.n	8002312 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	4b2f      	ldr	r3, [pc, #188]	; (8002320 <HAL_UART_MspInit+0xe4>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	4a2e      	ldr	r2, [pc, #184]	; (8002320 <HAL_UART_MspInit+0xe4>)
 8002268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800226c:	6413      	str	r3, [r2, #64]	; 0x40
 800226e:	4b2c      	ldr	r3, [pc, #176]	; (8002320 <HAL_UART_MspInit+0xe4>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	4b28      	ldr	r3, [pc, #160]	; (8002320 <HAL_UART_MspInit+0xe4>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a27      	ldr	r2, [pc, #156]	; (8002320 <HAL_UART_MspInit+0xe4>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b25      	ldr	r3, [pc, #148]	; (8002320 <HAL_UART_MspInit+0xe4>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002296:	230c      	movs	r3, #12
 8002298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a2:	2303      	movs	r3, #3
 80022a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022a6:	2307      	movs	r3, #7
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	4619      	mov	r1, r3
 80022b0:	481c      	ldr	r0, [pc, #112]	; (8002324 <HAL_UART_MspInit+0xe8>)
 80022b2:	f000 fd7f 	bl	8002db4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80022b6:	4b1c      	ldr	r3, [pc, #112]	; (8002328 <HAL_UART_MspInit+0xec>)
 80022b8:	4a1c      	ldr	r2, [pc, #112]	; (800232c <HAL_UART_MspInit+0xf0>)
 80022ba:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80022bc:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <HAL_UART_MspInit+0xec>)
 80022be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022c2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022c4:	4b18      	ldr	r3, [pc, #96]	; (8002328 <HAL_UART_MspInit+0xec>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ca:	4b17      	ldr	r3, [pc, #92]	; (8002328 <HAL_UART_MspInit+0xec>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022d0:	4b15      	ldr	r3, [pc, #84]	; (8002328 <HAL_UART_MspInit+0xec>)
 80022d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022d6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022d8:	4b13      	ldr	r3, [pc, #76]	; (8002328 <HAL_UART_MspInit+0xec>)
 80022da:	2200      	movs	r2, #0
 80022dc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022de:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_UART_MspInit+0xec>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80022e4:	4b10      	ldr	r3, [pc, #64]	; (8002328 <HAL_UART_MspInit+0xec>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022ea:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <HAL_UART_MspInit+0xec>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022f0:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <HAL_UART_MspInit+0xec>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80022f6:	480c      	ldr	r0, [pc, #48]	; (8002328 <HAL_UART_MspInit+0xec>)
 80022f8:	f000 fa72 	bl	80027e0 <HAL_DMA_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002302:	f7ff fe0f 	bl	8001f24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a07      	ldr	r2, [pc, #28]	; (8002328 <HAL_UART_MspInit+0xec>)
 800230a:	639a      	str	r2, [r3, #56]	; 0x38
 800230c:	4a06      	ldr	r2, [pc, #24]	; (8002328 <HAL_UART_MspInit+0xec>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002312:	bf00      	nop
 8002314:	3728      	adds	r7, #40	; 0x28
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40004400 	.word	0x40004400
 8002320:	40023800 	.word	0x40023800
 8002324:	40020000 	.word	0x40020000
 8002328:	20000264 	.word	0x20000264
 800232c:	40026088 	.word	0x40026088

08002330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002334:	e7fe      	b.n	8002334 <NMI_Handler+0x4>

08002336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800233a:	e7fe      	b.n	800233a <HardFault_Handler+0x4>

0800233c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002340:	e7fe      	b.n	8002340 <MemManage_Handler+0x4>

08002342 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002346:	e7fe      	b.n	8002346 <BusFault_Handler+0x4>

08002348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800234c:	e7fe      	b.n	800234c <UsageFault_Handler+0x4>

0800234e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800237c:	f000 f8da 	bl	8002534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}

08002384 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002388:	4802      	ldr	r0, [pc, #8]	; (8002394 <DMA1_Stream5_IRQHandler+0x10>)
 800238a:	f000 fad7 	bl	800293c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000264 	.word	0x20000264

08002398 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800239c:	4802      	ldr	r0, [pc, #8]	; (80023a8 <OTG_FS_IRQHandler+0x10>)
 800239e:	f001 f911 	bl	80035c4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200006b4 	.word	0x200006b4

080023ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b4:	4a14      	ldr	r2, [pc, #80]	; (8002408 <_sbrk+0x5c>)
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <_sbrk+0x60>)
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023c0:	4b13      	ldr	r3, [pc, #76]	; (8002410 <_sbrk+0x64>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d102      	bne.n	80023ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <_sbrk+0x64>)
 80023ca:	4a12      	ldr	r2, [pc, #72]	; (8002414 <_sbrk+0x68>)
 80023cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ce:	4b10      	ldr	r3, [pc, #64]	; (8002410 <_sbrk+0x64>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d207      	bcs.n	80023ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023dc:	f008 fc2e 	bl	800ac3c <__errno>
 80023e0:	4603      	mov	r3, r0
 80023e2:	220c      	movs	r2, #12
 80023e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023ea:	e009      	b.n	8002400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023ec:	4b08      	ldr	r3, [pc, #32]	; (8002410 <_sbrk+0x64>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023f2:	4b07      	ldr	r3, [pc, #28]	; (8002410 <_sbrk+0x64>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	4a05      	ldr	r2, [pc, #20]	; (8002410 <_sbrk+0x64>)
 80023fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023fe:	68fb      	ldr	r3, [r7, #12]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20020000 	.word	0x20020000
 800240c:	00000400 	.word	0x00000400
 8002410:	200002d0 	.word	0x200002d0
 8002414:	200009c8 	.word	0x200009c8

08002418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <SystemInit+0x20>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002422:	4a05      	ldr	r2, [pc, #20]	; (8002438 <SystemInit+0x20>)
 8002424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800243c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002474 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002440:	480d      	ldr	r0, [pc, #52]	; (8002478 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002442:	490e      	ldr	r1, [pc, #56]	; (800247c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002444:	4a0e      	ldr	r2, [pc, #56]	; (8002480 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002448:	e002      	b.n	8002450 <LoopCopyDataInit>

0800244a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800244a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800244c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800244e:	3304      	adds	r3, #4

08002450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002454:	d3f9      	bcc.n	800244a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002456:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002458:	4c0b      	ldr	r4, [pc, #44]	; (8002488 <LoopFillZerobss+0x26>)
  movs r3, #0
 800245a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800245c:	e001      	b.n	8002462 <LoopFillZerobss>

0800245e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800245e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002460:	3204      	adds	r2, #4

08002462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002464:	d3fb      	bcc.n	800245e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002466:	f7ff ffd7 	bl	8002418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800246a:	f008 fbed 	bl	800ac48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800246e:	f7ff faab 	bl	80019c8 <main>
  bx  lr    
 8002472:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002474:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800247c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002480:	0800af08 	.word	0x0800af08
  ldr r2, =_sbss
 8002484:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002488:	200009c8 	.word	0x200009c8

0800248c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800248c:	e7fe      	b.n	800248c <ADC_IRQHandler>
	...

08002490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002494:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <HAL_Init+0x40>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0d      	ldr	r2, [pc, #52]	; (80024d0 <HAL_Init+0x40>)
 800249a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800249e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_Init+0x40>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <HAL_Init+0x40>)
 80024a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024ac:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <HAL_Init+0x40>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a07      	ldr	r2, [pc, #28]	; (80024d0 <HAL_Init+0x40>)
 80024b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b8:	2003      	movs	r0, #3
 80024ba:	f000 f94f 	bl	800275c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024be:	2000      	movs	r0, #0
 80024c0:	f000 f808 	bl	80024d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c4:	f7ff fd34 	bl	8001f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023c00 	.word	0x40023c00

080024d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_InitTick+0x54>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_InitTick+0x58>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	4619      	mov	r1, r3
 80024e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 f967 	bl	80027c6 <HAL_SYSTICK_Config>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e00e      	b.n	8002520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b0f      	cmp	r3, #15
 8002506:	d80a      	bhi.n	800251e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002508:	2200      	movs	r2, #0
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002510:	f000 f92f 	bl	8002772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002514:	4a06      	ldr	r2, [pc, #24]	; (8002530 <HAL_InitTick+0x5c>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	e000      	b.n	8002520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000000 	.word	0x20000000
 800252c:	20000008 	.word	0x20000008
 8002530:	20000004 	.word	0x20000004

08002534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_IncTick+0x20>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_IncTick+0x24>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4413      	add	r3, r2
 8002544:	4a04      	ldr	r2, [pc, #16]	; (8002558 <HAL_IncTick+0x24>)
 8002546:	6013      	str	r3, [r2, #0]
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20000008 	.word	0x20000008
 8002558:	200002d4 	.word	0x200002d4

0800255c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return uwTick;
 8002560:	4b03      	ldr	r3, [pc, #12]	; (8002570 <HAL_GetTick+0x14>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	200002d4 	.word	0x200002d4

08002574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800257c:	f7ff ffee 	bl	800255c <HAL_GetTick>
 8002580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800258c:	d005      	beq.n	800259a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <HAL_Delay+0x44>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4413      	add	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800259a:	bf00      	nop
 800259c:	f7ff ffde 	bl	800255c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d8f7      	bhi.n	800259c <HAL_Delay+0x28>
  {
  }
}
 80025ac:	bf00      	nop
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000008 	.word	0x20000008

080025bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025cc:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <__NVIC_SetPriorityGrouping+0x44>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025d8:	4013      	ands	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ee:	4a04      	ldr	r2, [pc, #16]	; (8002600 <__NVIC_SetPriorityGrouping+0x44>)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	60d3      	str	r3, [r2, #12]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <__NVIC_GetPriorityGrouping+0x18>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	f003 0307 	and.w	r3, r3, #7
}
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	2b00      	cmp	r3, #0
 8002630:	db0b      	blt.n	800264a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	f003 021f 	and.w	r2, r3, #31
 8002638:	4907      	ldr	r1, [pc, #28]	; (8002658 <__NVIC_EnableIRQ+0x38>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	2001      	movs	r0, #1
 8002642:	fa00 f202 	lsl.w	r2, r0, r2
 8002646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000e100 	.word	0xe000e100

0800265c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	6039      	str	r1, [r7, #0]
 8002666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266c:	2b00      	cmp	r3, #0
 800266e:	db0a      	blt.n	8002686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	b2da      	uxtb	r2, r3
 8002674:	490c      	ldr	r1, [pc, #48]	; (80026a8 <__NVIC_SetPriority+0x4c>)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	0112      	lsls	r2, r2, #4
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	440b      	add	r3, r1
 8002680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002684:	e00a      	b.n	800269c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	b2da      	uxtb	r2, r3
 800268a:	4908      	ldr	r1, [pc, #32]	; (80026ac <__NVIC_SetPriority+0x50>)
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	3b04      	subs	r3, #4
 8002694:	0112      	lsls	r2, r2, #4
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	440b      	add	r3, r1
 800269a:	761a      	strb	r2, [r3, #24]
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000e100 	.word	0xe000e100
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b089      	sub	sp, #36	; 0x24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f1c3 0307 	rsb	r3, r3, #7
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	bf28      	it	cs
 80026ce:	2304      	movcs	r3, #4
 80026d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3304      	adds	r3, #4
 80026d6:	2b06      	cmp	r3, #6
 80026d8:	d902      	bls.n	80026e0 <NVIC_EncodePriority+0x30>
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3b03      	subs	r3, #3
 80026de:	e000      	b.n	80026e2 <NVIC_EncodePriority+0x32>
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43da      	mvns	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	401a      	ands	r2, r3
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002702:	43d9      	mvns	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	4313      	orrs	r3, r2
         );
}
 800270a:	4618      	mov	r0, r3
 800270c:	3724      	adds	r7, #36	; 0x24
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3b01      	subs	r3, #1
 8002724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002728:	d301      	bcc.n	800272e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800272a:	2301      	movs	r3, #1
 800272c:	e00f      	b.n	800274e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800272e:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <SysTick_Config+0x40>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002736:	210f      	movs	r1, #15
 8002738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800273c:	f7ff ff8e 	bl	800265c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <SysTick_Config+0x40>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002746:	4b04      	ldr	r3, [pc, #16]	; (8002758 <SysTick_Config+0x40>)
 8002748:	2207      	movs	r2, #7
 800274a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	e000e010 	.word	0xe000e010

0800275c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff ff29 	bl	80025bc <__NVIC_SetPriorityGrouping>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002772:	b580      	push	{r7, lr}
 8002774:	b086      	sub	sp, #24
 8002776:	af00      	add	r7, sp, #0
 8002778:	4603      	mov	r3, r0
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002784:	f7ff ff3e 	bl	8002604 <__NVIC_GetPriorityGrouping>
 8002788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	6978      	ldr	r0, [r7, #20]
 8002790:	f7ff ff8e 	bl	80026b0 <NVIC_EncodePriority>
 8002794:	4602      	mov	r2, r0
 8002796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ff5d 	bl	800265c <__NVIC_SetPriority>
}
 80027a2:	bf00      	nop
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4603      	mov	r3, r0
 80027b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff31 	bl	8002620 <__NVIC_EnableIRQ>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff ffa2 	bl	8002718 <SysTick_Config>
 80027d4:	4603      	mov	r3, r0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027ec:	f7ff feb6 	bl	800255c <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e099      	b.n	8002930 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0201 	bic.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800281c:	e00f      	b.n	800283e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800281e:	f7ff fe9d 	bl	800255c <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b05      	cmp	r3, #5
 800282a:	d908      	bls.n	800283e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2220      	movs	r2, #32
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2203      	movs	r2, #3
 8002836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e078      	b.n	8002930 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1e8      	bne.n	800281e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	4b38      	ldr	r3, [pc, #224]	; (8002938 <HAL_DMA_Init+0x158>)
 8002858:	4013      	ands	r3, r2
 800285a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800286a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002876:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002882:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4313      	orrs	r3, r2
 800288e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	2b04      	cmp	r3, #4
 8002896:	d107      	bne.n	80028a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	4313      	orrs	r3, r2
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f023 0307 	bic.w	r3, r3, #7
 80028be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d117      	bne.n	8002902 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00e      	beq.n	8002902 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f9e9 	bl	8002cbc <DMA_CheckFifoParam>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2240      	movs	r2, #64	; 0x40
 80028f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028fe:	2301      	movs	r3, #1
 8002900:	e016      	b.n	8002930 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f9a0 	bl	8002c50 <DMA_CalcBaseAndBitshift>
 8002910:	4603      	mov	r3, r0
 8002912:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	223f      	movs	r2, #63	; 0x3f
 800291a:	409a      	lsls	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	f010803f 	.word	0xf010803f

0800293c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002948:	4b8e      	ldr	r3, [pc, #568]	; (8002b84 <HAL_DMA_IRQHandler+0x248>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a8e      	ldr	r2, [pc, #568]	; (8002b88 <HAL_DMA_IRQHandler+0x24c>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0a9b      	lsrs	r3, r3, #10
 8002954:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	2208      	movs	r2, #8
 8002968:	409a      	lsls	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d01a      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d013      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0204 	bic.w	r2, r2, #4
 800298e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002994:	2208      	movs	r2, #8
 8002996:	409a      	lsls	r2, r3
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	f043 0201 	orr.w	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ac:	2201      	movs	r2, #1
 80029ae:	409a      	lsls	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d012      	beq.n	80029de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00b      	beq.n	80029de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ca:	2201      	movs	r2, #1
 80029cc:	409a      	lsls	r2, r3
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d6:	f043 0202 	orr.w	r2, r3, #2
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	2204      	movs	r2, #4
 80029e4:	409a      	lsls	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d012      	beq.n	8002a14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00b      	beq.n	8002a14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a00:	2204      	movs	r2, #4
 8002a02:	409a      	lsls	r2, r3
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0c:	f043 0204 	orr.w	r2, r3, #4
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a18:	2210      	movs	r2, #16
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d043      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d03c      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a36:	2210      	movs	r2, #16
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d018      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d108      	bne.n	8002a6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d024      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4798      	blx	r3
 8002a6a:	e01f      	b.n	8002aac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d01b      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4798      	blx	r3
 8002a7c:	e016      	b.n	8002aac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d107      	bne.n	8002a9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0208 	bic.w	r2, r2, #8
 8002a9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	409a      	lsls	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 808f 	beq.w	8002bdc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8087 	beq.w	8002bdc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b05      	cmp	r3, #5
 8002ae4:	d136      	bne.n	8002b54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0216 	bic.w	r2, r2, #22
 8002af4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695a      	ldr	r2, [r3, #20]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d103      	bne.n	8002b16 <HAL_DMA_IRQHandler+0x1da>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d007      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0208 	bic.w	r2, r2, #8
 8002b24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2a:	223f      	movs	r2, #63	; 0x3f
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d07e      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	4798      	blx	r3
        }
        return;
 8002b52:	e079      	b.n	8002c48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d01d      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10d      	bne.n	8002b8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d031      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	4798      	blx	r3
 8002b80:	e02c      	b.n	8002bdc <HAL_DMA_IRQHandler+0x2a0>
 8002b82:	bf00      	nop
 8002b84:	20000000 	.word	0x20000000
 8002b88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d023      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	4798      	blx	r3
 8002b9c:	e01e      	b.n	8002bdc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10f      	bne.n	8002bcc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0210 	bic.w	r2, r2, #16
 8002bba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d032      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d022      	beq.n	8002c36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2205      	movs	r2, #5
 8002bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0201 	bic.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d307      	bcc.n	8002c24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f2      	bne.n	8002c08 <HAL_DMA_IRQHandler+0x2cc>
 8002c22:	e000      	b.n	8002c26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	4798      	blx	r3
 8002c46:	e000      	b.n	8002c4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c48:	bf00      	nop
    }
  }
}
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	3b10      	subs	r3, #16
 8002c60:	4a14      	ldr	r2, [pc, #80]	; (8002cb4 <DMA_CalcBaseAndBitshift+0x64>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	091b      	lsrs	r3, r3, #4
 8002c68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c6a:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <DMA_CalcBaseAndBitshift+0x68>)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4413      	add	r3, r2
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d909      	bls.n	8002c92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c86:	f023 0303 	bic.w	r3, r3, #3
 8002c8a:	1d1a      	adds	r2, r3, #4
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	659a      	str	r2, [r3, #88]	; 0x58
 8002c90:	e007      	b.n	8002ca2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c9a:	f023 0303 	bic.w	r3, r3, #3
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	aaaaaaab 	.word	0xaaaaaaab
 8002cb8:	0800aef0 	.word	0x0800aef0

08002cbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d11f      	bne.n	8002d16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d856      	bhi.n	8002d8a <DMA_CheckFifoParam+0xce>
 8002cdc:	a201      	add	r2, pc, #4	; (adr r2, 8002ce4 <DMA_CheckFifoParam+0x28>)
 8002cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce2:	bf00      	nop
 8002ce4:	08002cf5 	.word	0x08002cf5
 8002ce8:	08002d07 	.word	0x08002d07
 8002cec:	08002cf5 	.word	0x08002cf5
 8002cf0:	08002d8b 	.word	0x08002d8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d046      	beq.n	8002d8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d04:	e043      	b.n	8002d8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d0e:	d140      	bne.n	8002d92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d14:	e03d      	b.n	8002d92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d1e:	d121      	bne.n	8002d64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d837      	bhi.n	8002d96 <DMA_CheckFifoParam+0xda>
 8002d26:	a201      	add	r2, pc, #4	; (adr r2, 8002d2c <DMA_CheckFifoParam+0x70>)
 8002d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2c:	08002d3d 	.word	0x08002d3d
 8002d30:	08002d43 	.word	0x08002d43
 8002d34:	08002d3d 	.word	0x08002d3d
 8002d38:	08002d55 	.word	0x08002d55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d40:	e030      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d025      	beq.n	8002d9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d52:	e022      	b.n	8002d9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d5c:	d11f      	bne.n	8002d9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d62:	e01c      	b.n	8002d9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d903      	bls.n	8002d72 <DMA_CheckFifoParam+0xb6>
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b03      	cmp	r3, #3
 8002d6e:	d003      	beq.n	8002d78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d70:	e018      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	73fb      	strb	r3, [r7, #15]
      break;
 8002d76:	e015      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00e      	beq.n	8002da2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
      break;
 8002d88:	e00b      	b.n	8002da2 <DMA_CheckFifoParam+0xe6>
      break;
 8002d8a:	bf00      	nop
 8002d8c:	e00a      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
      break;
 8002d8e:	bf00      	nop
 8002d90:	e008      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
      break;
 8002d92:	bf00      	nop
 8002d94:	e006      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
      break;
 8002d96:	bf00      	nop
 8002d98:	e004      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
      break;
 8002d9a:	bf00      	nop
 8002d9c:	e002      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d9e:	bf00      	nop
 8002da0:	e000      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
      break;
 8002da2:	bf00      	nop
    }
  } 
  
  return status; 
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop

08002db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b089      	sub	sp, #36	; 0x24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	e159      	b.n	8003084 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	4013      	ands	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	f040 8148 	bne.w	800307e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d005      	beq.n	8002e06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d130      	bne.n	8002e68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	2203      	movs	r2, #3
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43db      	mvns	r3, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 0201 	and.w	r2, r3, #1
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d017      	beq.n	8002ea4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	2203      	movs	r2, #3
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d123      	bne.n	8002ef8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	08da      	lsrs	r2, r3, #3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3208      	adds	r2, #8
 8002eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	220f      	movs	r2, #15
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	08da      	lsrs	r2, r3, #3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3208      	adds	r2, #8
 8002ef2:	69b9      	ldr	r1, [r7, #24]
 8002ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	2203      	movs	r2, #3
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 0203 	and.w	r2, r3, #3
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 80a2 	beq.w	800307e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	4b57      	ldr	r3, [pc, #348]	; (800309c <HAL_GPIO_Init+0x2e8>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	4a56      	ldr	r2, [pc, #344]	; (800309c <HAL_GPIO_Init+0x2e8>)
 8002f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f48:	6453      	str	r3, [r2, #68]	; 0x44
 8002f4a:	4b54      	ldr	r3, [pc, #336]	; (800309c <HAL_GPIO_Init+0x2e8>)
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f56:	4a52      	ldr	r2, [pc, #328]	; (80030a0 <HAL_GPIO_Init+0x2ec>)
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	089b      	lsrs	r3, r3, #2
 8002f5c:	3302      	adds	r3, #2
 8002f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	220f      	movs	r2, #15
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a49      	ldr	r2, [pc, #292]	; (80030a4 <HAL_GPIO_Init+0x2f0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d019      	beq.n	8002fb6 <HAL_GPIO_Init+0x202>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a48      	ldr	r2, [pc, #288]	; (80030a8 <HAL_GPIO_Init+0x2f4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d013      	beq.n	8002fb2 <HAL_GPIO_Init+0x1fe>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a47      	ldr	r2, [pc, #284]	; (80030ac <HAL_GPIO_Init+0x2f8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00d      	beq.n	8002fae <HAL_GPIO_Init+0x1fa>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a46      	ldr	r2, [pc, #280]	; (80030b0 <HAL_GPIO_Init+0x2fc>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d007      	beq.n	8002faa <HAL_GPIO_Init+0x1f6>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a45      	ldr	r2, [pc, #276]	; (80030b4 <HAL_GPIO_Init+0x300>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d101      	bne.n	8002fa6 <HAL_GPIO_Init+0x1f2>
 8002fa2:	2304      	movs	r3, #4
 8002fa4:	e008      	b.n	8002fb8 <HAL_GPIO_Init+0x204>
 8002fa6:	2307      	movs	r3, #7
 8002fa8:	e006      	b.n	8002fb8 <HAL_GPIO_Init+0x204>
 8002faa:	2303      	movs	r3, #3
 8002fac:	e004      	b.n	8002fb8 <HAL_GPIO_Init+0x204>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e002      	b.n	8002fb8 <HAL_GPIO_Init+0x204>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <HAL_GPIO_Init+0x204>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	f002 0203 	and.w	r2, r2, #3
 8002fbe:	0092      	lsls	r2, r2, #2
 8002fc0:	4093      	lsls	r3, r2
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fc8:	4935      	ldr	r1, [pc, #212]	; (80030a0 <HAL_GPIO_Init+0x2ec>)
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	089b      	lsrs	r3, r3, #2
 8002fce:	3302      	adds	r3, #2
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fd6:	4b38      	ldr	r3, [pc, #224]	; (80030b8 <HAL_GPIO_Init+0x304>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ffa:	4a2f      	ldr	r2, [pc, #188]	; (80030b8 <HAL_GPIO_Init+0x304>)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003000:	4b2d      	ldr	r3, [pc, #180]	; (80030b8 <HAL_GPIO_Init+0x304>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003024:	4a24      	ldr	r2, [pc, #144]	; (80030b8 <HAL_GPIO_Init+0x304>)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800302a:	4b23      	ldr	r3, [pc, #140]	; (80030b8 <HAL_GPIO_Init+0x304>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800304e:	4a1a      	ldr	r2, [pc, #104]	; (80030b8 <HAL_GPIO_Init+0x304>)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003054:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <HAL_GPIO_Init+0x304>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	43db      	mvns	r3, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003078:	4a0f      	ldr	r2, [pc, #60]	; (80030b8 <HAL_GPIO_Init+0x304>)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3301      	adds	r3, #1
 8003082:	61fb      	str	r3, [r7, #28]
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	2b0f      	cmp	r3, #15
 8003088:	f67f aea2 	bls.w	8002dd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	3724      	adds	r7, #36	; 0x24
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800
 80030a0:	40013800 	.word	0x40013800
 80030a4:	40020000 	.word	0x40020000
 80030a8:	40020400 	.word	0x40020400
 80030ac:	40020800 	.word	0x40020800
 80030b0:	40020c00 	.word	0x40020c00
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40013c00 	.word	0x40013c00

080030bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	807b      	strh	r3, [r7, #2]
 80030c8:	4613      	mov	r3, r2
 80030ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030cc:	787b      	ldrb	r3, [r7, #1]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030d2:	887a      	ldrh	r2, [r7, #2]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030d8:	e003      	b.n	80030e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030da:	887b      	ldrh	r3, [r7, #2]
 80030dc:	041a      	lsls	r2, r3, #16
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	619a      	str	r2, [r3, #24]
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80030ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030f0:	b08f      	sub	sp, #60	; 0x3c
 80030f2:	af0a      	add	r7, sp, #40	; 0x28
 80030f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e054      	b.n	80031aa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f007 fae4 	bl	800a6e8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2203      	movs	r2, #3
 8003124:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f004 fb12 	bl	8007768 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	603b      	str	r3, [r7, #0]
 800314a:	687e      	ldr	r6, [r7, #4]
 800314c:	466d      	mov	r5, sp
 800314e:	f106 0410 	add.w	r4, r6, #16
 8003152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800315a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800315e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003162:	1d33      	adds	r3, r6, #4
 8003164:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003166:	6838      	ldr	r0, [r7, #0]
 8003168:	f004 fa8c 	bl	8007684 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2101      	movs	r1, #1
 8003172:	4618      	mov	r0, r3
 8003174:	f004 fb09 	bl	800778a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	603b      	str	r3, [r7, #0]
 800317e:	687e      	ldr	r6, [r7, #4]
 8003180:	466d      	mov	r5, sp
 8003182:	f106 0410 	add.w	r4, r6, #16
 8003186:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003188:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800318a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800318c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800318e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003192:	e885 0003 	stmia.w	r5, {r0, r1}
 8003196:	1d33      	adds	r3, r6, #4
 8003198:	cb0e      	ldmia	r3, {r1, r2, r3}
 800319a:	6838      	ldr	r0, [r7, #0]
 800319c:	f004 fc92 	bl	8007ac4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031b2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80031b2:	b590      	push	{r4, r7, lr}
 80031b4:	b089      	sub	sp, #36	; 0x24
 80031b6:	af04      	add	r7, sp, #16
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	4608      	mov	r0, r1
 80031bc:	4611      	mov	r1, r2
 80031be:	461a      	mov	r2, r3
 80031c0:	4603      	mov	r3, r0
 80031c2:	70fb      	strb	r3, [r7, #3]
 80031c4:	460b      	mov	r3, r1
 80031c6:	70bb      	strb	r3, [r7, #2]
 80031c8:	4613      	mov	r3, r2
 80031ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <HAL_HCD_HC_Init+0x28>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e076      	b.n	80032c8 <HAL_HCD_HC_Init+0x116>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	212c      	movs	r1, #44	; 0x2c
 80031e8:	fb01 f303 	mul.w	r3, r1, r3
 80031ec:	4413      	add	r3, r2
 80031ee:	333d      	adds	r3, #61	; 0x3d
 80031f0:	2200      	movs	r2, #0
 80031f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	212c      	movs	r1, #44	; 0x2c
 80031fa:	fb01 f303 	mul.w	r3, r1, r3
 80031fe:	4413      	add	r3, r2
 8003200:	3338      	adds	r3, #56	; 0x38
 8003202:	787a      	ldrb	r2, [r7, #1]
 8003204:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	212c      	movs	r1, #44	; 0x2c
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	3340      	adds	r3, #64	; 0x40
 8003214:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003216:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	212c      	movs	r1, #44	; 0x2c
 800321e:	fb01 f303 	mul.w	r3, r1, r3
 8003222:	4413      	add	r3, r2
 8003224:	3339      	adds	r3, #57	; 0x39
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	212c      	movs	r1, #44	; 0x2c
 8003230:	fb01 f303 	mul.w	r3, r1, r3
 8003234:	4413      	add	r3, r2
 8003236:	333f      	adds	r3, #63	; 0x3f
 8003238:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800323c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	78ba      	ldrb	r2, [r7, #2]
 8003242:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003246:	b2d0      	uxtb	r0, r2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	212c      	movs	r1, #44	; 0x2c
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	4413      	add	r3, r2
 8003252:	333a      	adds	r3, #58	; 0x3a
 8003254:	4602      	mov	r2, r0
 8003256:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003258:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800325c:	2b00      	cmp	r3, #0
 800325e:	da09      	bge.n	8003274 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	212c      	movs	r1, #44	; 0x2c
 8003266:	fb01 f303 	mul.w	r3, r1, r3
 800326a:	4413      	add	r3, r2
 800326c:	333b      	adds	r3, #59	; 0x3b
 800326e:	2201      	movs	r2, #1
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	e008      	b.n	8003286 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	212c      	movs	r1, #44	; 0x2c
 800327a:	fb01 f303 	mul.w	r3, r1, r3
 800327e:	4413      	add	r3, r2
 8003280:	333b      	adds	r3, #59	; 0x3b
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	212c      	movs	r1, #44	; 0x2c
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4413      	add	r3, r2
 8003292:	333c      	adds	r3, #60	; 0x3c
 8003294:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003298:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	787c      	ldrb	r4, [r7, #1]
 80032a0:	78ba      	ldrb	r2, [r7, #2]
 80032a2:	78f9      	ldrb	r1, [r7, #3]
 80032a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032a6:	9302      	str	r3, [sp, #8]
 80032a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032ac:	9301      	str	r3, [sp, #4]
 80032ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	4623      	mov	r3, r4
 80032b6:	f004 fd8b 	bl	8007dd0 <USB_HC_Init>
 80032ba:	4603      	mov	r3, r0
 80032bc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd90      	pop	{r4, r7, pc}

080032d0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_HCD_HC_Halt+0x1e>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e00f      	b.n	800330e <HAL_HCD_HC_Halt+0x3e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	4611      	mov	r1, r2
 80032fe:	4618      	mov	r0, r3
 8003300:	f004 ffdb 	bl	80082ba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800330c:	7bfb      	ldrb	r3, [r7, #15]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	4608      	mov	r0, r1
 8003322:	4611      	mov	r1, r2
 8003324:	461a      	mov	r2, r3
 8003326:	4603      	mov	r3, r0
 8003328:	70fb      	strb	r3, [r7, #3]
 800332a:	460b      	mov	r3, r1
 800332c:	70bb      	strb	r3, [r7, #2]
 800332e:	4613      	mov	r3, r2
 8003330:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003332:	78fb      	ldrb	r3, [r7, #3]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	212c      	movs	r1, #44	; 0x2c
 8003338:	fb01 f303 	mul.w	r3, r1, r3
 800333c:	4413      	add	r3, r2
 800333e:	333b      	adds	r3, #59	; 0x3b
 8003340:	78ba      	ldrb	r2, [r7, #2]
 8003342:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	212c      	movs	r1, #44	; 0x2c
 800334a:	fb01 f303 	mul.w	r3, r1, r3
 800334e:	4413      	add	r3, r2
 8003350:	333f      	adds	r3, #63	; 0x3f
 8003352:	787a      	ldrb	r2, [r7, #1]
 8003354:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003356:	7c3b      	ldrb	r3, [r7, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d112      	bne.n	8003382 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	212c      	movs	r1, #44	; 0x2c
 8003362:	fb01 f303 	mul.w	r3, r1, r3
 8003366:	4413      	add	r3, r2
 8003368:	3342      	adds	r3, #66	; 0x42
 800336a:	2203      	movs	r2, #3
 800336c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800336e:	78fb      	ldrb	r3, [r7, #3]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	212c      	movs	r1, #44	; 0x2c
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	4413      	add	r3, r2
 800337a:	333d      	adds	r3, #61	; 0x3d
 800337c:	7f3a      	ldrb	r2, [r7, #28]
 800337e:	701a      	strb	r2, [r3, #0]
 8003380:	e008      	b.n	8003394 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003382:	78fb      	ldrb	r3, [r7, #3]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	212c      	movs	r1, #44	; 0x2c
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	4413      	add	r3, r2
 800338e:	3342      	adds	r3, #66	; 0x42
 8003390:	2202      	movs	r2, #2
 8003392:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003394:	787b      	ldrb	r3, [r7, #1]
 8003396:	2b03      	cmp	r3, #3
 8003398:	f200 80c6 	bhi.w	8003528 <HAL_HCD_HC_SubmitRequest+0x210>
 800339c:	a201      	add	r2, pc, #4	; (adr r2, 80033a4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800339e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a2:	bf00      	nop
 80033a4:	080033b5 	.word	0x080033b5
 80033a8:	08003515 	.word	0x08003515
 80033ac:	08003419 	.word	0x08003419
 80033b0:	08003497 	.word	0x08003497
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80033b4:	7c3b      	ldrb	r3, [r7, #16]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	f040 80b8 	bne.w	800352c <HAL_HCD_HC_SubmitRequest+0x214>
 80033bc:	78bb      	ldrb	r3, [r7, #2]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f040 80b4 	bne.w	800352c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80033c4:	8b3b      	ldrh	r3, [r7, #24]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d108      	bne.n	80033dc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80033ca:	78fb      	ldrb	r3, [r7, #3]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	212c      	movs	r1, #44	; 0x2c
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	4413      	add	r3, r2
 80033d6:	3355      	adds	r3, #85	; 0x55
 80033d8:	2201      	movs	r2, #1
 80033da:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	212c      	movs	r1, #44	; 0x2c
 80033e2:	fb01 f303 	mul.w	r3, r1, r3
 80033e6:	4413      	add	r3, r2
 80033e8:	3355      	adds	r3, #85	; 0x55
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d109      	bne.n	8003404 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	212c      	movs	r1, #44	; 0x2c
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	4413      	add	r3, r2
 80033fc:	3342      	adds	r3, #66	; 0x42
 80033fe:	2200      	movs	r2, #0
 8003400:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003402:	e093      	b.n	800352c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003404:	78fb      	ldrb	r3, [r7, #3]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	212c      	movs	r1, #44	; 0x2c
 800340a:	fb01 f303 	mul.w	r3, r1, r3
 800340e:	4413      	add	r3, r2
 8003410:	3342      	adds	r3, #66	; 0x42
 8003412:	2202      	movs	r2, #2
 8003414:	701a      	strb	r2, [r3, #0]
      break;
 8003416:	e089      	b.n	800352c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003418:	78bb      	ldrb	r3, [r7, #2]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d11d      	bne.n	800345a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800341e:	78fb      	ldrb	r3, [r7, #3]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	212c      	movs	r1, #44	; 0x2c
 8003424:	fb01 f303 	mul.w	r3, r1, r3
 8003428:	4413      	add	r3, r2
 800342a:	3355      	adds	r3, #85	; 0x55
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d109      	bne.n	8003446 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003432:	78fb      	ldrb	r3, [r7, #3]
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	212c      	movs	r1, #44	; 0x2c
 8003438:	fb01 f303 	mul.w	r3, r1, r3
 800343c:	4413      	add	r3, r2
 800343e:	3342      	adds	r3, #66	; 0x42
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003444:	e073      	b.n	800352e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	212c      	movs	r1, #44	; 0x2c
 800344c:	fb01 f303 	mul.w	r3, r1, r3
 8003450:	4413      	add	r3, r2
 8003452:	3342      	adds	r3, #66	; 0x42
 8003454:	2202      	movs	r2, #2
 8003456:	701a      	strb	r2, [r3, #0]
      break;
 8003458:	e069      	b.n	800352e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800345a:	78fb      	ldrb	r3, [r7, #3]
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	212c      	movs	r1, #44	; 0x2c
 8003460:	fb01 f303 	mul.w	r3, r1, r3
 8003464:	4413      	add	r3, r2
 8003466:	3354      	adds	r3, #84	; 0x54
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800346e:	78fb      	ldrb	r3, [r7, #3]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	212c      	movs	r1, #44	; 0x2c
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	4413      	add	r3, r2
 800347a:	3342      	adds	r3, #66	; 0x42
 800347c:	2200      	movs	r2, #0
 800347e:	701a      	strb	r2, [r3, #0]
      break;
 8003480:	e055      	b.n	800352e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003482:	78fb      	ldrb	r3, [r7, #3]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	212c      	movs	r1, #44	; 0x2c
 8003488:	fb01 f303 	mul.w	r3, r1, r3
 800348c:	4413      	add	r3, r2
 800348e:	3342      	adds	r3, #66	; 0x42
 8003490:	2202      	movs	r2, #2
 8003492:	701a      	strb	r2, [r3, #0]
      break;
 8003494:	e04b      	b.n	800352e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003496:	78bb      	ldrb	r3, [r7, #2]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d11d      	bne.n	80034d8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800349c:	78fb      	ldrb	r3, [r7, #3]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	212c      	movs	r1, #44	; 0x2c
 80034a2:	fb01 f303 	mul.w	r3, r1, r3
 80034a6:	4413      	add	r3, r2
 80034a8:	3355      	adds	r3, #85	; 0x55
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d109      	bne.n	80034c4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034b0:	78fb      	ldrb	r3, [r7, #3]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	212c      	movs	r1, #44	; 0x2c
 80034b6:	fb01 f303 	mul.w	r3, r1, r3
 80034ba:	4413      	add	r3, r2
 80034bc:	3342      	adds	r3, #66	; 0x42
 80034be:	2200      	movs	r2, #0
 80034c0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80034c2:	e034      	b.n	800352e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	212c      	movs	r1, #44	; 0x2c
 80034ca:	fb01 f303 	mul.w	r3, r1, r3
 80034ce:	4413      	add	r3, r2
 80034d0:	3342      	adds	r3, #66	; 0x42
 80034d2:	2202      	movs	r2, #2
 80034d4:	701a      	strb	r2, [r3, #0]
      break;
 80034d6:	e02a      	b.n	800352e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80034d8:	78fb      	ldrb	r3, [r7, #3]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	212c      	movs	r1, #44	; 0x2c
 80034de:	fb01 f303 	mul.w	r3, r1, r3
 80034e2:	4413      	add	r3, r2
 80034e4:	3354      	adds	r3, #84	; 0x54
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d109      	bne.n	8003500 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	212c      	movs	r1, #44	; 0x2c
 80034f2:	fb01 f303 	mul.w	r3, r1, r3
 80034f6:	4413      	add	r3, r2
 80034f8:	3342      	adds	r3, #66	; 0x42
 80034fa:	2200      	movs	r2, #0
 80034fc:	701a      	strb	r2, [r3, #0]
      break;
 80034fe:	e016      	b.n	800352e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	212c      	movs	r1, #44	; 0x2c
 8003506:	fb01 f303 	mul.w	r3, r1, r3
 800350a:	4413      	add	r3, r2
 800350c:	3342      	adds	r3, #66	; 0x42
 800350e:	2202      	movs	r2, #2
 8003510:	701a      	strb	r2, [r3, #0]
      break;
 8003512:	e00c      	b.n	800352e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	212c      	movs	r1, #44	; 0x2c
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	4413      	add	r3, r2
 8003520:	3342      	adds	r3, #66	; 0x42
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
      break;
 8003526:	e002      	b.n	800352e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003528:	bf00      	nop
 800352a:	e000      	b.n	800352e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800352c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800352e:	78fb      	ldrb	r3, [r7, #3]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	212c      	movs	r1, #44	; 0x2c
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	4413      	add	r3, r2
 800353a:	3344      	adds	r3, #68	; 0x44
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	8b3a      	ldrh	r2, [r7, #24]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	202c      	movs	r0, #44	; 0x2c
 8003548:	fb00 f303 	mul.w	r3, r0, r3
 800354c:	440b      	add	r3, r1
 800354e:	334c      	adds	r3, #76	; 0x4c
 8003550:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	212c      	movs	r1, #44	; 0x2c
 8003558:	fb01 f303 	mul.w	r3, r1, r3
 800355c:	4413      	add	r3, r2
 800355e:	3360      	adds	r3, #96	; 0x60
 8003560:	2200      	movs	r2, #0
 8003562:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	212c      	movs	r1, #44	; 0x2c
 800356a:	fb01 f303 	mul.w	r3, r1, r3
 800356e:	4413      	add	r3, r2
 8003570:	3350      	adds	r3, #80	; 0x50
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003576:	78fb      	ldrb	r3, [r7, #3]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	212c      	movs	r1, #44	; 0x2c
 800357c:	fb01 f303 	mul.w	r3, r1, r3
 8003580:	4413      	add	r3, r2
 8003582:	3339      	adds	r3, #57	; 0x39
 8003584:	78fa      	ldrb	r2, [r7, #3]
 8003586:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	212c      	movs	r1, #44	; 0x2c
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	4413      	add	r3, r2
 8003594:	3361      	adds	r3, #97	; 0x61
 8003596:	2200      	movs	r2, #0
 8003598:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	78fb      	ldrb	r3, [r7, #3]
 80035a0:	222c      	movs	r2, #44	; 0x2c
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	3338      	adds	r3, #56	; 0x38
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	18d1      	adds	r1, r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	461a      	mov	r2, r3
 80035b4:	f004 fd2e 	bl	8008014 <USB_HC_StartXfer>
 80035b8:	4603      	mov	r3, r0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop

080035c4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f004 fa2f 	bl	8007a3e <USB_GetMode>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	f040 80f6 	bne.w	80037d4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f004 fa13 	bl	8007a18 <USB_ReadInterrupts>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 80ec 	beq.w	80037d2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f004 fa0a 	bl	8007a18 <USB_ReadInterrupts>
 8003604:	4603      	mov	r3, r0
 8003606:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800360a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800360e:	d104      	bne.n	800361a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003618:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f004 f9fa 	bl	8007a18 <USB_ReadInterrupts>
 8003624:	4603      	mov	r3, r0
 8003626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800362a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800362e:	d104      	bne.n	800363a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003638:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f004 f9ea 	bl	8007a18 <USB_ReadInterrupts>
 8003644:	4603      	mov	r3, r0
 8003646:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800364a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800364e:	d104      	bne.n	800365a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003658:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f004 f9da 	bl	8007a18 <USB_ReadInterrupts>
 8003664:	4603      	mov	r3, r0
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b02      	cmp	r3, #2
 800366c:	d103      	bne.n	8003676 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2202      	movs	r2, #2
 8003674:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f004 f9cc 	bl	8007a18 <USB_ReadInterrupts>
 8003680:	4603      	mov	r3, r0
 8003682:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800368a:	d11c      	bne.n	80036c6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003694:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10f      	bne.n	80036c6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80036a6:	2110      	movs	r1, #16
 80036a8:	6938      	ldr	r0, [r7, #16]
 80036aa:	f004 f8bb 	bl	8007824 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80036ae:	6938      	ldr	r0, [r7, #16]
 80036b0:	f004 f8ec 	bl	800788c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2101      	movs	r1, #1
 80036ba:	4618      	mov	r0, r3
 80036bc:	f004 fac2 	bl	8007c44 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f007 f88f 	bl	800a7e4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f004 f9a4 	bl	8007a18 <USB_ReadInterrupts>
 80036d0:	4603      	mov	r3, r0
 80036d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036da:	d102      	bne.n	80036e2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f001 f89e 	bl	800481e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f004 f996 	bl	8007a18 <USB_ReadInterrupts>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d106      	bne.n	8003704 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f007 f858 	bl	800a7ac <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2208      	movs	r2, #8
 8003702:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f004 f985 	bl	8007a18 <USB_ReadInterrupts>
 800370e:	4603      	mov	r3, r0
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b10      	cmp	r3, #16
 8003716:	d101      	bne.n	800371c <HAL_HCD_IRQHandler+0x158>
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <HAL_HCD_IRQHandler+0x15a>
 800371c:	2300      	movs	r3, #0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d012      	beq.n	8003748 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699a      	ldr	r2, [r3, #24]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0210 	bic.w	r2, r2, #16
 8003730:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 ffa1 	bl	800467a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0210 	orr.w	r2, r2, #16
 8003746:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f004 f963 	bl	8007a18 <USB_ReadInterrupts>
 8003752:	4603      	mov	r3, r0
 8003754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003758:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800375c:	d13a      	bne.n	80037d4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f004 fd98 	bl	8008298 <USB_HC_ReadInterrupt>
 8003768:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	e025      	b.n	80037bc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	fa22 f303 	lsr.w	r3, r2, r3
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b00      	cmp	r3, #0
 8003782:	d018      	beq.n	80037b6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4413      	add	r3, r2
 800378c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800379a:	d106      	bne.n	80037aa <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	4619      	mov	r1, r3
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f8ab 	bl	80038fe <HCD_HC_IN_IRQHandler>
 80037a8:	e005      	b.n	80037b6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	4619      	mov	r1, r3
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fbf9 	bl	8003fa8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	3301      	adds	r3, #1
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d3d4      	bcc.n	8003770 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037ce:	615a      	str	r2, [r3, #20]
 80037d0:	e000      	b.n	80037d4 <HAL_HCD_IRQHandler+0x210>
      return;
 80037d2:	bf00      	nop
    }
  }
}
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_HCD_Start+0x16>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e013      	b.n	8003818 <HAL_HCD_Start+0x3e>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2101      	movs	r1, #1
 80037fe:	4618      	mov	r0, r3
 8003800:	f004 fa84 	bl	8007d0c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f003 ff9c 	bl	8007746 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <HAL_HCD_Stop+0x16>
 8003832:	2302      	movs	r3, #2
 8003834:	e00d      	b.n	8003852 <HAL_HCD_Stop+0x32>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f004 fe72 	bl	800852c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f004 fa26 	bl	8007cb8 <USB_ResetPort>
 800386c:	4603      	mov	r3, r0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	460b      	mov	r3, r1
 8003880:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	212c      	movs	r1, #44	; 0x2c
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	4413      	add	r3, r2
 800388e:	3360      	adds	r3, #96	; 0x60
 8003890:	781b      	ldrb	r3, [r3, #0]
}
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	460b      	mov	r3, r1
 80038a8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	212c      	movs	r1, #44	; 0x2c
 80038b0:	fb01 f303 	mul.w	r3, r1, r3
 80038b4:	4413      	add	r3, r2
 80038b6:	3350      	adds	r3, #80	; 0x50
 80038b8:	681b      	ldr	r3, [r3, #0]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b082      	sub	sp, #8
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f004 fa6a 	bl	8007dac <USB_GetCurrentFrame>
 80038d8:	4603      	mov	r3, r0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f004 fa45 	bl	8007d7e <USB_GetHostSpeed>
 80038f4:	4603      	mov	r3, r0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b086      	sub	sp, #24
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	460b      	mov	r3, r1
 8003908:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4413      	add	r3, r2
 8003920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b04      	cmp	r3, #4
 800392c:	d11a      	bne.n	8003964 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	4413      	add	r3, r2
 8003936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800393a:	461a      	mov	r2, r3
 800393c:	2304      	movs	r3, #4
 800393e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	212c      	movs	r1, #44	; 0x2c
 8003946:	fb01 f303 	mul.w	r3, r1, r3
 800394a:	4413      	add	r3, r2
 800394c:	3361      	adds	r3, #97	; 0x61
 800394e:	2206      	movs	r2, #6
 8003950:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	4611      	mov	r1, r2
 800395c:	4618      	mov	r0, r3
 800395e:	f004 fcac 	bl	80082ba <USB_HC_Halt>
 8003962:	e0af      	b.n	8003ac4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4413      	add	r3, r2
 800396c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800397a:	d11b      	bne.n	80039b4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4413      	add	r3, r2
 8003984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003988:	461a      	mov	r2, r3
 800398a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800398e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	212c      	movs	r1, #44	; 0x2c
 8003996:	fb01 f303 	mul.w	r3, r1, r3
 800399a:	4413      	add	r3, r2
 800399c:	3361      	adds	r3, #97	; 0x61
 800399e:	2207      	movs	r2, #7
 80039a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f004 fc84 	bl	80082ba <USB_HC_Halt>
 80039b2:	e087      	b.n	8003ac4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 0320 	and.w	r3, r3, #32
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	d109      	bne.n	80039de <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d6:	461a      	mov	r2, r3
 80039d8:	2320      	movs	r3, #32
 80039da:	6093      	str	r3, [r2, #8]
 80039dc:	e072      	b.n	8003ac4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d11a      	bne.n	8003a2a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a00:	461a      	mov	r2, r3
 8003a02:	2308      	movs	r3, #8
 8003a04:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	212c      	movs	r1, #44	; 0x2c
 8003a0c:	fb01 f303 	mul.w	r3, r1, r3
 8003a10:	4413      	add	r3, r2
 8003a12:	3361      	adds	r3, #97	; 0x61
 8003a14:	2205      	movs	r2, #5
 8003a16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	4611      	mov	r1, r2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f004 fc49 	bl	80082ba <USB_HC_Halt>
 8003a28:	e04c      	b.n	8003ac4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a40:	d11b      	bne.n	8003a7a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a54:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	212c      	movs	r1, #44	; 0x2c
 8003a5c:	fb01 f303 	mul.w	r3, r1, r3
 8003a60:	4413      	add	r3, r2
 8003a62:	3361      	adds	r3, #97	; 0x61
 8003a64:	2208      	movs	r2, #8
 8003a66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	4611      	mov	r1, r2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f004 fc21 	bl	80082ba <USB_HC_Halt>
 8003a78:	e024      	b.n	8003ac4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8c:	2b80      	cmp	r3, #128	; 0x80
 8003a8e:	d119      	bne.n	8003ac4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	2380      	movs	r3, #128	; 0x80
 8003aa0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	212c      	movs	r1, #44	; 0x2c
 8003aa8:	fb01 f303 	mul.w	r3, r1, r3
 8003aac:	4413      	add	r3, r2
 8003aae:	3361      	adds	r3, #97	; 0x61
 8003ab0:	2206      	movs	r2, #6
 8003ab2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	4611      	mov	r1, r2
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f004 fbfb 	bl	80082ba <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ada:	d112      	bne.n	8003b02 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f004 fbe7 	bl	80082ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af8:	461a      	mov	r2, r3
 8003afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003afe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003b00:	e24e      	b.n	8003fa0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	f040 80df 	bne.w	8003cd8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d019      	beq.n	8003b56 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	212c      	movs	r1, #44	; 0x2c
 8003b28:	fb01 f303 	mul.w	r3, r1, r3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	3348      	adds	r3, #72	; 0x48
 8003b30:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	0159      	lsls	r1, r3, #5
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	440b      	add	r3, r1
 8003b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003b44:	1ad2      	subs	r2, r2, r3
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	202c      	movs	r0, #44	; 0x2c
 8003b4c:	fb00 f303 	mul.w	r3, r0, r3
 8003b50:	440b      	add	r3, r1
 8003b52:	3350      	adds	r3, #80	; 0x50
 8003b54:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	212c      	movs	r1, #44	; 0x2c
 8003b5c:	fb01 f303 	mul.w	r3, r1, r3
 8003b60:	4413      	add	r3, r2
 8003b62:	3361      	adds	r3, #97	; 0x61
 8003b64:	2201      	movs	r2, #1
 8003b66:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	212c      	movs	r1, #44	; 0x2c
 8003b6e:	fb01 f303 	mul.w	r3, r1, r3
 8003b72:	4413      	add	r3, r2
 8003b74:	335c      	adds	r3, #92	; 0x5c
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b86:	461a      	mov	r2, r3
 8003b88:	2301      	movs	r3, #1
 8003b8a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	212c      	movs	r1, #44	; 0x2c
 8003b92:	fb01 f303 	mul.w	r3, r1, r3
 8003b96:	4413      	add	r3, r2
 8003b98:	333f      	adds	r3, #63	; 0x3f
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d009      	beq.n	8003bb4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	212c      	movs	r1, #44	; 0x2c
 8003ba6:	fb01 f303 	mul.w	r3, r1, r3
 8003baa:	4413      	add	r3, r2
 8003bac:	333f      	adds	r3, #63	; 0x3f
 8003bae:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d111      	bne.n	8003bd8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f004 fb7b 	bl	80082ba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	2310      	movs	r3, #16
 8003bd4:	6093      	str	r3, [r2, #8]
 8003bd6:	e03a      	b.n	8003c4e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	212c      	movs	r1, #44	; 0x2c
 8003bde:	fb01 f303 	mul.w	r3, r1, r3
 8003be2:	4413      	add	r3, r2
 8003be4:	333f      	adds	r3, #63	; 0x3f
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d009      	beq.n	8003c00 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	212c      	movs	r1, #44	; 0x2c
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	333f      	adds	r3, #63	; 0x3f
 8003bfa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d126      	bne.n	8003c4e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	0151      	lsls	r1, r2, #5
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	440a      	add	r2, r1
 8003c16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c1e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	212c      	movs	r1, #44	; 0x2c
 8003c26:	fb01 f303 	mul.w	r3, r1, r3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3360      	adds	r3, #96	; 0x60
 8003c2e:	2201      	movs	r2, #1
 8003c30:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	b2d9      	uxtb	r1, r3
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	202c      	movs	r0, #44	; 0x2c
 8003c3c:	fb00 f303 	mul.w	r3, r0, r3
 8003c40:	4413      	add	r3, r2
 8003c42:	3360      	adds	r3, #96	; 0x60
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f006 fdd9 	bl	800a800 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d12b      	bne.n	8003cae <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	212c      	movs	r1, #44	; 0x2c
 8003c5c:	fb01 f303 	mul.w	r3, r1, r3
 8003c60:	4413      	add	r3, r2
 8003c62:	3348      	adds	r3, #72	; 0x48
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	202c      	movs	r0, #44	; 0x2c
 8003c6c:	fb00 f202 	mul.w	r2, r0, r2
 8003c70:	440a      	add	r2, r1
 8003c72:	3240      	adds	r2, #64	; 0x40
 8003c74:	8812      	ldrh	r2, [r2, #0]
 8003c76:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 818e 	beq.w	8003fa0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	212c      	movs	r1, #44	; 0x2c
 8003c8a:	fb01 f303 	mul.w	r3, r1, r3
 8003c8e:	4413      	add	r3, r2
 8003c90:	3354      	adds	r3, #84	; 0x54
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	f083 0301 	eor.w	r3, r3, #1
 8003c98:	b2d8      	uxtb	r0, r3
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	212c      	movs	r1, #44	; 0x2c
 8003ca0:	fb01 f303 	mul.w	r3, r1, r3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3354      	adds	r3, #84	; 0x54
 8003ca8:	4602      	mov	r2, r0
 8003caa:	701a      	strb	r2, [r3, #0]
}
 8003cac:	e178      	b.n	8003fa0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	212c      	movs	r1, #44	; 0x2c
 8003cb4:	fb01 f303 	mul.w	r3, r1, r3
 8003cb8:	4413      	add	r3, r2
 8003cba:	3354      	adds	r3, #84	; 0x54
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	f083 0301 	eor.w	r3, r3, #1
 8003cc2:	b2d8      	uxtb	r0, r3
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	212c      	movs	r1, #44	; 0x2c
 8003cca:	fb01 f303 	mul.w	r3, r1, r3
 8003cce:	4413      	add	r3, r2
 8003cd0:	3354      	adds	r3, #84	; 0x54
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	701a      	strb	r2, [r3, #0]
}
 8003cd6:	e163      	b.n	8003fa0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	f040 80f6 	bne.w	8003edc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	212c      	movs	r1, #44	; 0x2c
 8003cf6:	fb01 f303 	mul.w	r3, r1, r3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3361      	adds	r3, #97	; 0x61
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d109      	bne.n	8003d18 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	212c      	movs	r1, #44	; 0x2c
 8003d0a:	fb01 f303 	mul.w	r3, r1, r3
 8003d0e:	4413      	add	r3, r2
 8003d10:	3360      	adds	r3, #96	; 0x60
 8003d12:	2201      	movs	r2, #1
 8003d14:	701a      	strb	r2, [r3, #0]
 8003d16:	e0c9      	b.n	8003eac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	212c      	movs	r1, #44	; 0x2c
 8003d1e:	fb01 f303 	mul.w	r3, r1, r3
 8003d22:	4413      	add	r3, r2
 8003d24:	3361      	adds	r3, #97	; 0x61
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b05      	cmp	r3, #5
 8003d2a:	d109      	bne.n	8003d40 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	212c      	movs	r1, #44	; 0x2c
 8003d32:	fb01 f303 	mul.w	r3, r1, r3
 8003d36:	4413      	add	r3, r2
 8003d38:	3360      	adds	r3, #96	; 0x60
 8003d3a:	2205      	movs	r2, #5
 8003d3c:	701a      	strb	r2, [r3, #0]
 8003d3e:	e0b5      	b.n	8003eac <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	212c      	movs	r1, #44	; 0x2c
 8003d46:	fb01 f303 	mul.w	r3, r1, r3
 8003d4a:	4413      	add	r3, r2
 8003d4c:	3361      	adds	r3, #97	; 0x61
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2b06      	cmp	r3, #6
 8003d52:	d009      	beq.n	8003d68 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	212c      	movs	r1, #44	; 0x2c
 8003d5a:	fb01 f303 	mul.w	r3, r1, r3
 8003d5e:	4413      	add	r3, r2
 8003d60:	3361      	adds	r3, #97	; 0x61
 8003d62:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d150      	bne.n	8003e0a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	212c      	movs	r1, #44	; 0x2c
 8003d6e:	fb01 f303 	mul.w	r3, r1, r3
 8003d72:	4413      	add	r3, r2
 8003d74:	335c      	adds	r3, #92	; 0x5c
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	202c      	movs	r0, #44	; 0x2c
 8003d80:	fb00 f303 	mul.w	r3, r0, r3
 8003d84:	440b      	add	r3, r1
 8003d86:	335c      	adds	r3, #92	; 0x5c
 8003d88:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	212c      	movs	r1, #44	; 0x2c
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	4413      	add	r3, r2
 8003d96:	335c      	adds	r3, #92	; 0x5c
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d912      	bls.n	8003dc4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	212c      	movs	r1, #44	; 0x2c
 8003da4:	fb01 f303 	mul.w	r3, r1, r3
 8003da8:	4413      	add	r3, r2
 8003daa:	335c      	adds	r3, #92	; 0x5c
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	212c      	movs	r1, #44	; 0x2c
 8003db6:	fb01 f303 	mul.w	r3, r1, r3
 8003dba:	4413      	add	r3, r2
 8003dbc:	3360      	adds	r3, #96	; 0x60
 8003dbe:	2204      	movs	r2, #4
 8003dc0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003dc2:	e073      	b.n	8003eac <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	212c      	movs	r1, #44	; 0x2c
 8003dca:	fb01 f303 	mul.w	r3, r1, r3
 8003dce:	4413      	add	r3, r2
 8003dd0:	3360      	adds	r3, #96	; 0x60
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003dec:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003df4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e02:	461a      	mov	r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e08:	e050      	b.n	8003eac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	212c      	movs	r1, #44	; 0x2c
 8003e10:	fb01 f303 	mul.w	r3, r1, r3
 8003e14:	4413      	add	r3, r2
 8003e16:	3361      	adds	r3, #97	; 0x61
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d122      	bne.n	8003e64 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	212c      	movs	r1, #44	; 0x2c
 8003e24:	fb01 f303 	mul.w	r3, r1, r3
 8003e28:	4413      	add	r3, r2
 8003e2a:	3360      	adds	r3, #96	; 0x60
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e46:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e4e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	e023      	b.n	8003eac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	212c      	movs	r1, #44	; 0x2c
 8003e6a:	fb01 f303 	mul.w	r3, r1, r3
 8003e6e:	4413      	add	r3, r2
 8003e70:	3361      	adds	r3, #97	; 0x61
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b07      	cmp	r3, #7
 8003e76:	d119      	bne.n	8003eac <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	212c      	movs	r1, #44	; 0x2c
 8003e7e:	fb01 f303 	mul.w	r3, r1, r3
 8003e82:	4413      	add	r3, r2
 8003e84:	335c      	adds	r3, #92	; 0x5c
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	1c5a      	adds	r2, r3, #1
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	202c      	movs	r0, #44	; 0x2c
 8003e90:	fb00 f303 	mul.w	r3, r0, r3
 8003e94:	440b      	add	r3, r1
 8003e96:	335c      	adds	r3, #92	; 0x5c
 8003e98:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	212c      	movs	r1, #44	; 0x2c
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	3360      	adds	r3, #96	; 0x60
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb8:	461a      	mov	r2, r3
 8003eba:	2302      	movs	r3, #2
 8003ebc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	b2d9      	uxtb	r1, r3
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	202c      	movs	r0, #44	; 0x2c
 8003ec8:	fb00 f303 	mul.w	r3, r0, r3
 8003ecc:	4413      	add	r3, r2
 8003ece:	3360      	adds	r3, #96	; 0x60
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f006 fc93 	bl	800a800 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003eda:	e061      	b.n	8003fa0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 0310 	and.w	r3, r3, #16
 8003eee:	2b10      	cmp	r3, #16
 8003ef0:	d156      	bne.n	8003fa0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	212c      	movs	r1, #44	; 0x2c
 8003ef8:	fb01 f303 	mul.w	r3, r1, r3
 8003efc:	4413      	add	r3, r2
 8003efe:	333f      	adds	r3, #63	; 0x3f
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d111      	bne.n	8003f2a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	212c      	movs	r1, #44	; 0x2c
 8003f0c:	fb01 f303 	mul.w	r3, r1, r3
 8003f10:	4413      	add	r3, r2
 8003f12:	335c      	adds	r3, #92	; 0x5c
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	4611      	mov	r1, r2
 8003f22:	4618      	mov	r0, r3
 8003f24:	f004 f9c9 	bl	80082ba <USB_HC_Halt>
 8003f28:	e031      	b.n	8003f8e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	212c      	movs	r1, #44	; 0x2c
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	4413      	add	r3, r2
 8003f36:	333f      	adds	r3, #63	; 0x3f
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d009      	beq.n	8003f52 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	212c      	movs	r1, #44	; 0x2c
 8003f44:	fb01 f303 	mul.w	r3, r1, r3
 8003f48:	4413      	add	r3, r2
 8003f4a:	333f      	adds	r3, #63	; 0x3f
 8003f4c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d11d      	bne.n	8003f8e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	212c      	movs	r1, #44	; 0x2c
 8003f58:	fb01 f303 	mul.w	r3, r1, r3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	335c      	adds	r3, #92	; 0x5c
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d110      	bne.n	8003f8e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	212c      	movs	r1, #44	; 0x2c
 8003f72:	fb01 f303 	mul.w	r3, r1, r3
 8003f76:	4413      	add	r3, r2
 8003f78:	3361      	adds	r3, #97	; 0x61
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	4611      	mov	r1, r2
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f004 f996 	bl	80082ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	2310      	movs	r3, #16
 8003f9e:	6093      	str	r3, [r2, #8]
}
 8003fa0:	bf00      	nop
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003fbe:	78fb      	ldrb	r3, [r7, #3]
 8003fc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d11a      	bne.n	800400e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	2304      	movs	r3, #4
 8003fe8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	212c      	movs	r1, #44	; 0x2c
 8003ff0:	fb01 f303 	mul.w	r3, r1, r3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	3361      	adds	r3, #97	; 0x61
 8003ff8:	2206      	movs	r2, #6
 8003ffa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	4611      	mov	r1, r2
 8004006:	4618      	mov	r0, r3
 8004008:	f004 f957 	bl	80082ba <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800400c:	e331      	b.n	8004672 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	4413      	add	r3, r2
 8004016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 0320 	and.w	r3, r3, #32
 8004020:	2b20      	cmp	r3, #32
 8004022:	d12e      	bne.n	8004082 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	4413      	add	r3, r2
 800402c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004030:	461a      	mov	r2, r3
 8004032:	2320      	movs	r3, #32
 8004034:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	212c      	movs	r1, #44	; 0x2c
 800403c:	fb01 f303 	mul.w	r3, r1, r3
 8004040:	4413      	add	r3, r2
 8004042:	333d      	adds	r3, #61	; 0x3d
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b01      	cmp	r3, #1
 8004048:	f040 8313 	bne.w	8004672 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	212c      	movs	r1, #44	; 0x2c
 8004052:	fb01 f303 	mul.w	r3, r1, r3
 8004056:	4413      	add	r3, r2
 8004058:	333d      	adds	r3, #61	; 0x3d
 800405a:	2200      	movs	r2, #0
 800405c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	212c      	movs	r1, #44	; 0x2c
 8004064:	fb01 f303 	mul.w	r3, r1, r3
 8004068:	4413      	add	r3, r2
 800406a:	3360      	adds	r3, #96	; 0x60
 800406c:	2202      	movs	r2, #2
 800406e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	4611      	mov	r1, r2
 800407a:	4618      	mov	r0, r3
 800407c:	f004 f91d 	bl	80082ba <USB_HC_Halt>
}
 8004080:	e2f7      	b.n	8004672 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	4413      	add	r3, r2
 800408a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004098:	d112      	bne.n	80040c0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a6:	461a      	mov	r2, r3
 80040a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040ac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	b2d2      	uxtb	r2, r2
 80040b6:	4611      	mov	r1, r2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f004 f8fe 	bl	80082ba <USB_HC_Halt>
}
 80040be:	e2d8      	b.n	8004672 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d140      	bne.n	8004158 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	212c      	movs	r1, #44	; 0x2c
 80040dc:	fb01 f303 	mul.w	r3, r1, r3
 80040e0:	4413      	add	r3, r2
 80040e2:	335c      	adds	r3, #92	; 0x5c
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fa:	2b40      	cmp	r3, #64	; 0x40
 80040fc:	d111      	bne.n	8004122 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	212c      	movs	r1, #44	; 0x2c
 8004104:	fb01 f303 	mul.w	r3, r1, r3
 8004108:	4413      	add	r3, r2
 800410a:	333d      	adds	r3, #61	; 0x3d
 800410c:	2201      	movs	r2, #1
 800410e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	4413      	add	r3, r2
 8004118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411c:	461a      	mov	r2, r3
 800411e:	2340      	movs	r3, #64	; 0x40
 8004120:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	4413      	add	r3, r2
 800412a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412e:	461a      	mov	r2, r3
 8004130:	2301      	movs	r3, #1
 8004132:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	212c      	movs	r1, #44	; 0x2c
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	4413      	add	r3, r2
 8004140:	3361      	adds	r3, #97	; 0x61
 8004142:	2201      	movs	r2, #1
 8004144:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	4611      	mov	r1, r2
 8004150:	4618      	mov	r0, r3
 8004152:	f004 f8b2 	bl	80082ba <USB_HC_Halt>
}
 8004156:	e28c      	b.n	8004672 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	4413      	add	r3, r2
 8004160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416a:	2b40      	cmp	r3, #64	; 0x40
 800416c:	d12c      	bne.n	80041c8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	212c      	movs	r1, #44	; 0x2c
 8004174:	fb01 f303 	mul.w	r3, r1, r3
 8004178:	4413      	add	r3, r2
 800417a:	3361      	adds	r3, #97	; 0x61
 800417c:	2204      	movs	r2, #4
 800417e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	212c      	movs	r1, #44	; 0x2c
 8004186:	fb01 f303 	mul.w	r3, r1, r3
 800418a:	4413      	add	r3, r2
 800418c:	333d      	adds	r3, #61	; 0x3d
 800418e:	2201      	movs	r2, #1
 8004190:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	212c      	movs	r1, #44	; 0x2c
 8004198:	fb01 f303 	mul.w	r3, r1, r3
 800419c:	4413      	add	r3, r2
 800419e:	335c      	adds	r3, #92	; 0x5c
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	4611      	mov	r1, r2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f004 f883 	bl	80082ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c0:	461a      	mov	r2, r3
 80041c2:	2340      	movs	r3, #64	; 0x40
 80041c4:	6093      	str	r3, [r2, #8]
}
 80041c6:	e254      	b.n	8004672 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d11a      	bne.n	8004214 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ea:	461a      	mov	r2, r3
 80041ec:	2308      	movs	r3, #8
 80041ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	212c      	movs	r1, #44	; 0x2c
 80041f6:	fb01 f303 	mul.w	r3, r1, r3
 80041fa:	4413      	add	r3, r2
 80041fc:	3361      	adds	r3, #97	; 0x61
 80041fe:	2205      	movs	r2, #5
 8004200:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	4611      	mov	r1, r2
 800420c:	4618      	mov	r0, r3
 800420e:	f004 f854 	bl	80082ba <USB_HC_Halt>
}
 8004212:	e22e      	b.n	8004672 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	4413      	add	r3, r2
 800421c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b10      	cmp	r3, #16
 8004228:	d140      	bne.n	80042ac <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	212c      	movs	r1, #44	; 0x2c
 8004230:	fb01 f303 	mul.w	r3, r1, r3
 8004234:	4413      	add	r3, r2
 8004236:	335c      	adds	r3, #92	; 0x5c
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	212c      	movs	r1, #44	; 0x2c
 8004242:	fb01 f303 	mul.w	r3, r1, r3
 8004246:	4413      	add	r3, r2
 8004248:	3361      	adds	r3, #97	; 0x61
 800424a:	2203      	movs	r2, #3
 800424c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	212c      	movs	r1, #44	; 0x2c
 8004254:	fb01 f303 	mul.w	r3, r1, r3
 8004258:	4413      	add	r3, r2
 800425a:	333d      	adds	r3, #61	; 0x3d
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d112      	bne.n	8004288 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	212c      	movs	r1, #44	; 0x2c
 8004268:	fb01 f303 	mul.w	r3, r1, r3
 800426c:	4413      	add	r3, r2
 800426e:	333c      	adds	r3, #60	; 0x3c
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d108      	bne.n	8004288 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	212c      	movs	r1, #44	; 0x2c
 800427c:	fb01 f303 	mul.w	r3, r1, r3
 8004280:	4413      	add	r3, r2
 8004282:	333d      	adds	r3, #61	; 0x3d
 8004284:	2201      	movs	r2, #1
 8004286:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	4611      	mov	r1, r2
 8004292:	4618      	mov	r0, r3
 8004294:	f004 f811 	bl	80082ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a4:	461a      	mov	r2, r3
 80042a6:	2310      	movs	r3, #16
 80042a8:	6093      	str	r3, [r2, #8]
}
 80042aa:	e1e2      	b.n	8004672 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042be:	2b80      	cmp	r3, #128	; 0x80
 80042c0:	d164      	bne.n	800438c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d111      	bne.n	80042ee <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	212c      	movs	r1, #44	; 0x2c
 80042d0:	fb01 f303 	mul.w	r3, r1, r3
 80042d4:	4413      	add	r3, r2
 80042d6:	3361      	adds	r3, #97	; 0x61
 80042d8:	2206      	movs	r2, #6
 80042da:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	4611      	mov	r1, r2
 80042e6:	4618      	mov	r0, r3
 80042e8:	f003 ffe7 	bl	80082ba <USB_HC_Halt>
 80042ec:	e044      	b.n	8004378 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	212c      	movs	r1, #44	; 0x2c
 80042f4:	fb01 f303 	mul.w	r3, r1, r3
 80042f8:	4413      	add	r3, r2
 80042fa:	335c      	adds	r3, #92	; 0x5c
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	202c      	movs	r0, #44	; 0x2c
 8004306:	fb00 f303 	mul.w	r3, r0, r3
 800430a:	440b      	add	r3, r1
 800430c:	335c      	adds	r3, #92	; 0x5c
 800430e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	212c      	movs	r1, #44	; 0x2c
 8004316:	fb01 f303 	mul.w	r3, r1, r3
 800431a:	4413      	add	r3, r2
 800431c:	335c      	adds	r3, #92	; 0x5c
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d920      	bls.n	8004366 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	212c      	movs	r1, #44	; 0x2c
 800432a:	fb01 f303 	mul.w	r3, r1, r3
 800432e:	4413      	add	r3, r2
 8004330:	335c      	adds	r3, #92	; 0x5c
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	212c      	movs	r1, #44	; 0x2c
 800433c:	fb01 f303 	mul.w	r3, r1, r3
 8004340:	4413      	add	r3, r2
 8004342:	3360      	adds	r3, #96	; 0x60
 8004344:	2204      	movs	r2, #4
 8004346:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	b2d9      	uxtb	r1, r3
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	202c      	movs	r0, #44	; 0x2c
 8004352:	fb00 f303 	mul.w	r3, r0, r3
 8004356:	4413      	add	r3, r2
 8004358:	3360      	adds	r3, #96	; 0x60
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	461a      	mov	r2, r3
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f006 fa4e 	bl	800a800 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004364:	e008      	b.n	8004378 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	212c      	movs	r1, #44	; 0x2c
 800436c:	fb01 f303 	mul.w	r3, r1, r3
 8004370:	4413      	add	r3, r2
 8004372:	3360      	adds	r3, #96	; 0x60
 8004374:	2202      	movs	r2, #2
 8004376:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	4413      	add	r3, r2
 8004380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004384:	461a      	mov	r2, r3
 8004386:	2380      	movs	r3, #128	; 0x80
 8004388:	6093      	str	r3, [r2, #8]
}
 800438a:	e172      	b.n	8004672 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	4413      	add	r3, r2
 8004394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800439e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a2:	d11b      	bne.n	80043dc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	212c      	movs	r1, #44	; 0x2c
 80043aa:	fb01 f303 	mul.w	r3, r1, r3
 80043ae:	4413      	add	r3, r2
 80043b0:	3361      	adds	r3, #97	; 0x61
 80043b2:	2208      	movs	r2, #8
 80043b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	4611      	mov	r1, r2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f003 ff7a 	bl	80082ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d2:	461a      	mov	r2, r3
 80043d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043d8:	6093      	str	r3, [r2, #8]
}
 80043da:	e14a      	b.n	8004672 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	f040 813f 	bne.w	8004672 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	212c      	movs	r1, #44	; 0x2c
 80043fa:	fb01 f303 	mul.w	r3, r1, r3
 80043fe:	4413      	add	r3, r2
 8004400:	3361      	adds	r3, #97	; 0x61
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d17d      	bne.n	8004504 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	212c      	movs	r1, #44	; 0x2c
 800440e:	fb01 f303 	mul.w	r3, r1, r3
 8004412:	4413      	add	r3, r2
 8004414:	3360      	adds	r3, #96	; 0x60
 8004416:	2201      	movs	r2, #1
 8004418:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	212c      	movs	r1, #44	; 0x2c
 8004420:	fb01 f303 	mul.w	r3, r1, r3
 8004424:	4413      	add	r3, r2
 8004426:	333f      	adds	r3, #63	; 0x3f
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d00a      	beq.n	8004444 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	212c      	movs	r1, #44	; 0x2c
 8004434:	fb01 f303 	mul.w	r3, r1, r3
 8004438:	4413      	add	r3, r2
 800443a:	333f      	adds	r3, #63	; 0x3f
 800443c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800443e:	2b03      	cmp	r3, #3
 8004440:	f040 8100 	bne.w	8004644 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d113      	bne.n	8004474 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	212c      	movs	r1, #44	; 0x2c
 8004452:	fb01 f303 	mul.w	r3, r1, r3
 8004456:	4413      	add	r3, r2
 8004458:	3355      	adds	r3, #85	; 0x55
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	f083 0301 	eor.w	r3, r3, #1
 8004460:	b2d8      	uxtb	r0, r3
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	212c      	movs	r1, #44	; 0x2c
 8004468:	fb01 f303 	mul.w	r3, r1, r3
 800446c:	4413      	add	r3, r2
 800446e:	3355      	adds	r3, #85	; 0x55
 8004470:	4602      	mov	r2, r0
 8004472:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	2b01      	cmp	r3, #1
 800447a:	f040 80e3 	bne.w	8004644 <HCD_HC_OUT_IRQHandler+0x69c>
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	212c      	movs	r1, #44	; 0x2c
 8004484:	fb01 f303 	mul.w	r3, r1, r3
 8004488:	4413      	add	r3, r2
 800448a:	334c      	adds	r3, #76	; 0x4c
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 80d8 	beq.w	8004644 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	212c      	movs	r1, #44	; 0x2c
 800449a:	fb01 f303 	mul.w	r3, r1, r3
 800449e:	4413      	add	r3, r2
 80044a0:	334c      	adds	r3, #76	; 0x4c
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	202c      	movs	r0, #44	; 0x2c
 80044aa:	fb00 f202 	mul.w	r2, r0, r2
 80044ae:	440a      	add	r2, r1
 80044b0:	3240      	adds	r2, #64	; 0x40
 80044b2:	8812      	ldrh	r2, [r2, #0]
 80044b4:	4413      	add	r3, r2
 80044b6:	3b01      	subs	r3, #1
 80044b8:	6879      	ldr	r1, [r7, #4]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	202c      	movs	r0, #44	; 0x2c
 80044be:	fb00 f202 	mul.w	r2, r0, r2
 80044c2:	440a      	add	r2, r1
 80044c4:	3240      	adds	r2, #64	; 0x40
 80044c6:	8812      	ldrh	r2, [r2, #0]
 80044c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80b5 	beq.w	8004644 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	212c      	movs	r1, #44	; 0x2c
 80044e0:	fb01 f303 	mul.w	r3, r1, r3
 80044e4:	4413      	add	r3, r2
 80044e6:	3355      	adds	r3, #85	; 0x55
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	f083 0301 	eor.w	r3, r3, #1
 80044ee:	b2d8      	uxtb	r0, r3
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	212c      	movs	r1, #44	; 0x2c
 80044f6:	fb01 f303 	mul.w	r3, r1, r3
 80044fa:	4413      	add	r3, r2
 80044fc:	3355      	adds	r3, #85	; 0x55
 80044fe:	4602      	mov	r2, r0
 8004500:	701a      	strb	r2, [r3, #0]
 8004502:	e09f      	b.n	8004644 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	212c      	movs	r1, #44	; 0x2c
 800450a:	fb01 f303 	mul.w	r3, r1, r3
 800450e:	4413      	add	r3, r2
 8004510:	3361      	adds	r3, #97	; 0x61
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b03      	cmp	r3, #3
 8004516:	d109      	bne.n	800452c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	212c      	movs	r1, #44	; 0x2c
 800451e:	fb01 f303 	mul.w	r3, r1, r3
 8004522:	4413      	add	r3, r2
 8004524:	3360      	adds	r3, #96	; 0x60
 8004526:	2202      	movs	r2, #2
 8004528:	701a      	strb	r2, [r3, #0]
 800452a:	e08b      	b.n	8004644 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	212c      	movs	r1, #44	; 0x2c
 8004532:	fb01 f303 	mul.w	r3, r1, r3
 8004536:	4413      	add	r3, r2
 8004538:	3361      	adds	r3, #97	; 0x61
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b04      	cmp	r3, #4
 800453e:	d109      	bne.n	8004554 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	212c      	movs	r1, #44	; 0x2c
 8004546:	fb01 f303 	mul.w	r3, r1, r3
 800454a:	4413      	add	r3, r2
 800454c:	3360      	adds	r3, #96	; 0x60
 800454e:	2202      	movs	r2, #2
 8004550:	701a      	strb	r2, [r3, #0]
 8004552:	e077      	b.n	8004644 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	212c      	movs	r1, #44	; 0x2c
 800455a:	fb01 f303 	mul.w	r3, r1, r3
 800455e:	4413      	add	r3, r2
 8004560:	3361      	adds	r3, #97	; 0x61
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b05      	cmp	r3, #5
 8004566:	d109      	bne.n	800457c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	212c      	movs	r1, #44	; 0x2c
 800456e:	fb01 f303 	mul.w	r3, r1, r3
 8004572:	4413      	add	r3, r2
 8004574:	3360      	adds	r3, #96	; 0x60
 8004576:	2205      	movs	r2, #5
 8004578:	701a      	strb	r2, [r3, #0]
 800457a:	e063      	b.n	8004644 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	212c      	movs	r1, #44	; 0x2c
 8004582:	fb01 f303 	mul.w	r3, r1, r3
 8004586:	4413      	add	r3, r2
 8004588:	3361      	adds	r3, #97	; 0x61
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b06      	cmp	r3, #6
 800458e:	d009      	beq.n	80045a4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	212c      	movs	r1, #44	; 0x2c
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	4413      	add	r3, r2
 800459c:	3361      	adds	r3, #97	; 0x61
 800459e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d14f      	bne.n	8004644 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	212c      	movs	r1, #44	; 0x2c
 80045aa:	fb01 f303 	mul.w	r3, r1, r3
 80045ae:	4413      	add	r3, r2
 80045b0:	335c      	adds	r3, #92	; 0x5c
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	202c      	movs	r0, #44	; 0x2c
 80045bc:	fb00 f303 	mul.w	r3, r0, r3
 80045c0:	440b      	add	r3, r1
 80045c2:	335c      	adds	r3, #92	; 0x5c
 80045c4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	212c      	movs	r1, #44	; 0x2c
 80045cc:	fb01 f303 	mul.w	r3, r1, r3
 80045d0:	4413      	add	r3, r2
 80045d2:	335c      	adds	r3, #92	; 0x5c
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d912      	bls.n	8004600 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	212c      	movs	r1, #44	; 0x2c
 80045e0:	fb01 f303 	mul.w	r3, r1, r3
 80045e4:	4413      	add	r3, r2
 80045e6:	335c      	adds	r3, #92	; 0x5c
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	212c      	movs	r1, #44	; 0x2c
 80045f2:	fb01 f303 	mul.w	r3, r1, r3
 80045f6:	4413      	add	r3, r2
 80045f8:	3360      	adds	r3, #96	; 0x60
 80045fa:	2204      	movs	r2, #4
 80045fc:	701a      	strb	r2, [r3, #0]
 80045fe:	e021      	b.n	8004644 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	212c      	movs	r1, #44	; 0x2c
 8004606:	fb01 f303 	mul.w	r3, r1, r3
 800460a:	4413      	add	r3, r2
 800460c:	3360      	adds	r3, #96	; 0x60
 800460e:	2202      	movs	r2, #2
 8004610:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	4413      	add	r3, r2
 800461a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004628:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004630:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	4413      	add	r3, r2
 800463a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800463e:	461a      	mov	r2, r3
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	4413      	add	r3, r2
 800464c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004650:	461a      	mov	r2, r3
 8004652:	2302      	movs	r3, #2
 8004654:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	b2d9      	uxtb	r1, r3
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	202c      	movs	r0, #44	; 0x2c
 8004660:	fb00 f303 	mul.w	r3, r0, r3
 8004664:	4413      	add	r3, r2
 8004666:	3360      	adds	r3, #96	; 0x60
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f006 f8c7 	bl	800a800 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004672:	bf00      	nop
 8004674:	3720      	adds	r7, #32
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b08a      	sub	sp, #40	; 0x28
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	0c5b      	lsrs	r3, r3, #17
 80046a0:	f003 030f 	and.w	r3, r3, #15
 80046a4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	091b      	lsrs	r3, r3, #4
 80046aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046ae:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d004      	beq.n	80046c0 <HCD_RXQLVL_IRQHandler+0x46>
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b05      	cmp	r3, #5
 80046ba:	f000 80a9 	beq.w	8004810 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80046be:	e0aa      	b.n	8004816 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 80a6 	beq.w	8004814 <HCD_RXQLVL_IRQHandler+0x19a>
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	212c      	movs	r1, #44	; 0x2c
 80046ce:	fb01 f303 	mul.w	r3, r1, r3
 80046d2:	4413      	add	r3, r2
 80046d4:	3344      	adds	r3, #68	; 0x44
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 809b 	beq.w	8004814 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	212c      	movs	r1, #44	; 0x2c
 80046e4:	fb01 f303 	mul.w	r3, r1, r3
 80046e8:	4413      	add	r3, r2
 80046ea:	3350      	adds	r3, #80	; 0x50
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	441a      	add	r2, r3
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	202c      	movs	r0, #44	; 0x2c
 80046f8:	fb00 f303 	mul.w	r3, r0, r3
 80046fc:	440b      	add	r3, r1
 80046fe:	334c      	adds	r3, #76	; 0x4c
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d87a      	bhi.n	80047fc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6818      	ldr	r0, [r3, #0]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	212c      	movs	r1, #44	; 0x2c
 8004710:	fb01 f303 	mul.w	r3, r1, r3
 8004714:	4413      	add	r3, r2
 8004716:	3344      	adds	r3, #68	; 0x44
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	b292      	uxth	r2, r2
 800471e:	4619      	mov	r1, r3
 8004720:	f003 f922 	bl	8007968 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	212c      	movs	r1, #44	; 0x2c
 800472a:	fb01 f303 	mul.w	r3, r1, r3
 800472e:	4413      	add	r3, r2
 8004730:	3344      	adds	r3, #68	; 0x44
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	441a      	add	r2, r3
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	202c      	movs	r0, #44	; 0x2c
 800473e:	fb00 f303 	mul.w	r3, r0, r3
 8004742:	440b      	add	r3, r1
 8004744:	3344      	adds	r3, #68	; 0x44
 8004746:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	212c      	movs	r1, #44	; 0x2c
 800474e:	fb01 f303 	mul.w	r3, r1, r3
 8004752:	4413      	add	r3, r2
 8004754:	3350      	adds	r3, #80	; 0x50
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	441a      	add	r2, r3
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	202c      	movs	r0, #44	; 0x2c
 8004762:	fb00 f303 	mul.w	r3, r0, r3
 8004766:	440b      	add	r3, r1
 8004768:	3350      	adds	r3, #80	; 0x50
 800476a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	4413      	add	r3, r2
 8004774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	0cdb      	lsrs	r3, r3, #19
 800477c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004780:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	212c      	movs	r1, #44	; 0x2c
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	4413      	add	r3, r2
 800478e:	3340      	adds	r3, #64	; 0x40
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	461a      	mov	r2, r3
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4293      	cmp	r3, r2
 8004798:	d13c      	bne.n	8004814 <HCD_RXQLVL_IRQHandler+0x19a>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d039      	beq.n	8004814 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047b6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047be:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047cc:	461a      	mov	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	212c      	movs	r1, #44	; 0x2c
 80047d8:	fb01 f303 	mul.w	r3, r1, r3
 80047dc:	4413      	add	r3, r2
 80047de:	3354      	adds	r3, #84	; 0x54
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	f083 0301 	eor.w	r3, r3, #1
 80047e6:	b2d8      	uxtb	r0, r3
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	212c      	movs	r1, #44	; 0x2c
 80047ee:	fb01 f303 	mul.w	r3, r1, r3
 80047f2:	4413      	add	r3, r2
 80047f4:	3354      	adds	r3, #84	; 0x54
 80047f6:	4602      	mov	r2, r0
 80047f8:	701a      	strb	r2, [r3, #0]
      break;
 80047fa:	e00b      	b.n	8004814 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	212c      	movs	r1, #44	; 0x2c
 8004802:	fb01 f303 	mul.w	r3, r1, r3
 8004806:	4413      	add	r3, r2
 8004808:	3360      	adds	r3, #96	; 0x60
 800480a:	2204      	movs	r2, #4
 800480c:	701a      	strb	r2, [r3, #0]
      break;
 800480e:	e001      	b.n	8004814 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004810:	bf00      	nop
 8004812:	e000      	b.n	8004816 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004814:	bf00      	nop
  }
}
 8004816:	bf00      	nop
 8004818:	3728      	adds	r7, #40	; 0x28
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b086      	sub	sp, #24
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800484a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b02      	cmp	r3, #2
 8004854:	d10b      	bne.n	800486e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b01      	cmp	r3, #1
 800485e:	d102      	bne.n	8004866 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f005 ffb1 	bl	800a7c8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f043 0302 	orr.w	r3, r3, #2
 800486c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b08      	cmp	r3, #8
 8004876:	d132      	bne.n	80048de <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f043 0308 	orr.w	r3, r3, #8
 800487e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 0304 	and.w	r3, r3, #4
 8004886:	2b04      	cmp	r3, #4
 8004888:	d126      	bne.n	80048d8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	2b02      	cmp	r3, #2
 8004890:	d113      	bne.n	80048ba <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004898:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800489c:	d106      	bne.n	80048ac <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2102      	movs	r1, #2
 80048a4:	4618      	mov	r0, r3
 80048a6:	f003 f9cd 	bl	8007c44 <USB_InitFSLSPClkSel>
 80048aa:	e011      	b.n	80048d0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2101      	movs	r1, #1
 80048b2:	4618      	mov	r0, r3
 80048b4:	f003 f9c6 	bl	8007c44 <USB_InitFSLSPClkSel>
 80048b8:	e00a      	b.n	80048d0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d106      	bne.n	80048d0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048c8:	461a      	mov	r2, r3
 80048ca:	f64e 2360 	movw	r3, #60000	; 0xea60
 80048ce:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f005 ffa3 	bl	800a81c <HAL_HCD_PortEnabled_Callback>
 80048d6:	e002      	b.n	80048de <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f005 ffad 	bl	800a838 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f003 0320 	and.w	r3, r3, #32
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d103      	bne.n	80048f0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f043 0320 	orr.w	r3, r3, #32
 80048ee:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048f6:	461a      	mov	r2, r3
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	6013      	str	r3, [r2, #0]
}
 80048fc:	bf00      	nop
 80048fe:	3718      	adds	r7, #24
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e12b      	b.n	8004b6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fd fb28 	bl	8001f80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2224      	movs	r2, #36	; 0x24
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0201 	bic.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004956:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004966:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004968:	f002 f9ca 	bl	8006d00 <HAL_RCC_GetPCLK1Freq>
 800496c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	4a81      	ldr	r2, [pc, #516]	; (8004b78 <HAL_I2C_Init+0x274>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d807      	bhi.n	8004988 <HAL_I2C_Init+0x84>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4a80      	ldr	r2, [pc, #512]	; (8004b7c <HAL_I2C_Init+0x278>)
 800497c:	4293      	cmp	r3, r2
 800497e:	bf94      	ite	ls
 8004980:	2301      	movls	r3, #1
 8004982:	2300      	movhi	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	e006      	b.n	8004996 <HAL_I2C_Init+0x92>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4a7d      	ldr	r2, [pc, #500]	; (8004b80 <HAL_I2C_Init+0x27c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	bf94      	ite	ls
 8004990:	2301      	movls	r3, #1
 8004992:	2300      	movhi	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e0e7      	b.n	8004b6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4a78      	ldr	r2, [pc, #480]	; (8004b84 <HAL_I2C_Init+0x280>)
 80049a2:	fba2 2303 	umull	r2, r3, r2, r3
 80049a6:	0c9b      	lsrs	r3, r3, #18
 80049a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	4a6a      	ldr	r2, [pc, #424]	; (8004b78 <HAL_I2C_Init+0x274>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d802      	bhi.n	80049d8 <HAL_I2C_Init+0xd4>
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	3301      	adds	r3, #1
 80049d6:	e009      	b.n	80049ec <HAL_I2C_Init+0xe8>
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049de:	fb02 f303 	mul.w	r3, r2, r3
 80049e2:	4a69      	ldr	r2, [pc, #420]	; (8004b88 <HAL_I2C_Init+0x284>)
 80049e4:	fba2 2303 	umull	r2, r3, r2, r3
 80049e8:	099b      	lsrs	r3, r3, #6
 80049ea:	3301      	adds	r3, #1
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6812      	ldr	r2, [r2, #0]
 80049f0:	430b      	orrs	r3, r1
 80049f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	495c      	ldr	r1, [pc, #368]	; (8004b78 <HAL_I2C_Init+0x274>)
 8004a08:	428b      	cmp	r3, r1
 8004a0a:	d819      	bhi.n	8004a40 <HAL_I2C_Init+0x13c>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	1e59      	subs	r1, r3, #1
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a1a:	1c59      	adds	r1, r3, #1
 8004a1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a20:	400b      	ands	r3, r1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <HAL_I2C_Init+0x138>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	1e59      	subs	r1, r3, #1
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a34:	3301      	adds	r3, #1
 8004a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a3a:	e051      	b.n	8004ae0 <HAL_I2C_Init+0x1dc>
 8004a3c:	2304      	movs	r3, #4
 8004a3e:	e04f      	b.n	8004ae0 <HAL_I2C_Init+0x1dc>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d111      	bne.n	8004a6c <HAL_I2C_Init+0x168>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	1e58      	subs	r0, r3, #1
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6859      	ldr	r1, [r3, #4]
 8004a50:	460b      	mov	r3, r1
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	440b      	add	r3, r1
 8004a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	bf0c      	ite	eq
 8004a64:	2301      	moveq	r3, #1
 8004a66:	2300      	movne	r3, #0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	e012      	b.n	8004a92 <HAL_I2C_Init+0x18e>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	1e58      	subs	r0, r3, #1
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6859      	ldr	r1, [r3, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	440b      	add	r3, r1
 8004a7a:	0099      	lsls	r1, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a82:	3301      	adds	r3, #1
 8004a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	bf0c      	ite	eq
 8004a8c:	2301      	moveq	r3, #1
 8004a8e:	2300      	movne	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_I2C_Init+0x196>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e022      	b.n	8004ae0 <HAL_I2C_Init+0x1dc>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10e      	bne.n	8004ac0 <HAL_I2C_Init+0x1bc>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1e58      	subs	r0, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6859      	ldr	r1, [r3, #4]
 8004aaa:	460b      	mov	r3, r1
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	440b      	add	r3, r1
 8004ab0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004abe:	e00f      	b.n	8004ae0 <HAL_I2C_Init+0x1dc>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	1e58      	subs	r0, r3, #1
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6859      	ldr	r1, [r3, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	440b      	add	r3, r1
 8004ace:	0099      	lsls	r1, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004adc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ae0:	6879      	ldr	r1, [r7, #4]
 8004ae2:	6809      	ldr	r1, [r1, #0]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	69da      	ldr	r2, [r3, #28]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6911      	ldr	r1, [r2, #16]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68d2      	ldr	r2, [r2, #12]
 8004b1a:	4311      	orrs	r1, r2
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6812      	ldr	r2, [r2, #0]
 8004b20:	430b      	orrs	r3, r1
 8004b22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695a      	ldr	r2, [r3, #20]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0201 	orr.w	r2, r2, #1
 8004b4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	000186a0 	.word	0x000186a0
 8004b7c:	001e847f 	.word	0x001e847f
 8004b80:	003d08ff 	.word	0x003d08ff
 8004b84:	431bde83 	.word	0x431bde83
 8004b88:	10624dd3 	.word	0x10624dd3

08004b8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	4608      	mov	r0, r1
 8004b96:	4611      	mov	r1, r2
 8004b98:	461a      	mov	r2, r3
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	817b      	strh	r3, [r7, #10]
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	813b      	strh	r3, [r7, #8]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ba6:	f7fd fcd9 	bl	800255c <HAL_GetTick>
 8004baa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b20      	cmp	r3, #32
 8004bb6:	f040 80d9 	bne.w	8004d6c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	2319      	movs	r3, #25
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	496d      	ldr	r1, [pc, #436]	; (8004d78 <HAL_I2C_Mem_Write+0x1ec>)
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 fdad 	bl	8005724 <I2C_WaitOnFlagUntilTimeout>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e0cc      	b.n	8004d6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d101      	bne.n	8004be2 <HAL_I2C_Mem_Write+0x56>
 8004bde:	2302      	movs	r3, #2
 8004be0:	e0c5      	b.n	8004d6e <HAL_I2C_Mem_Write+0x1e2>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d007      	beq.n	8004c08 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0201 	orr.w	r2, r2, #1
 8004c06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2221      	movs	r2, #33	; 0x21
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2240      	movs	r2, #64	; 0x40
 8004c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6a3a      	ldr	r2, [r7, #32]
 8004c32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4a4d      	ldr	r2, [pc, #308]	; (8004d7c <HAL_I2C_Mem_Write+0x1f0>)
 8004c48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c4a:	88f8      	ldrh	r0, [r7, #6]
 8004c4c:	893a      	ldrh	r2, [r7, #8]
 8004c4e:	8979      	ldrh	r1, [r7, #10]
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	9301      	str	r3, [sp, #4]
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	4603      	mov	r3, r0
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 fbe4 	bl	8005428 <I2C_RequestMemoryWrite>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d052      	beq.n	8004d0c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e081      	b.n	8004d6e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 fe2e 	bl	80058d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00d      	beq.n	8004c96 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	d107      	bne.n	8004c92 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e06b      	b.n	8004d6e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	781a      	ldrb	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d11b      	bne.n	8004d0c <HAL_I2C_Mem_Write+0x180>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d017      	beq.n	8004d0c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	781a      	ldrb	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	3b01      	subs	r3, #1
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1aa      	bne.n	8004c6a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 fe1a 	bl	8005952 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00d      	beq.n	8004d40 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	2b04      	cmp	r3, #4
 8004d2a:	d107      	bne.n	8004d3c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e016      	b.n	8004d6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	e000      	b.n	8004d6e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004d6c:	2302      	movs	r3, #2
  }
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	00100002 	.word	0x00100002
 8004d7c:	ffff0000 	.word	0xffff0000

08004d80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08c      	sub	sp, #48	; 0x30
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	4608      	mov	r0, r1
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	4603      	mov	r3, r0
 8004d90:	817b      	strh	r3, [r7, #10]
 8004d92:	460b      	mov	r3, r1
 8004d94:	813b      	strh	r3, [r7, #8]
 8004d96:	4613      	mov	r3, r2
 8004d98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d9a:	f7fd fbdf 	bl	800255c <HAL_GetTick>
 8004d9e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	f040 8208 	bne.w	80051be <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	2319      	movs	r3, #25
 8004db4:	2201      	movs	r2, #1
 8004db6:	497b      	ldr	r1, [pc, #492]	; (8004fa4 <HAL_I2C_Mem_Read+0x224>)
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 fcb3 	bl	8005724 <I2C_WaitOnFlagUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e1fb      	b.n	80051c0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d101      	bne.n	8004dd6 <HAL_I2C_Mem_Read+0x56>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	e1f4      	b.n	80051c0 <HAL_I2C_Mem_Read+0x440>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d007      	beq.n	8004dfc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0201 	orr.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2222      	movs	r2, #34	; 0x22
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2240      	movs	r2, #64	; 0x40
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004e2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4a5b      	ldr	r2, [pc, #364]	; (8004fa8 <HAL_I2C_Mem_Read+0x228>)
 8004e3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e3e:	88f8      	ldrh	r0, [r7, #6]
 8004e40:	893a      	ldrh	r2, [r7, #8]
 8004e42:	8979      	ldrh	r1, [r7, #10]
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	9301      	str	r3, [sp, #4]
 8004e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 fb80 	bl	8005554 <I2C_RequestMemoryRead>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e1b0      	b.n	80051c0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d113      	bne.n	8004e8e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e66:	2300      	movs	r3, #0
 8004e68:	623b      	str	r3, [r7, #32]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	623b      	str	r3, [r7, #32]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	623b      	str	r3, [r7, #32]
 8004e7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	e184      	b.n	8005198 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d11b      	bne.n	8004ece <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61fb      	str	r3, [r7, #28]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	61fb      	str	r3, [r7, #28]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	61fb      	str	r3, [r7, #28]
 8004eba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	e164      	b.n	8005198 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d11b      	bne.n	8004f0e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ef4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	61bb      	str	r3, [r7, #24]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	61bb      	str	r3, [r7, #24]
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	e144      	b.n	8005198 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f0e:	2300      	movs	r3, #0
 8004f10:	617b      	str	r3, [r7, #20]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004f24:	e138      	b.n	8005198 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	f200 80f1 	bhi.w	8005112 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d123      	bne.n	8004f80 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f000 fd49 	bl	80059d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e139      	b.n	80051c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691a      	ldr	r2, [r3, #16]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	3b01      	subs	r3, #1
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f7e:	e10b      	b.n	8005198 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d14e      	bne.n	8005026 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8e:	2200      	movs	r2, #0
 8004f90:	4906      	ldr	r1, [pc, #24]	; (8004fac <HAL_I2C_Mem_Read+0x22c>)
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fbc6 	bl	8005724 <I2C_WaitOnFlagUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d008      	beq.n	8004fb0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e10e      	b.n	80051c0 <HAL_I2C_Mem_Read+0x440>
 8004fa2:	bf00      	nop
 8004fa4:	00100002 	.word	0x00100002
 8004fa8:	ffff0000 	.word	0xffff0000
 8004fac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691a      	ldr	r2, [r3, #16]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	3b01      	subs	r3, #1
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	b2d2      	uxtb	r2, r2
 8004ffe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800500e:	3b01      	subs	r3, #1
 8005010:	b29a      	uxth	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501a:	b29b      	uxth	r3, r3
 800501c:	3b01      	subs	r3, #1
 800501e:	b29a      	uxth	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005024:	e0b8      	b.n	8005198 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502c:	2200      	movs	r2, #0
 800502e:	4966      	ldr	r1, [pc, #408]	; (80051c8 <HAL_I2C_Mem_Read+0x448>)
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 fb77 	bl	8005724 <I2C_WaitOnFlagUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e0bf      	b.n	80051c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800504e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691a      	ldr	r2, [r3, #16]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506c:	3b01      	subs	r3, #1
 800506e:	b29a      	uxth	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005078:	b29b      	uxth	r3, r3
 800507a:	3b01      	subs	r3, #1
 800507c:	b29a      	uxth	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005088:	2200      	movs	r2, #0
 800508a:	494f      	ldr	r1, [pc, #316]	; (80051c8 <HAL_I2C_Mem_Read+0x448>)
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 fb49 	bl	8005724 <I2C_WaitOnFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e091      	b.n	80051c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691a      	ldr	r2, [r3, #16]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	691a      	ldr	r2, [r3, #16]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005106:	b29b      	uxth	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005110:	e042      	b.n	8005198 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005114:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 fc5c 	bl	80059d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e04c      	b.n	80051c0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	b2d2      	uxtb	r2, r2
 8005132:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005142:	3b01      	subs	r3, #1
 8005144:	b29a      	uxth	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514e:	b29b      	uxth	r3, r3
 8005150:	3b01      	subs	r3, #1
 8005152:	b29a      	uxth	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	f003 0304 	and.w	r3, r3, #4
 8005162:	2b04      	cmp	r3, #4
 8005164:	d118      	bne.n	8005198 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005182:	3b01      	subs	r3, #1
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518e:	b29b      	uxth	r3, r3
 8005190:	3b01      	subs	r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519c:	2b00      	cmp	r3, #0
 800519e:	f47f aec2 	bne.w	8004f26 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	e000      	b.n	80051c0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80051be:	2302      	movs	r3, #2
  }
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3728      	adds	r7, #40	; 0x28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	00010004 	.word	0x00010004

080051cc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08a      	sub	sp, #40	; 0x28
 80051d0:	af02      	add	r7, sp, #8
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	607a      	str	r2, [r7, #4]
 80051d6:	603b      	str	r3, [r7, #0]
 80051d8:	460b      	mov	r3, r1
 80051da:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80051dc:	f7fd f9be 	bl	800255c <HAL_GetTick>
 80051e0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b20      	cmp	r3, #32
 80051f0:	f040 8111 	bne.w	8005416 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	2319      	movs	r3, #25
 80051fa:	2201      	movs	r2, #1
 80051fc:	4988      	ldr	r1, [pc, #544]	; (8005420 <HAL_I2C_IsDeviceReady+0x254>)
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 fa90 	bl	8005724 <I2C_WaitOnFlagUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800520a:	2302      	movs	r3, #2
 800520c:	e104      	b.n	8005418 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005214:	2b01      	cmp	r3, #1
 8005216:	d101      	bne.n	800521c <HAL_I2C_IsDeviceReady+0x50>
 8005218:	2302      	movs	r3, #2
 800521a:	e0fd      	b.n	8005418 <HAL_I2C_IsDeviceReady+0x24c>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b01      	cmp	r3, #1
 8005230:	d007      	beq.n	8005242 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0201 	orr.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005250:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2224      	movs	r2, #36	; 0x24
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4a70      	ldr	r2, [pc, #448]	; (8005424 <HAL_I2C_IsDeviceReady+0x258>)
 8005264:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005274:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2200      	movs	r2, #0
 800527e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 fa4e 	bl	8005724 <I2C_WaitOnFlagUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00d      	beq.n	80052aa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800529c:	d103      	bne.n	80052a6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052a4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e0b6      	b.n	8005418 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052aa:	897b      	ldrh	r3, [r7, #10]
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	461a      	mov	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052b8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80052ba:	f7fd f94f 	bl	800255c <HAL_GetTick>
 80052be:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	bf0c      	ite	eq
 80052ce:	2301      	moveq	r3, #1
 80052d0:	2300      	movne	r3, #0
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e4:	bf0c      	ite	eq
 80052e6:	2301      	moveq	r3, #1
 80052e8:	2300      	movne	r3, #0
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80052ee:	e025      	b.n	800533c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80052f0:	f7fd f934 	bl	800255c <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d302      	bcc.n	8005306 <HAL_I2C_IsDeviceReady+0x13a>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d103      	bne.n	800530e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	22a0      	movs	r2, #160	; 0xa0
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b02      	cmp	r3, #2
 800531a:	bf0c      	ite	eq
 800531c:	2301      	moveq	r3, #1
 800531e:	2300      	movne	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800532e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005332:	bf0c      	ite	eq
 8005334:	2301      	moveq	r3, #1
 8005336:	2300      	movne	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2ba0      	cmp	r3, #160	; 0xa0
 8005346:	d005      	beq.n	8005354 <HAL_I2C_IsDeviceReady+0x188>
 8005348:	7dfb      	ldrb	r3, [r7, #23]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d102      	bne.n	8005354 <HAL_I2C_IsDeviceReady+0x188>
 800534e:	7dbb      	ldrb	r3, [r7, #22]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0cd      	beq.n	80052f0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2220      	movs	r2, #32
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b02      	cmp	r3, #2
 8005368:	d129      	bne.n	80053be <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005378:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800537a:	2300      	movs	r3, #0
 800537c:	613b      	str	r3, [r7, #16]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	613b      	str	r3, [r7, #16]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	613b      	str	r3, [r7, #16]
 800538e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	2319      	movs	r3, #25
 8005396:	2201      	movs	r2, #1
 8005398:	4921      	ldr	r1, [pc, #132]	; (8005420 <HAL_I2C_IsDeviceReady+0x254>)
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 f9c2 	bl	8005724 <I2C_WaitOnFlagUntilTimeout>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e036      	b.n	8005418 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	e02c      	b.n	8005418 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053cc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053d6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	2319      	movs	r3, #25
 80053de:	2201      	movs	r2, #1
 80053e0:	490f      	ldr	r1, [pc, #60]	; (8005420 <HAL_I2C_IsDeviceReady+0x254>)
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 f99e 	bl	8005724 <I2C_WaitOnFlagUntilTimeout>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e012      	b.n	8005418 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	3301      	adds	r3, #1
 80053f6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	f4ff af32 	bcc.w	8005266 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2220      	movs	r2, #32
 8005406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e000      	b.n	8005418 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005416:	2302      	movs	r3, #2
  }
}
 8005418:	4618      	mov	r0, r3
 800541a:	3720      	adds	r7, #32
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	00100002 	.word	0x00100002
 8005424:	ffff0000 	.word	0xffff0000

08005428 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b088      	sub	sp, #32
 800542c:	af02      	add	r7, sp, #8
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	4608      	mov	r0, r1
 8005432:	4611      	mov	r1, r2
 8005434:	461a      	mov	r2, r3
 8005436:	4603      	mov	r3, r0
 8005438:	817b      	strh	r3, [r7, #10]
 800543a:	460b      	mov	r3, r1
 800543c:	813b      	strh	r3, [r7, #8]
 800543e:	4613      	mov	r3, r2
 8005440:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005450:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	2200      	movs	r2, #0
 800545a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 f960 	bl	8005724 <I2C_WaitOnFlagUntilTimeout>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00d      	beq.n	8005486 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005478:	d103      	bne.n	8005482 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005480:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e05f      	b.n	8005546 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005486:	897b      	ldrh	r3, [r7, #10]
 8005488:	b2db      	uxtb	r3, r3
 800548a:	461a      	mov	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005494:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	6a3a      	ldr	r2, [r7, #32]
 800549a:	492d      	ldr	r1, [pc, #180]	; (8005550 <I2C_RequestMemoryWrite+0x128>)
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 f998 	bl	80057d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e04c      	b.n	8005546 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ac:	2300      	movs	r3, #0
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c4:	6a39      	ldr	r1, [r7, #32]
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 fa02 	bl	80058d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00d      	beq.n	80054ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d107      	bne.n	80054ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e02b      	b.n	8005546 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d105      	bne.n	8005500 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054f4:	893b      	ldrh	r3, [r7, #8]
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	611a      	str	r2, [r3, #16]
 80054fe:	e021      	b.n	8005544 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005500:	893b      	ldrh	r3, [r7, #8]
 8005502:	0a1b      	lsrs	r3, r3, #8
 8005504:	b29b      	uxth	r3, r3
 8005506:	b2da      	uxtb	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800550e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005510:	6a39      	ldr	r1, [r7, #32]
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 f9dc 	bl	80058d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00d      	beq.n	800553a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	2b04      	cmp	r3, #4
 8005524:	d107      	bne.n	8005536 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005534:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e005      	b.n	8005546 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800553a:	893b      	ldrh	r3, [r7, #8]
 800553c:	b2da      	uxtb	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	00010002 	.word	0x00010002

08005554 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af02      	add	r7, sp, #8
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	4608      	mov	r0, r1
 800555e:	4611      	mov	r1, r2
 8005560:	461a      	mov	r2, r3
 8005562:	4603      	mov	r3, r0
 8005564:	817b      	strh	r3, [r7, #10]
 8005566:	460b      	mov	r3, r1
 8005568:	813b      	strh	r3, [r7, #8]
 800556a:	4613      	mov	r3, r2
 800556c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800557c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800558c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	2200      	movs	r2, #0
 8005596:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 f8c2 	bl	8005724 <I2C_WaitOnFlagUntilTimeout>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00d      	beq.n	80055c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055b4:	d103      	bne.n	80055be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e0aa      	b.n	8005718 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055c2:	897b      	ldrh	r3, [r7, #10]
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	461a      	mov	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	6a3a      	ldr	r2, [r7, #32]
 80055d6:	4952      	ldr	r1, [pc, #328]	; (8005720 <I2C_RequestMemoryRead+0x1cc>)
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 f8fa 	bl	80057d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e097      	b.n	8005718 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055e8:	2300      	movs	r3, #0
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005600:	6a39      	ldr	r1, [r7, #32]
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 f964 	bl	80058d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00d      	beq.n	800562a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	2b04      	cmp	r3, #4
 8005614:	d107      	bne.n	8005626 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005624:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e076      	b.n	8005718 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800562a:	88fb      	ldrh	r3, [r7, #6]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d105      	bne.n	800563c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005630:	893b      	ldrh	r3, [r7, #8]
 8005632:	b2da      	uxtb	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	611a      	str	r2, [r3, #16]
 800563a:	e021      	b.n	8005680 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800563c:	893b      	ldrh	r3, [r7, #8]
 800563e:	0a1b      	lsrs	r3, r3, #8
 8005640:	b29b      	uxth	r3, r3
 8005642:	b2da      	uxtb	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800564a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800564c:	6a39      	ldr	r1, [r7, #32]
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 f93e 	bl	80058d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00d      	beq.n	8005676 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	2b04      	cmp	r3, #4
 8005660:	d107      	bne.n	8005672 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005670:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e050      	b.n	8005718 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005676:	893b      	ldrh	r3, [r7, #8]
 8005678:	b2da      	uxtb	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005682:	6a39      	ldr	r1, [r7, #32]
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 f923 	bl	80058d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00d      	beq.n	80056ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005694:	2b04      	cmp	r3, #4
 8005696:	d107      	bne.n	80056a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e035      	b.n	8005718 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 f82b 	bl	8005724 <I2C_WaitOnFlagUntilTimeout>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00d      	beq.n	80056f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056e2:	d103      	bne.n	80056ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e013      	b.n	8005718 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80056f0:	897b      	ldrh	r3, [r7, #10]
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	f043 0301 	orr.w	r3, r3, #1
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	6a3a      	ldr	r2, [r7, #32]
 8005704:	4906      	ldr	r1, [pc, #24]	; (8005720 <I2C_RequestMemoryRead+0x1cc>)
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 f863 	bl	80057d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	00010002 	.word	0x00010002

08005724 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	603b      	str	r3, [r7, #0]
 8005730:	4613      	mov	r3, r2
 8005732:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005734:	e025      	b.n	8005782 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800573c:	d021      	beq.n	8005782 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800573e:	f7fc ff0d 	bl	800255c <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d302      	bcc.n	8005754 <I2C_WaitOnFlagUntilTimeout+0x30>
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d116      	bne.n	8005782 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	f043 0220 	orr.w	r2, r3, #32
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e023      	b.n	80057ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	0c1b      	lsrs	r3, r3, #16
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b01      	cmp	r3, #1
 800578a:	d10d      	bne.n	80057a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	43da      	mvns	r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4013      	ands	r3, r2
 8005798:	b29b      	uxth	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	bf0c      	ite	eq
 800579e:	2301      	moveq	r3, #1
 80057a0:	2300      	movne	r3, #0
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	461a      	mov	r2, r3
 80057a6:	e00c      	b.n	80057c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	43da      	mvns	r2, r3
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4013      	ands	r3, r2
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	bf0c      	ite	eq
 80057ba:	2301      	moveq	r3, #1
 80057bc:	2300      	movne	r3, #0
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	461a      	mov	r2, r3
 80057c2:	79fb      	ldrb	r3, [r7, #7]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d0b6      	beq.n	8005736 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b084      	sub	sp, #16
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	607a      	str	r2, [r7, #4]
 80057de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057e0:	e051      	b.n	8005886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057f0:	d123      	bne.n	800583a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005800:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800580a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2220      	movs	r2, #32
 8005816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	f043 0204 	orr.w	r2, r3, #4
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e046      	b.n	80058c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005840:	d021      	beq.n	8005886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005842:	f7fc fe8b 	bl	800255c <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	429a      	cmp	r2, r3
 8005850:	d302      	bcc.n	8005858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d116      	bne.n	8005886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2220      	movs	r2, #32
 8005862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	f043 0220 	orr.w	r2, r3, #32
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e020      	b.n	80058c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	0c1b      	lsrs	r3, r3, #16
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b01      	cmp	r3, #1
 800588e:	d10c      	bne.n	80058aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	43da      	mvns	r2, r3
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4013      	ands	r3, r2
 800589c:	b29b      	uxth	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	bf14      	ite	ne
 80058a2:	2301      	movne	r3, #1
 80058a4:	2300      	moveq	r3, #0
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	e00b      	b.n	80058c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	43da      	mvns	r2, r3
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	4013      	ands	r3, r2
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	bf14      	ite	ne
 80058bc:	2301      	movne	r3, #1
 80058be:	2300      	moveq	r3, #0
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d18d      	bne.n	80057e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058dc:	e02d      	b.n	800593a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 f8ce 	bl	8005a80 <I2C_IsAcknowledgeFailed>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e02d      	b.n	800594a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058f4:	d021      	beq.n	800593a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f6:	f7fc fe31 	bl	800255c <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	429a      	cmp	r2, r3
 8005904:	d302      	bcc.n	800590c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d116      	bne.n	800593a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2220      	movs	r2, #32
 8005916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005926:	f043 0220 	orr.w	r2, r3, #32
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e007      	b.n	800594a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005944:	2b80      	cmp	r3, #128	; 0x80
 8005946:	d1ca      	bne.n	80058de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b084      	sub	sp, #16
 8005956:	af00      	add	r7, sp, #0
 8005958:	60f8      	str	r0, [r7, #12]
 800595a:	60b9      	str	r1, [r7, #8]
 800595c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800595e:	e02d      	b.n	80059bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 f88d 	bl	8005a80 <I2C_IsAcknowledgeFailed>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e02d      	b.n	80059cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005976:	d021      	beq.n	80059bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005978:	f7fc fdf0 	bl	800255c <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	429a      	cmp	r2, r3
 8005986:	d302      	bcc.n	800598e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d116      	bne.n	80059bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a8:	f043 0220 	orr.w	r2, r3, #32
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e007      	b.n	80059cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	f003 0304 	and.w	r3, r3, #4
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d1ca      	bne.n	8005960 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059e0:	e042      	b.n	8005a68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	f003 0310 	and.w	r3, r3, #16
 80059ec:	2b10      	cmp	r3, #16
 80059ee:	d119      	bne.n	8005a24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f06f 0210 	mvn.w	r2, #16
 80059f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e029      	b.n	8005a78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a24:	f7fc fd9a 	bl	800255c <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d302      	bcc.n	8005a3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d116      	bne.n	8005a68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a54:	f043 0220 	orr.w	r2, r3, #32
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e007      	b.n	8005a78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a72:	2b40      	cmp	r3, #64	; 0x40
 8005a74:	d1b5      	bne.n	80059e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a96:	d11b      	bne.n	8005ad0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005aa0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abc:	f043 0204 	orr.w	r2, r3, #4
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e000      	b.n	8005ad2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
	...

08005ae0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b088      	sub	sp, #32
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e128      	b.n	8005d44 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d109      	bne.n	8005b12 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a90      	ldr	r2, [pc, #576]	; (8005d4c <HAL_I2S_Init+0x26c>)
 8005b0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7fc fa7f 	bl	8002010 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2202      	movs	r2, #2
 8005b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69db      	ldr	r3, [r3, #28]
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	6812      	ldr	r2, [r2, #0]
 8005b24:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005b28:	f023 030f 	bic.w	r3, r3, #15
 8005b2c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2202      	movs	r2, #2
 8005b34:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d060      	beq.n	8005c00 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d102      	bne.n	8005b4c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005b46:	2310      	movs	r3, #16
 8005b48:	617b      	str	r3, [r7, #20]
 8005b4a:	e001      	b.n	8005b50 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005b4c:	2320      	movs	r3, #32
 8005b4e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	d802      	bhi.n	8005b5e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005b5e:	2001      	movs	r0, #1
 8005b60:	f001 f9e6 	bl	8006f30 <HAL_RCCEx_GetPeriphCLKFreq>
 8005b64:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b6e:	d125      	bne.n	8005bbc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d010      	beq.n	8005b9a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b94:	3305      	adds	r3, #5
 8005b96:	613b      	str	r3, [r7, #16]
 8005b98:	e01f      	b.n	8005bda <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	461a      	mov	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb6:	3305      	adds	r3, #5
 8005bb8:	613b      	str	r3, [r7, #16]
 8005bba:	e00e      	b.n	8005bda <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	461a      	mov	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd6:	3305      	adds	r3, #5
 8005bd8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	4a5c      	ldr	r2, [pc, #368]	; (8005d50 <HAL_I2S_Init+0x270>)
 8005bde:	fba2 2303 	umull	r2, r3, r2, r3
 8005be2:	08db      	lsrs	r3, r3, #3
 8005be4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	085b      	lsrs	r3, r3, #1
 8005bf6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	021b      	lsls	r3, r3, #8
 8005bfc:	61bb      	str	r3, [r7, #24]
 8005bfe:	e003      	b.n	8005c08 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005c00:	2302      	movs	r3, #2
 8005c02:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d902      	bls.n	8005c14 <HAL_I2S_Init+0x134>
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	2bff      	cmp	r3, #255	; 0xff
 8005c12:	d907      	bls.n	8005c24 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c18:	f043 0210 	orr.w	r2, r3, #16
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e08f      	b.n	8005d44 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	691a      	ldr	r2, [r3, #16]
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	ea42 0103 	orr.w	r1, r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005c42:	f023 030f 	bic.w	r3, r3, #15
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6851      	ldr	r1, [r2, #4]
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	6892      	ldr	r2, [r2, #8]
 8005c4e:	4311      	orrs	r1, r2
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	68d2      	ldr	r2, [r2, #12]
 8005c54:	4311      	orrs	r1, r2
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6992      	ldr	r2, [r2, #24]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c66:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d161      	bne.n	8005d34 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a38      	ldr	r2, [pc, #224]	; (8005d54 <HAL_I2S_Init+0x274>)
 8005c74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a37      	ldr	r2, [pc, #220]	; (8005d58 <HAL_I2S_Init+0x278>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d101      	bne.n	8005c84 <HAL_I2S_Init+0x1a4>
 8005c80:	4b36      	ldr	r3, [pc, #216]	; (8005d5c <HAL_I2S_Init+0x27c>)
 8005c82:	e001      	b.n	8005c88 <HAL_I2S_Init+0x1a8>
 8005c84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6812      	ldr	r2, [r2, #0]
 8005c8e:	4932      	ldr	r1, [pc, #200]	; (8005d58 <HAL_I2S_Init+0x278>)
 8005c90:	428a      	cmp	r2, r1
 8005c92:	d101      	bne.n	8005c98 <HAL_I2S_Init+0x1b8>
 8005c94:	4a31      	ldr	r2, [pc, #196]	; (8005d5c <HAL_I2S_Init+0x27c>)
 8005c96:	e001      	b.n	8005c9c <HAL_I2S_Init+0x1bc>
 8005c98:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005c9c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005ca0:	f023 030f 	bic.w	r3, r3, #15
 8005ca4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a2b      	ldr	r2, [pc, #172]	; (8005d58 <HAL_I2S_Init+0x278>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d101      	bne.n	8005cb4 <HAL_I2S_Init+0x1d4>
 8005cb0:	4b2a      	ldr	r3, [pc, #168]	; (8005d5c <HAL_I2S_Init+0x27c>)
 8005cb2:	e001      	b.n	8005cb8 <HAL_I2S_Init+0x1d8>
 8005cb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cb8:	2202      	movs	r2, #2
 8005cba:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a25      	ldr	r2, [pc, #148]	; (8005d58 <HAL_I2S_Init+0x278>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d101      	bne.n	8005cca <HAL_I2S_Init+0x1ea>
 8005cc6:	4b25      	ldr	r3, [pc, #148]	; (8005d5c <HAL_I2S_Init+0x27c>)
 8005cc8:	e001      	b.n	8005cce <HAL_I2S_Init+0x1ee>
 8005cca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cce:	69db      	ldr	r3, [r3, #28]
 8005cd0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cda:	d003      	beq.n	8005ce4 <HAL_I2S_Init+0x204>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d103      	bne.n	8005cec <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ce8:	613b      	str	r3, [r7, #16]
 8005cea:	e001      	b.n	8005cf0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005cec:	2300      	movs	r3, #0
 8005cee:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005d04:	4313      	orrs	r3, r2
 8005d06:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	897b      	ldrh	r3, [r7, #10]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d1c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a0d      	ldr	r2, [pc, #52]	; (8005d58 <HAL_I2S_Init+0x278>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d101      	bne.n	8005d2c <HAL_I2S_Init+0x24c>
 8005d28:	4b0c      	ldr	r3, [pc, #48]	; (8005d5c <HAL_I2S_Init+0x27c>)
 8005d2a:	e001      	b.n	8005d30 <HAL_I2S_Init+0x250>
 8005d2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d30:	897a      	ldrh	r2, [r7, #10]
 8005d32:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3720      	adds	r7, #32
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	08005e57 	.word	0x08005e57
 8005d50:	cccccccd 	.word	0xcccccccd
 8005d54:	08005f6d 	.word	0x08005f6d
 8005d58:	40003800 	.word	0x40003800
 8005d5c:	40003400 	.word	0x40003400

08005d60 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	881a      	ldrh	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	1c9a      	adds	r2, r3, #2
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10e      	bne.n	8005df0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005de0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7ff ffb8 	bl	8005d60 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005df0:	bf00      	nop
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0a:	b292      	uxth	r2, r2
 8005e0c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e12:	1c9a      	adds	r2, r3, #2
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10e      	bne.n	8005e4e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e3e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7ff ff93 	bl	8005d74 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005e4e:	bf00      	nop
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b086      	sub	sp, #24
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d13a      	bne.n	8005ee8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d109      	bne.n	8005e90 <I2S_IRQHandler+0x3a>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e86:	2b40      	cmp	r3, #64	; 0x40
 8005e88:	d102      	bne.n	8005e90 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7ff ffb4 	bl	8005df8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e96:	2b40      	cmp	r3, #64	; 0x40
 8005e98:	d126      	bne.n	8005ee8 <I2S_IRQHandler+0x92>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f003 0320 	and.w	r3, r3, #32
 8005ea4:	2b20      	cmp	r3, #32
 8005ea6:	d11f      	bne.n	8005ee8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005eb6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005eb8:	2300      	movs	r3, #0
 8005eba:	613b      	str	r3, [r7, #16]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	613b      	str	r3, [r7, #16]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	613b      	str	r3, [r7, #16]
 8005ecc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eda:	f043 0202 	orr.w	r2, r3, #2
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff ff50 	bl	8005d88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d136      	bne.n	8005f62 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d109      	bne.n	8005f12 <I2S_IRQHandler+0xbc>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f08:	2b80      	cmp	r3, #128	; 0x80
 8005f0a:	d102      	bne.n	8005f12 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f7ff ff45 	bl	8005d9c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f003 0308 	and.w	r3, r3, #8
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d122      	bne.n	8005f62 <I2S_IRQHandler+0x10c>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f003 0320 	and.w	r3, r3, #32
 8005f26:	2b20      	cmp	r3, #32
 8005f28:	d11b      	bne.n	8005f62 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f38:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	60fb      	str	r3, [r7, #12]
 8005f46:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f54:	f043 0204 	orr.w	r2, r3, #4
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7ff ff13 	bl	8005d88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f62:	bf00      	nop
 8005f64:	3718      	adds	r7, #24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
	...

08005f6c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a92      	ldr	r2, [pc, #584]	; (80061cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d101      	bne.n	8005f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005f86:	4b92      	ldr	r3, [pc, #584]	; (80061d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f88:	e001      	b.n	8005f8e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005f8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a8b      	ldr	r2, [pc, #556]	; (80061cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d101      	bne.n	8005fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005fa4:	4b8a      	ldr	r3, [pc, #552]	; (80061d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fa6:	e001      	b.n	8005fac <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005fa8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fb8:	d004      	beq.n	8005fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f040 8099 	bne.w	80060f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d107      	bne.n	8005fde <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f925 	bl	8006228 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d107      	bne.n	8005ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f9c8 	bl	8006388 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffe:	2b40      	cmp	r3, #64	; 0x40
 8006000:	d13a      	bne.n	8006078 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f003 0320 	and.w	r3, r3, #32
 8006008:	2b00      	cmp	r3, #0
 800600a:	d035      	beq.n	8006078 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a6e      	ldr	r2, [pc, #440]	; (80061cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d101      	bne.n	800601a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006016:	4b6e      	ldr	r3, [pc, #440]	; (80061d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006018:	e001      	b.n	800601e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800601a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4969      	ldr	r1, [pc, #420]	; (80061cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006026:	428b      	cmp	r3, r1
 8006028:	d101      	bne.n	800602e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800602a:	4b69      	ldr	r3, [pc, #420]	; (80061d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800602c:	e001      	b.n	8006032 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800602e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006032:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006036:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006046:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006048:	2300      	movs	r3, #0
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606a:	f043 0202 	orr.w	r2, r3, #2
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7ff fe88 	bl	8005d88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	f003 0308 	and.w	r3, r3, #8
 800607e:	2b08      	cmp	r3, #8
 8006080:	f040 80c3 	bne.w	800620a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f003 0320 	and.w	r3, r3, #32
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 80bd 	beq.w	800620a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800609e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a49      	ldr	r2, [pc, #292]	; (80061cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d101      	bne.n	80060ae <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80060aa:	4b49      	ldr	r3, [pc, #292]	; (80061d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060ac:	e001      	b.n	80060b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80060ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4944      	ldr	r1, [pc, #272]	; (80061cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060ba:	428b      	cmp	r3, r1
 80060bc:	d101      	bne.n	80060c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80060be:	4b44      	ldr	r3, [pc, #272]	; (80061d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060c0:	e001      	b.n	80060c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80060c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80060ca:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80060cc:	2300      	movs	r3, #0
 80060ce:	60bb      	str	r3, [r7, #8]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	60bb      	str	r3, [r7, #8]
 80060d8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e6:	f043 0204 	orr.w	r2, r3, #4
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff fe4a 	bl	8005d88 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80060f4:	e089      	b.n	800620a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d107      	bne.n	8006110 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f8be 	bl	800628c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b01      	cmp	r3, #1
 8006118:	d107      	bne.n	800612a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f8fd 	bl	8006324 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006130:	2b40      	cmp	r3, #64	; 0x40
 8006132:	d12f      	bne.n	8006194 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f003 0320 	and.w	r3, r3, #32
 800613a:	2b00      	cmp	r3, #0
 800613c:	d02a      	beq.n	8006194 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800614c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a1e      	ldr	r2, [pc, #120]	; (80061cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d101      	bne.n	800615c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006158:	4b1d      	ldr	r3, [pc, #116]	; (80061d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800615a:	e001      	b.n	8006160 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800615c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4919      	ldr	r1, [pc, #100]	; (80061cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006168:	428b      	cmp	r3, r1
 800616a:	d101      	bne.n	8006170 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800616c:	4b18      	ldr	r3, [pc, #96]	; (80061d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800616e:	e001      	b.n	8006174 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006170:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006174:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006178:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006186:	f043 0202 	orr.w	r2, r3, #2
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7ff fdfa 	bl	8005d88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	f003 0308 	and.w	r3, r3, #8
 800619a:	2b08      	cmp	r3, #8
 800619c:	d136      	bne.n	800620c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f003 0320 	and.w	r3, r3, #32
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d031      	beq.n	800620c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a07      	ldr	r2, [pc, #28]	; (80061cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d101      	bne.n	80061b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80061b2:	4b07      	ldr	r3, [pc, #28]	; (80061d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80061b4:	e001      	b.n	80061ba <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80061b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4902      	ldr	r1, [pc, #8]	; (80061cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80061c2:	428b      	cmp	r3, r1
 80061c4:	d106      	bne.n	80061d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80061c6:	4b02      	ldr	r3, [pc, #8]	; (80061d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80061c8:	e006      	b.n	80061d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80061ca:	bf00      	nop
 80061cc:	40003800 	.word	0x40003800
 80061d0:	40003400 	.word	0x40003400
 80061d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061dc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80061ec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061fa:	f043 0204 	orr.w	r2, r3, #4
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7ff fdc0 	bl	8005d88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006208:	e000      	b.n	800620c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800620a:	bf00      	nop
}
 800620c:	bf00      	nop
 800620e:	3720      	adds	r7, #32
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006234:	1c99      	adds	r1, r3, #2
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	6251      	str	r1, [r2, #36]	; 0x24
 800623a:	881a      	ldrh	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006246:	b29b      	uxth	r3, r3
 8006248:	3b01      	subs	r3, #1
 800624a:	b29a      	uxth	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006254:	b29b      	uxth	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d113      	bne.n	8006282 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006268:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800626e:	b29b      	uxth	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	d106      	bne.n	8006282 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7ff ffc9 	bl	8006214 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006282:	bf00      	nop
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
	...

0800628c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	1c99      	adds	r1, r3, #2
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	6251      	str	r1, [r2, #36]	; 0x24
 800629e:	8819      	ldrh	r1, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a1d      	ldr	r2, [pc, #116]	; (800631c <I2SEx_TxISR_I2SExt+0x90>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d101      	bne.n	80062ae <I2SEx_TxISR_I2SExt+0x22>
 80062aa:	4b1d      	ldr	r3, [pc, #116]	; (8006320 <I2SEx_TxISR_I2SExt+0x94>)
 80062ac:	e001      	b.n	80062b2 <I2SEx_TxISR_I2SExt+0x26>
 80062ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062b2:	460a      	mov	r2, r1
 80062b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	3b01      	subs	r3, #1
 80062be:	b29a      	uxth	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d121      	bne.n	8006312 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a12      	ldr	r2, [pc, #72]	; (800631c <I2SEx_TxISR_I2SExt+0x90>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d101      	bne.n	80062dc <I2SEx_TxISR_I2SExt+0x50>
 80062d8:	4b11      	ldr	r3, [pc, #68]	; (8006320 <I2SEx_TxISR_I2SExt+0x94>)
 80062da:	e001      	b.n	80062e0 <I2SEx_TxISR_I2SExt+0x54>
 80062dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	490d      	ldr	r1, [pc, #52]	; (800631c <I2SEx_TxISR_I2SExt+0x90>)
 80062e8:	428b      	cmp	r3, r1
 80062ea:	d101      	bne.n	80062f0 <I2SEx_TxISR_I2SExt+0x64>
 80062ec:	4b0c      	ldr	r3, [pc, #48]	; (8006320 <I2SEx_TxISR_I2SExt+0x94>)
 80062ee:	e001      	b.n	80062f4 <I2SEx_TxISR_I2SExt+0x68>
 80062f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80062fe:	b29b      	uxth	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	d106      	bne.n	8006312 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7ff ff81 	bl	8006214 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006312:	bf00      	nop
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	40003800 	.word	0x40003800
 8006320:	40003400 	.word	0x40003400

08006324 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68d8      	ldr	r0, [r3, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006336:	1c99      	adds	r1, r3, #2
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800633c:	b282      	uxth	r2, r0
 800633e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006344:	b29b      	uxth	r3, r3
 8006346:	3b01      	subs	r3, #1
 8006348:	b29a      	uxth	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006352:	b29b      	uxth	r3, r3
 8006354:	2b00      	cmp	r3, #0
 8006356:	d113      	bne.n	8006380 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006366:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800636c:	b29b      	uxth	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d106      	bne.n	8006380 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7ff ff4a 	bl	8006214 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006380:	bf00      	nop
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a20      	ldr	r2, [pc, #128]	; (8006418 <I2SEx_RxISR_I2SExt+0x90>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d101      	bne.n	800639e <I2SEx_RxISR_I2SExt+0x16>
 800639a:	4b20      	ldr	r3, [pc, #128]	; (800641c <I2SEx_RxISR_I2SExt+0x94>)
 800639c:	e001      	b.n	80063a2 <I2SEx_RxISR_I2SExt+0x1a>
 800639e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063a2:	68d8      	ldr	r0, [r3, #12]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a8:	1c99      	adds	r1, r3, #2
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	62d1      	str	r1, [r2, #44]	; 0x2c
 80063ae:	b282      	uxth	r2, r0
 80063b0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d121      	bne.n	800640e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a12      	ldr	r2, [pc, #72]	; (8006418 <I2SEx_RxISR_I2SExt+0x90>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d101      	bne.n	80063d8 <I2SEx_RxISR_I2SExt+0x50>
 80063d4:	4b11      	ldr	r3, [pc, #68]	; (800641c <I2SEx_RxISR_I2SExt+0x94>)
 80063d6:	e001      	b.n	80063dc <I2SEx_RxISR_I2SExt+0x54>
 80063d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	490d      	ldr	r1, [pc, #52]	; (8006418 <I2SEx_RxISR_I2SExt+0x90>)
 80063e4:	428b      	cmp	r3, r1
 80063e6:	d101      	bne.n	80063ec <I2SEx_RxISR_I2SExt+0x64>
 80063e8:	4b0c      	ldr	r3, [pc, #48]	; (800641c <I2SEx_RxISR_I2SExt+0x94>)
 80063ea:	e001      	b.n	80063f0 <I2SEx_RxISR_I2SExt+0x68>
 80063ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063f4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d106      	bne.n	800640e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7ff ff03 	bl	8006214 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800640e:	bf00      	nop
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	40003800 	.word	0x40003800
 800641c:	40003400 	.word	0x40003400

08006420 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e267      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	d075      	beq.n	800652a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800643e:	4b88      	ldr	r3, [pc, #544]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 030c 	and.w	r3, r3, #12
 8006446:	2b04      	cmp	r3, #4
 8006448:	d00c      	beq.n	8006464 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800644a:	4b85      	ldr	r3, [pc, #532]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006452:	2b08      	cmp	r3, #8
 8006454:	d112      	bne.n	800647c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006456:	4b82      	ldr	r3, [pc, #520]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800645e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006462:	d10b      	bne.n	800647c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006464:	4b7e      	ldr	r3, [pc, #504]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d05b      	beq.n	8006528 <HAL_RCC_OscConfig+0x108>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d157      	bne.n	8006528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e242      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006484:	d106      	bne.n	8006494 <HAL_RCC_OscConfig+0x74>
 8006486:	4b76      	ldr	r3, [pc, #472]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a75      	ldr	r2, [pc, #468]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 800648c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	e01d      	b.n	80064d0 <HAL_RCC_OscConfig+0xb0>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800649c:	d10c      	bne.n	80064b8 <HAL_RCC_OscConfig+0x98>
 800649e:	4b70      	ldr	r3, [pc, #448]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a6f      	ldr	r2, [pc, #444]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80064a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	4b6d      	ldr	r3, [pc, #436]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a6c      	ldr	r2, [pc, #432]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80064b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	e00b      	b.n	80064d0 <HAL_RCC_OscConfig+0xb0>
 80064b8:	4b69      	ldr	r3, [pc, #420]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a68      	ldr	r2, [pc, #416]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80064be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064c2:	6013      	str	r3, [r2, #0]
 80064c4:	4b66      	ldr	r3, [pc, #408]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a65      	ldr	r2, [pc, #404]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80064ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d013      	beq.n	8006500 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064d8:	f7fc f840 	bl	800255c <HAL_GetTick>
 80064dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064de:	e008      	b.n	80064f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064e0:	f7fc f83c 	bl	800255c <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	2b64      	cmp	r3, #100	; 0x64
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e207      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064f2:	4b5b      	ldr	r3, [pc, #364]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d0f0      	beq.n	80064e0 <HAL_RCC_OscConfig+0xc0>
 80064fe:	e014      	b.n	800652a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006500:	f7fc f82c 	bl	800255c <HAL_GetTick>
 8006504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006506:	e008      	b.n	800651a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006508:	f7fc f828 	bl	800255c <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b64      	cmp	r3, #100	; 0x64
 8006514:	d901      	bls.n	800651a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e1f3      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800651a:	4b51      	ldr	r3, [pc, #324]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1f0      	bne.n	8006508 <HAL_RCC_OscConfig+0xe8>
 8006526:	e000      	b.n	800652a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b00      	cmp	r3, #0
 8006534:	d063      	beq.n	80065fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006536:	4b4a      	ldr	r3, [pc, #296]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 030c 	and.w	r3, r3, #12
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00b      	beq.n	800655a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006542:	4b47      	ldr	r3, [pc, #284]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800654a:	2b08      	cmp	r3, #8
 800654c:	d11c      	bne.n	8006588 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800654e:	4b44      	ldr	r3, [pc, #272]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d116      	bne.n	8006588 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800655a:	4b41      	ldr	r3, [pc, #260]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b00      	cmp	r3, #0
 8006564:	d005      	beq.n	8006572 <HAL_RCC_OscConfig+0x152>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d001      	beq.n	8006572 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e1c7      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006572:	4b3b      	ldr	r3, [pc, #236]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	4937      	ldr	r1, [pc, #220]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 8006582:	4313      	orrs	r3, r2
 8006584:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006586:	e03a      	b.n	80065fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d020      	beq.n	80065d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006590:	4b34      	ldr	r3, [pc, #208]	; (8006664 <HAL_RCC_OscConfig+0x244>)
 8006592:	2201      	movs	r2, #1
 8006594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006596:	f7fb ffe1 	bl	800255c <HAL_GetTick>
 800659a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800659c:	e008      	b.n	80065b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800659e:	f7fb ffdd 	bl	800255c <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d901      	bls.n	80065b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e1a8      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065b0:	4b2b      	ldr	r3, [pc, #172]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0f0      	beq.n	800659e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065bc:	4b28      	ldr	r3, [pc, #160]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	00db      	lsls	r3, r3, #3
 80065ca:	4925      	ldr	r1, [pc, #148]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	600b      	str	r3, [r1, #0]
 80065d0:	e015      	b.n	80065fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065d2:	4b24      	ldr	r3, [pc, #144]	; (8006664 <HAL_RCC_OscConfig+0x244>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d8:	f7fb ffc0 	bl	800255c <HAL_GetTick>
 80065dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065de:	e008      	b.n	80065f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065e0:	f7fb ffbc 	bl	800255c <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e187      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065f2:	4b1b      	ldr	r3, [pc, #108]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1f0      	bne.n	80065e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0308 	and.w	r3, r3, #8
 8006606:	2b00      	cmp	r3, #0
 8006608:	d036      	beq.n	8006678 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d016      	beq.n	8006640 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006612:	4b15      	ldr	r3, [pc, #84]	; (8006668 <HAL_RCC_OscConfig+0x248>)
 8006614:	2201      	movs	r2, #1
 8006616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006618:	f7fb ffa0 	bl	800255c <HAL_GetTick>
 800661c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006620:	f7fb ff9c 	bl	800255c <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e167      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006632:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 8006634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0f0      	beq.n	8006620 <HAL_RCC_OscConfig+0x200>
 800663e:	e01b      	b.n	8006678 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006640:	4b09      	ldr	r3, [pc, #36]	; (8006668 <HAL_RCC_OscConfig+0x248>)
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006646:	f7fb ff89 	bl	800255c <HAL_GetTick>
 800664a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800664c:	e00e      	b.n	800666c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800664e:	f7fb ff85 	bl	800255c <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d907      	bls.n	800666c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e150      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
 8006660:	40023800 	.word	0x40023800
 8006664:	42470000 	.word	0x42470000
 8006668:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800666c:	4b88      	ldr	r3, [pc, #544]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 800666e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1ea      	bne.n	800664e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 8097 	beq.w	80067b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006686:	2300      	movs	r3, #0
 8006688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800668a:	4b81      	ldr	r3, [pc, #516]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 800668c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10f      	bne.n	80066b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006696:	2300      	movs	r3, #0
 8006698:	60bb      	str	r3, [r7, #8]
 800669a:	4b7d      	ldr	r3, [pc, #500]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 800669c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669e:	4a7c      	ldr	r2, [pc, #496]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 80066a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066a4:	6413      	str	r3, [r2, #64]	; 0x40
 80066a6:	4b7a      	ldr	r3, [pc, #488]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ae:	60bb      	str	r3, [r7, #8]
 80066b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066b2:	2301      	movs	r3, #1
 80066b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066b6:	4b77      	ldr	r3, [pc, #476]	; (8006894 <HAL_RCC_OscConfig+0x474>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d118      	bne.n	80066f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066c2:	4b74      	ldr	r3, [pc, #464]	; (8006894 <HAL_RCC_OscConfig+0x474>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a73      	ldr	r2, [pc, #460]	; (8006894 <HAL_RCC_OscConfig+0x474>)
 80066c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066ce:	f7fb ff45 	bl	800255c <HAL_GetTick>
 80066d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066d4:	e008      	b.n	80066e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066d6:	f7fb ff41 	bl	800255c <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d901      	bls.n	80066e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e10c      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066e8:	4b6a      	ldr	r3, [pc, #424]	; (8006894 <HAL_RCC_OscConfig+0x474>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d0f0      	beq.n	80066d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d106      	bne.n	800670a <HAL_RCC_OscConfig+0x2ea>
 80066fc:	4b64      	ldr	r3, [pc, #400]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 80066fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006700:	4a63      	ldr	r2, [pc, #396]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 8006702:	f043 0301 	orr.w	r3, r3, #1
 8006706:	6713      	str	r3, [r2, #112]	; 0x70
 8006708:	e01c      	b.n	8006744 <HAL_RCC_OscConfig+0x324>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	2b05      	cmp	r3, #5
 8006710:	d10c      	bne.n	800672c <HAL_RCC_OscConfig+0x30c>
 8006712:	4b5f      	ldr	r3, [pc, #380]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 8006714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006716:	4a5e      	ldr	r2, [pc, #376]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 8006718:	f043 0304 	orr.w	r3, r3, #4
 800671c:	6713      	str	r3, [r2, #112]	; 0x70
 800671e:	4b5c      	ldr	r3, [pc, #368]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 8006720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006722:	4a5b      	ldr	r2, [pc, #364]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 8006724:	f043 0301 	orr.w	r3, r3, #1
 8006728:	6713      	str	r3, [r2, #112]	; 0x70
 800672a:	e00b      	b.n	8006744 <HAL_RCC_OscConfig+0x324>
 800672c:	4b58      	ldr	r3, [pc, #352]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 800672e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006730:	4a57      	ldr	r2, [pc, #348]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 8006732:	f023 0301 	bic.w	r3, r3, #1
 8006736:	6713      	str	r3, [r2, #112]	; 0x70
 8006738:	4b55      	ldr	r3, [pc, #340]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 800673a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673c:	4a54      	ldr	r2, [pc, #336]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 800673e:	f023 0304 	bic.w	r3, r3, #4
 8006742:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d015      	beq.n	8006778 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800674c:	f7fb ff06 	bl	800255c <HAL_GetTick>
 8006750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006752:	e00a      	b.n	800676a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006754:	f7fb ff02 	bl	800255c <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006762:	4293      	cmp	r3, r2
 8006764:	d901      	bls.n	800676a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e0cb      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800676a:	4b49      	ldr	r3, [pc, #292]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 800676c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d0ee      	beq.n	8006754 <HAL_RCC_OscConfig+0x334>
 8006776:	e014      	b.n	80067a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006778:	f7fb fef0 	bl	800255c <HAL_GetTick>
 800677c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800677e:	e00a      	b.n	8006796 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006780:	f7fb feec 	bl	800255c <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	f241 3288 	movw	r2, #5000	; 0x1388
 800678e:	4293      	cmp	r3, r2
 8006790:	d901      	bls.n	8006796 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e0b5      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006796:	4b3e      	ldr	r3, [pc, #248]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 8006798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1ee      	bne.n	8006780 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067a2:	7dfb      	ldrb	r3, [r7, #23]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d105      	bne.n	80067b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067a8:	4b39      	ldr	r3, [pc, #228]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 80067aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ac:	4a38      	ldr	r2, [pc, #224]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 80067ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 80a1 	beq.w	8006900 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067be:	4b34      	ldr	r3, [pc, #208]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f003 030c 	and.w	r3, r3, #12
 80067c6:	2b08      	cmp	r3, #8
 80067c8:	d05c      	beq.n	8006884 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d141      	bne.n	8006856 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067d2:	4b31      	ldr	r3, [pc, #196]	; (8006898 <HAL_RCC_OscConfig+0x478>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067d8:	f7fb fec0 	bl	800255c <HAL_GetTick>
 80067dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067de:	e008      	b.n	80067f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067e0:	f7fb febc 	bl	800255c <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d901      	bls.n	80067f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e087      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067f2:	4b27      	ldr	r3, [pc, #156]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1f0      	bne.n	80067e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	69da      	ldr	r2, [r3, #28]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	431a      	orrs	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	019b      	lsls	r3, r3, #6
 800680e:	431a      	orrs	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006814:	085b      	lsrs	r3, r3, #1
 8006816:	3b01      	subs	r3, #1
 8006818:	041b      	lsls	r3, r3, #16
 800681a:	431a      	orrs	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	061b      	lsls	r3, r3, #24
 8006822:	491b      	ldr	r1, [pc, #108]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 8006824:	4313      	orrs	r3, r2
 8006826:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006828:	4b1b      	ldr	r3, [pc, #108]	; (8006898 <HAL_RCC_OscConfig+0x478>)
 800682a:	2201      	movs	r2, #1
 800682c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800682e:	f7fb fe95 	bl	800255c <HAL_GetTick>
 8006832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006834:	e008      	b.n	8006848 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006836:	f7fb fe91 	bl	800255c <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	2b02      	cmp	r3, #2
 8006842:	d901      	bls.n	8006848 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e05c      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006848:	4b11      	ldr	r3, [pc, #68]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d0f0      	beq.n	8006836 <HAL_RCC_OscConfig+0x416>
 8006854:	e054      	b.n	8006900 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006856:	4b10      	ldr	r3, [pc, #64]	; (8006898 <HAL_RCC_OscConfig+0x478>)
 8006858:	2200      	movs	r2, #0
 800685a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800685c:	f7fb fe7e 	bl	800255c <HAL_GetTick>
 8006860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006862:	e008      	b.n	8006876 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006864:	f7fb fe7a 	bl	800255c <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e045      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006876:	4b06      	ldr	r3, [pc, #24]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1f0      	bne.n	8006864 <HAL_RCC_OscConfig+0x444>
 8006882:	e03d      	b.n	8006900 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d107      	bne.n	800689c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e038      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
 8006890:	40023800 	.word	0x40023800
 8006894:	40007000 	.word	0x40007000
 8006898:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800689c:	4b1b      	ldr	r3, [pc, #108]	; (800690c <HAL_RCC_OscConfig+0x4ec>)
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d028      	beq.n	80068fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d121      	bne.n	80068fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d11a      	bne.n	80068fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80068cc:	4013      	ands	r3, r2
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80068d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d111      	bne.n	80068fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e2:	085b      	lsrs	r3, r3, #1
 80068e4:	3b01      	subs	r3, #1
 80068e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d107      	bne.n	80068fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d001      	beq.n	8006900 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e000      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	40023800 	.word	0x40023800

08006910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e0cc      	b.n	8006abe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006924:	4b68      	ldr	r3, [pc, #416]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	429a      	cmp	r2, r3
 8006930:	d90c      	bls.n	800694c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006932:	4b65      	ldr	r3, [pc, #404]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8006934:	683a      	ldr	r2, [r7, #0]
 8006936:	b2d2      	uxtb	r2, r2
 8006938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800693a:	4b63      	ldr	r3, [pc, #396]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b8>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0307 	and.w	r3, r3, #7
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	429a      	cmp	r2, r3
 8006946:	d001      	beq.n	800694c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e0b8      	b.n	8006abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b00      	cmp	r3, #0
 8006956:	d020      	beq.n	800699a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	2b00      	cmp	r3, #0
 8006962:	d005      	beq.n	8006970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006964:	4b59      	ldr	r3, [pc, #356]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	4a58      	ldr	r2, [pc, #352]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 800696a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800696e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0308 	and.w	r3, r3, #8
 8006978:	2b00      	cmp	r3, #0
 800697a:	d005      	beq.n	8006988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800697c:	4b53      	ldr	r3, [pc, #332]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	4a52      	ldr	r2, [pc, #328]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006986:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006988:	4b50      	ldr	r3, [pc, #320]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	494d      	ldr	r1, [pc, #308]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006996:	4313      	orrs	r3, r2
 8006998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d044      	beq.n	8006a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d107      	bne.n	80069be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ae:	4b47      	ldr	r3, [pc, #284]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d119      	bne.n	80069ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e07f      	b.n	8006abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d003      	beq.n	80069ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	d107      	bne.n	80069de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ce:	4b3f      	ldr	r3, [pc, #252]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d109      	bne.n	80069ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e06f      	b.n	8006abe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069de:	4b3b      	ldr	r3, [pc, #236]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e067      	b.n	8006abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069ee:	4b37      	ldr	r3, [pc, #220]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f023 0203 	bic.w	r2, r3, #3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	4934      	ldr	r1, [pc, #208]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a00:	f7fb fdac 	bl	800255c <HAL_GetTick>
 8006a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a06:	e00a      	b.n	8006a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a08:	f7fb fda8 	bl	800255c <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e04f      	b.n	8006abe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a1e:	4b2b      	ldr	r3, [pc, #172]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f003 020c 	and.w	r2, r3, #12
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d1eb      	bne.n	8006a08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a30:	4b25      	ldr	r3, [pc, #148]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0307 	and.w	r3, r3, #7
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d20c      	bcs.n	8006a58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a3e:	4b22      	ldr	r3, [pc, #136]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a40:	683a      	ldr	r2, [r7, #0]
 8006a42:	b2d2      	uxtb	r2, r2
 8006a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a46:	4b20      	ldr	r3, [pc, #128]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0307 	and.w	r3, r3, #7
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d001      	beq.n	8006a58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e032      	b.n	8006abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d008      	beq.n	8006a76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a64:	4b19      	ldr	r3, [pc, #100]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	4916      	ldr	r1, [pc, #88]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0308 	and.w	r3, r3, #8
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d009      	beq.n	8006a96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a82:	4b12      	ldr	r3, [pc, #72]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	490e      	ldr	r1, [pc, #56]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a96:	f000 f821 	bl	8006adc <HAL_RCC_GetSysClockFreq>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	4b0b      	ldr	r3, [pc, #44]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	091b      	lsrs	r3, r3, #4
 8006aa2:	f003 030f 	and.w	r3, r3, #15
 8006aa6:	490a      	ldr	r1, [pc, #40]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8006aa8:	5ccb      	ldrb	r3, [r1, r3]
 8006aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8006aae:	4a09      	ldr	r2, [pc, #36]	; (8006ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ab2:	4b09      	ldr	r3, [pc, #36]	; (8006ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fb fd0c 	bl	80024d4 <HAL_InitTick>

  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	40023c00 	.word	0x40023c00
 8006acc:	40023800 	.word	0x40023800
 8006ad0:	0800aed8 	.word	0x0800aed8
 8006ad4:	20000000 	.word	0x20000000
 8006ad8:	20000004 	.word	0x20000004

08006adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ae0:	b094      	sub	sp, #80	; 0x50
 8006ae2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ae8:	2300      	movs	r3, #0
 8006aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aec:	2300      	movs	r3, #0
 8006aee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006af4:	4b79      	ldr	r3, [pc, #484]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f003 030c 	and.w	r3, r3, #12
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d00d      	beq.n	8006b1c <HAL_RCC_GetSysClockFreq+0x40>
 8006b00:	2b08      	cmp	r3, #8
 8006b02:	f200 80e1 	bhi.w	8006cc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d002      	beq.n	8006b10 <HAL_RCC_GetSysClockFreq+0x34>
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d003      	beq.n	8006b16 <HAL_RCC_GetSysClockFreq+0x3a>
 8006b0e:	e0db      	b.n	8006cc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b10:	4b73      	ldr	r3, [pc, #460]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006b14:	e0db      	b.n	8006cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b16:	4b73      	ldr	r3, [pc, #460]	; (8006ce4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006b18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b1a:	e0d8      	b.n	8006cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b1c:	4b6f      	ldr	r3, [pc, #444]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b26:	4b6d      	ldr	r3, [pc, #436]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d063      	beq.n	8006bfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b32:	4b6a      	ldr	r3, [pc, #424]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	099b      	lsrs	r3, r3, #6
 8006b38:	2200      	movs	r2, #0
 8006b3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b44:	633b      	str	r3, [r7, #48]	; 0x30
 8006b46:	2300      	movs	r3, #0
 8006b48:	637b      	str	r3, [r7, #52]	; 0x34
 8006b4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006b4e:	4622      	mov	r2, r4
 8006b50:	462b      	mov	r3, r5
 8006b52:	f04f 0000 	mov.w	r0, #0
 8006b56:	f04f 0100 	mov.w	r1, #0
 8006b5a:	0159      	lsls	r1, r3, #5
 8006b5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b60:	0150      	lsls	r0, r2, #5
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	4621      	mov	r1, r4
 8006b68:	1a51      	subs	r1, r2, r1
 8006b6a:	6139      	str	r1, [r7, #16]
 8006b6c:	4629      	mov	r1, r5
 8006b6e:	eb63 0301 	sbc.w	r3, r3, r1
 8006b72:	617b      	str	r3, [r7, #20]
 8006b74:	f04f 0200 	mov.w	r2, #0
 8006b78:	f04f 0300 	mov.w	r3, #0
 8006b7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b80:	4659      	mov	r1, fp
 8006b82:	018b      	lsls	r3, r1, #6
 8006b84:	4651      	mov	r1, sl
 8006b86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b8a:	4651      	mov	r1, sl
 8006b8c:	018a      	lsls	r2, r1, #6
 8006b8e:	4651      	mov	r1, sl
 8006b90:	ebb2 0801 	subs.w	r8, r2, r1
 8006b94:	4659      	mov	r1, fp
 8006b96:	eb63 0901 	sbc.w	r9, r3, r1
 8006b9a:	f04f 0200 	mov.w	r2, #0
 8006b9e:	f04f 0300 	mov.w	r3, #0
 8006ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ba6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006baa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bae:	4690      	mov	r8, r2
 8006bb0:	4699      	mov	r9, r3
 8006bb2:	4623      	mov	r3, r4
 8006bb4:	eb18 0303 	adds.w	r3, r8, r3
 8006bb8:	60bb      	str	r3, [r7, #8]
 8006bba:	462b      	mov	r3, r5
 8006bbc:	eb49 0303 	adc.w	r3, r9, r3
 8006bc0:	60fb      	str	r3, [r7, #12]
 8006bc2:	f04f 0200 	mov.w	r2, #0
 8006bc6:	f04f 0300 	mov.w	r3, #0
 8006bca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006bce:	4629      	mov	r1, r5
 8006bd0:	024b      	lsls	r3, r1, #9
 8006bd2:	4621      	mov	r1, r4
 8006bd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006bd8:	4621      	mov	r1, r4
 8006bda:	024a      	lsls	r2, r1, #9
 8006bdc:	4610      	mov	r0, r2
 8006bde:	4619      	mov	r1, r3
 8006be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006be2:	2200      	movs	r2, #0
 8006be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006be6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006be8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bec:	f7f9 ff62 	bl	8000ab4 <__aeabi_uldivmod>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bf8:	e058      	b.n	8006cac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bfa:	4b38      	ldr	r3, [pc, #224]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	099b      	lsrs	r3, r3, #6
 8006c00:	2200      	movs	r2, #0
 8006c02:	4618      	mov	r0, r3
 8006c04:	4611      	mov	r1, r2
 8006c06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c0a:	623b      	str	r3, [r7, #32]
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8006c10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006c14:	4642      	mov	r2, r8
 8006c16:	464b      	mov	r3, r9
 8006c18:	f04f 0000 	mov.w	r0, #0
 8006c1c:	f04f 0100 	mov.w	r1, #0
 8006c20:	0159      	lsls	r1, r3, #5
 8006c22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c26:	0150      	lsls	r0, r2, #5
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4641      	mov	r1, r8
 8006c2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c32:	4649      	mov	r1, r9
 8006c34:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c38:	f04f 0200 	mov.w	r2, #0
 8006c3c:	f04f 0300 	mov.w	r3, #0
 8006c40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006c44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c4c:	ebb2 040a 	subs.w	r4, r2, sl
 8006c50:	eb63 050b 	sbc.w	r5, r3, fp
 8006c54:	f04f 0200 	mov.w	r2, #0
 8006c58:	f04f 0300 	mov.w	r3, #0
 8006c5c:	00eb      	lsls	r3, r5, #3
 8006c5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c62:	00e2      	lsls	r2, r4, #3
 8006c64:	4614      	mov	r4, r2
 8006c66:	461d      	mov	r5, r3
 8006c68:	4643      	mov	r3, r8
 8006c6a:	18e3      	adds	r3, r4, r3
 8006c6c:	603b      	str	r3, [r7, #0]
 8006c6e:	464b      	mov	r3, r9
 8006c70:	eb45 0303 	adc.w	r3, r5, r3
 8006c74:	607b      	str	r3, [r7, #4]
 8006c76:	f04f 0200 	mov.w	r2, #0
 8006c7a:	f04f 0300 	mov.w	r3, #0
 8006c7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c82:	4629      	mov	r1, r5
 8006c84:	028b      	lsls	r3, r1, #10
 8006c86:	4621      	mov	r1, r4
 8006c88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	028a      	lsls	r2, r1, #10
 8006c90:	4610      	mov	r0, r2
 8006c92:	4619      	mov	r1, r3
 8006c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c96:	2200      	movs	r2, #0
 8006c98:	61bb      	str	r3, [r7, #24]
 8006c9a:	61fa      	str	r2, [r7, #28]
 8006c9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ca0:	f7f9 ff08 	bl	8000ab4 <__aeabi_uldivmod>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	4613      	mov	r3, r2
 8006caa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006cac:	4b0b      	ldr	r3, [pc, #44]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	0c1b      	lsrs	r3, r3, #16
 8006cb2:	f003 0303 	and.w	r3, r3, #3
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	005b      	lsls	r3, r3, #1
 8006cba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006cbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006cc6:	e002      	b.n	8006cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cc8:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006cca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ccc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3750      	adds	r7, #80	; 0x50
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cda:	bf00      	nop
 8006cdc:	40023800 	.word	0x40023800
 8006ce0:	00f42400 	.word	0x00f42400
 8006ce4:	007a1200 	.word	0x007a1200

08006ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cec:	4b03      	ldr	r3, [pc, #12]	; (8006cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8006cee:	681b      	ldr	r3, [r3, #0]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	20000000 	.word	0x20000000

08006d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d04:	f7ff fff0 	bl	8006ce8 <HAL_RCC_GetHCLKFreq>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	4b05      	ldr	r3, [pc, #20]	; (8006d20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	0a9b      	lsrs	r3, r3, #10
 8006d10:	f003 0307 	and.w	r3, r3, #7
 8006d14:	4903      	ldr	r1, [pc, #12]	; (8006d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d16:	5ccb      	ldrb	r3, [r1, r3]
 8006d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	40023800 	.word	0x40023800
 8006d24:	0800aee8 	.word	0x0800aee8

08006d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d2c:	f7ff ffdc 	bl	8006ce8 <HAL_RCC_GetHCLKFreq>
 8006d30:	4602      	mov	r2, r0
 8006d32:	4b05      	ldr	r3, [pc, #20]	; (8006d48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	0b5b      	lsrs	r3, r3, #13
 8006d38:	f003 0307 	and.w	r3, r3, #7
 8006d3c:	4903      	ldr	r1, [pc, #12]	; (8006d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d3e:	5ccb      	ldrb	r3, [r1, r3]
 8006d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	40023800 	.word	0x40023800
 8006d4c:	0800aee8 	.word	0x0800aee8

08006d50 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d105      	bne.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d038      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006d78:	4b68      	ldr	r3, [pc, #416]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d7e:	f7fb fbed 	bl	800255c <HAL_GetTick>
 8006d82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d84:	e008      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006d86:	f7fb fbe9 	bl	800255c <HAL_GetTick>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d901      	bls.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e0bd      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d98:	4b61      	ldr	r3, [pc, #388]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1f0      	bne.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	019b      	lsls	r3, r3, #6
 8006dae:	431a      	orrs	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	071b      	lsls	r3, r3, #28
 8006db6:	495a      	ldr	r1, [pc, #360]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006dbe:	4b57      	ldr	r3, [pc, #348]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006dc4:	f7fb fbca 	bl	800255c <HAL_GetTick>
 8006dc8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006dca:	e008      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006dcc:	f7fb fbc6 	bl	800255c <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d901      	bls.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e09a      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006dde:	4b50      	ldr	r3, [pc, #320]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0f0      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 8083 	beq.w	8006efe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006df8:	2300      	movs	r3, #0
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	4b48      	ldr	r3, [pc, #288]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e00:	4a47      	ldr	r2, [pc, #284]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e06:	6413      	str	r3, [r2, #64]	; 0x40
 8006e08:	4b45      	ldr	r3, [pc, #276]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006e14:	4b43      	ldr	r3, [pc, #268]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a42      	ldr	r2, [pc, #264]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e1e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e20:	f7fb fb9c 	bl	800255c <HAL_GetTick>
 8006e24:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e26:	e008      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e28:	f7fb fb98 	bl	800255c <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d901      	bls.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e06c      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e3a:	4b3a      	ldr	r3, [pc, #232]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d0f0      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e46:	4b36      	ldr	r3, [pc, #216]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e4e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d02f      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d028      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e64:	4b2e      	ldr	r3, [pc, #184]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e6c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e6e:	4b2e      	ldr	r3, [pc, #184]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006e70:	2201      	movs	r2, #1
 8006e72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e74:	4b2c      	ldr	r3, [pc, #176]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006e7a:	4a29      	ldr	r2, [pc, #164]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e80:	4b27      	ldr	r3, [pc, #156]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d114      	bne.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006e8c:	f7fb fb66 	bl	800255c <HAL_GetTick>
 8006e90:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e92:	e00a      	b.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e94:	f7fb fb62 	bl	800255c <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d901      	bls.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e034      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eaa:	4b1d      	ldr	r3, [pc, #116]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eae:	f003 0302 	and.w	r3, r3, #2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0ee      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ebe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ec2:	d10d      	bne.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006ec4:	4b16      	ldr	r3, [pc, #88]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ed8:	4911      	ldr	r1, [pc, #68]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	608b      	str	r3, [r1, #8]
 8006ede:	e005      	b.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006ee0:	4b0f      	ldr	r3, [pc, #60]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	4a0e      	ldr	r2, [pc, #56]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ee6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006eea:	6093      	str	r3, [r2, #8]
 8006eec:	4b0c      	ldr	r3, [pc, #48]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ef8:	4909      	ldr	r1, [pc, #36]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0308 	and.w	r3, r3, #8
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	7d1a      	ldrb	r2, [r3, #20]
 8006f0e:	4b07      	ldr	r3, [pc, #28]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006f10:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3718      	adds	r7, #24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	42470068 	.word	0x42470068
 8006f20:	40023800 	.word	0x40023800
 8006f24:	40007000 	.word	0x40007000
 8006f28:	42470e40 	.word	0x42470e40
 8006f2c:	424711e0 	.word	0x424711e0

08006f30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006f44:	2300      	movs	r3, #0
 8006f46:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d140      	bne.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006f4e:	4b24      	ldr	r3, [pc, #144]	; (8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f56:	60fb      	str	r3, [r7, #12]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d005      	beq.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d131      	bne.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f64:	4b1f      	ldr	r3, [pc, #124]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006f66:	617b      	str	r3, [r7, #20]
          break;
 8006f68:	e031      	b.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006f6a:	4b1d      	ldr	r3, [pc, #116]	; (8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f76:	d109      	bne.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006f78:	4b19      	ldr	r3, [pc, #100]	; (8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f82:	4a19      	ldr	r2, [pc, #100]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f88:	613b      	str	r3, [r7, #16]
 8006f8a:	e008      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006f8c:	4b14      	ldr	r3, [pc, #80]	; (8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f96:	4a15      	ldr	r2, [pc, #84]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f9c:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006f9e:	4b10      	ldr	r3, [pc, #64]	; (8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fa4:	099b      	lsrs	r3, r3, #6
 8006fa6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	fb02 f303 	mul.w	r3, r2, r3
 8006fb0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006fb2:	4b0b      	ldr	r3, [pc, #44]	; (8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fb8:	0f1b      	lsrs	r3, r3, #28
 8006fba:	f003 0307 	and.w	r3, r3, #7
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc4:	617b      	str	r3, [r7, #20]
          break;
 8006fc6:	e002      	b.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	617b      	str	r3, [r7, #20]
          break;
 8006fcc:	bf00      	nop
        }
      }
      break;
 8006fce:	bf00      	nop
    }
  }
  return frequency;
 8006fd0:	697b      	ldr	r3, [r7, #20]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	371c      	adds	r7, #28
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	40023800 	.word	0x40023800
 8006fe4:	00bb8000 	.word	0x00bb8000
 8006fe8:	007a1200 	.word	0x007a1200
 8006fec:	00f42400 	.word	0x00f42400

08006ff0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e07b      	b.n	80070fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	2b00      	cmp	r3, #0
 8007008:	d108      	bne.n	800701c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007012:	d009      	beq.n	8007028 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	61da      	str	r2, [r3, #28]
 800701a:	e005      	b.n	8007028 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d106      	bne.n	8007048 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7fb f8b2 	bl	80021ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2202      	movs	r2, #2
 800704c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800705e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007070:	431a      	orrs	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800707a:	431a      	orrs	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	f003 0302 	and.w	r3, r3, #2
 8007084:	431a      	orrs	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	431a      	orrs	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007098:	431a      	orrs	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070a2:	431a      	orrs	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ac:	ea42 0103 	orr.w	r1, r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	430a      	orrs	r2, r1
 80070be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	0c1b      	lsrs	r3, r3, #16
 80070c6:	f003 0104 	and.w	r1, r3, #4
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ce:	f003 0210 	and.w	r2, r3, #16
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	69da      	ldr	r2, [r3, #28]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b082      	sub	sp, #8
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d101      	bne.n	8007114 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e03f      	b.n	8007194 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b00      	cmp	r3, #0
 800711e:	d106      	bne.n	800712e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7fb f887 	bl	800223c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2224      	movs	r2, #36	; 0x24
 8007132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68da      	ldr	r2, [r3, #12]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007144:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f828 	bl	800719c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	691a      	ldr	r2, [r3, #16]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800715a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	695a      	ldr	r2, [r3, #20]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800716a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68da      	ldr	r2, [r3, #12]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800717a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2220      	movs	r2, #32
 8007186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2220      	movs	r2, #32
 800718e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800719c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071a0:	b0c0      	sub	sp, #256	; 0x100
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80071b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b8:	68d9      	ldr	r1, [r3, #12]
 80071ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	ea40 0301 	orr.w	r3, r0, r1
 80071c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ca:	689a      	ldr	r2, [r3, #8]
 80071cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	431a      	orrs	r2, r3
 80071d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	431a      	orrs	r2, r3
 80071dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80071f4:	f021 010c 	bic.w	r1, r1, #12
 80071f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007202:	430b      	orrs	r3, r1
 8007204:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007216:	6999      	ldr	r1, [r3, #24]
 8007218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	ea40 0301 	orr.w	r3, r0, r1
 8007222:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	4b8f      	ldr	r3, [pc, #572]	; (8007468 <UART_SetConfig+0x2cc>)
 800722c:	429a      	cmp	r2, r3
 800722e:	d005      	beq.n	800723c <UART_SetConfig+0xa0>
 8007230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	4b8d      	ldr	r3, [pc, #564]	; (800746c <UART_SetConfig+0x2d0>)
 8007238:	429a      	cmp	r2, r3
 800723a:	d104      	bne.n	8007246 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800723c:	f7ff fd74 	bl	8006d28 <HAL_RCC_GetPCLK2Freq>
 8007240:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007244:	e003      	b.n	800724e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007246:	f7ff fd5b 	bl	8006d00 <HAL_RCC_GetPCLK1Freq>
 800724a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800724e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007252:	69db      	ldr	r3, [r3, #28]
 8007254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007258:	f040 810c 	bne.w	8007474 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800725c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007260:	2200      	movs	r2, #0
 8007262:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007266:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800726a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800726e:	4622      	mov	r2, r4
 8007270:	462b      	mov	r3, r5
 8007272:	1891      	adds	r1, r2, r2
 8007274:	65b9      	str	r1, [r7, #88]	; 0x58
 8007276:	415b      	adcs	r3, r3
 8007278:	65fb      	str	r3, [r7, #92]	; 0x5c
 800727a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800727e:	4621      	mov	r1, r4
 8007280:	eb12 0801 	adds.w	r8, r2, r1
 8007284:	4629      	mov	r1, r5
 8007286:	eb43 0901 	adc.w	r9, r3, r1
 800728a:	f04f 0200 	mov.w	r2, #0
 800728e:	f04f 0300 	mov.w	r3, #0
 8007292:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007296:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800729a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800729e:	4690      	mov	r8, r2
 80072a0:	4699      	mov	r9, r3
 80072a2:	4623      	mov	r3, r4
 80072a4:	eb18 0303 	adds.w	r3, r8, r3
 80072a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072ac:	462b      	mov	r3, r5
 80072ae:	eb49 0303 	adc.w	r3, r9, r3
 80072b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80072b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80072c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80072ca:	460b      	mov	r3, r1
 80072cc:	18db      	adds	r3, r3, r3
 80072ce:	653b      	str	r3, [r7, #80]	; 0x50
 80072d0:	4613      	mov	r3, r2
 80072d2:	eb42 0303 	adc.w	r3, r2, r3
 80072d6:	657b      	str	r3, [r7, #84]	; 0x54
 80072d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80072dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80072e0:	f7f9 fbe8 	bl	8000ab4 <__aeabi_uldivmod>
 80072e4:	4602      	mov	r2, r0
 80072e6:	460b      	mov	r3, r1
 80072e8:	4b61      	ldr	r3, [pc, #388]	; (8007470 <UART_SetConfig+0x2d4>)
 80072ea:	fba3 2302 	umull	r2, r3, r3, r2
 80072ee:	095b      	lsrs	r3, r3, #5
 80072f0:	011c      	lsls	r4, r3, #4
 80072f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072f6:	2200      	movs	r2, #0
 80072f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007300:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007304:	4642      	mov	r2, r8
 8007306:	464b      	mov	r3, r9
 8007308:	1891      	adds	r1, r2, r2
 800730a:	64b9      	str	r1, [r7, #72]	; 0x48
 800730c:	415b      	adcs	r3, r3
 800730e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007310:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007314:	4641      	mov	r1, r8
 8007316:	eb12 0a01 	adds.w	sl, r2, r1
 800731a:	4649      	mov	r1, r9
 800731c:	eb43 0b01 	adc.w	fp, r3, r1
 8007320:	f04f 0200 	mov.w	r2, #0
 8007324:	f04f 0300 	mov.w	r3, #0
 8007328:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800732c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007330:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007334:	4692      	mov	sl, r2
 8007336:	469b      	mov	fp, r3
 8007338:	4643      	mov	r3, r8
 800733a:	eb1a 0303 	adds.w	r3, sl, r3
 800733e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007342:	464b      	mov	r3, r9
 8007344:	eb4b 0303 	adc.w	r3, fp, r3
 8007348:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800734c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007358:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800735c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007360:	460b      	mov	r3, r1
 8007362:	18db      	adds	r3, r3, r3
 8007364:	643b      	str	r3, [r7, #64]	; 0x40
 8007366:	4613      	mov	r3, r2
 8007368:	eb42 0303 	adc.w	r3, r2, r3
 800736c:	647b      	str	r3, [r7, #68]	; 0x44
 800736e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007372:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007376:	f7f9 fb9d 	bl	8000ab4 <__aeabi_uldivmod>
 800737a:	4602      	mov	r2, r0
 800737c:	460b      	mov	r3, r1
 800737e:	4611      	mov	r1, r2
 8007380:	4b3b      	ldr	r3, [pc, #236]	; (8007470 <UART_SetConfig+0x2d4>)
 8007382:	fba3 2301 	umull	r2, r3, r3, r1
 8007386:	095b      	lsrs	r3, r3, #5
 8007388:	2264      	movs	r2, #100	; 0x64
 800738a:	fb02 f303 	mul.w	r3, r2, r3
 800738e:	1acb      	subs	r3, r1, r3
 8007390:	00db      	lsls	r3, r3, #3
 8007392:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007396:	4b36      	ldr	r3, [pc, #216]	; (8007470 <UART_SetConfig+0x2d4>)
 8007398:	fba3 2302 	umull	r2, r3, r3, r2
 800739c:	095b      	lsrs	r3, r3, #5
 800739e:	005b      	lsls	r3, r3, #1
 80073a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073a4:	441c      	add	r4, r3
 80073a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073aa:	2200      	movs	r2, #0
 80073ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80073b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80073b8:	4642      	mov	r2, r8
 80073ba:	464b      	mov	r3, r9
 80073bc:	1891      	adds	r1, r2, r2
 80073be:	63b9      	str	r1, [r7, #56]	; 0x38
 80073c0:	415b      	adcs	r3, r3
 80073c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80073c8:	4641      	mov	r1, r8
 80073ca:	1851      	adds	r1, r2, r1
 80073cc:	6339      	str	r1, [r7, #48]	; 0x30
 80073ce:	4649      	mov	r1, r9
 80073d0:	414b      	adcs	r3, r1
 80073d2:	637b      	str	r3, [r7, #52]	; 0x34
 80073d4:	f04f 0200 	mov.w	r2, #0
 80073d8:	f04f 0300 	mov.w	r3, #0
 80073dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80073e0:	4659      	mov	r1, fp
 80073e2:	00cb      	lsls	r3, r1, #3
 80073e4:	4651      	mov	r1, sl
 80073e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073ea:	4651      	mov	r1, sl
 80073ec:	00ca      	lsls	r2, r1, #3
 80073ee:	4610      	mov	r0, r2
 80073f0:	4619      	mov	r1, r3
 80073f2:	4603      	mov	r3, r0
 80073f4:	4642      	mov	r2, r8
 80073f6:	189b      	adds	r3, r3, r2
 80073f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073fc:	464b      	mov	r3, r9
 80073fe:	460a      	mov	r2, r1
 8007400:	eb42 0303 	adc.w	r3, r2, r3
 8007404:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007414:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007418:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800741c:	460b      	mov	r3, r1
 800741e:	18db      	adds	r3, r3, r3
 8007420:	62bb      	str	r3, [r7, #40]	; 0x28
 8007422:	4613      	mov	r3, r2
 8007424:	eb42 0303 	adc.w	r3, r2, r3
 8007428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800742a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800742e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007432:	f7f9 fb3f 	bl	8000ab4 <__aeabi_uldivmod>
 8007436:	4602      	mov	r2, r0
 8007438:	460b      	mov	r3, r1
 800743a:	4b0d      	ldr	r3, [pc, #52]	; (8007470 <UART_SetConfig+0x2d4>)
 800743c:	fba3 1302 	umull	r1, r3, r3, r2
 8007440:	095b      	lsrs	r3, r3, #5
 8007442:	2164      	movs	r1, #100	; 0x64
 8007444:	fb01 f303 	mul.w	r3, r1, r3
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	3332      	adds	r3, #50	; 0x32
 800744e:	4a08      	ldr	r2, [pc, #32]	; (8007470 <UART_SetConfig+0x2d4>)
 8007450:	fba2 2303 	umull	r2, r3, r2, r3
 8007454:	095b      	lsrs	r3, r3, #5
 8007456:	f003 0207 	and.w	r2, r3, #7
 800745a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4422      	add	r2, r4
 8007462:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007464:	e105      	b.n	8007672 <UART_SetConfig+0x4d6>
 8007466:	bf00      	nop
 8007468:	40011000 	.word	0x40011000
 800746c:	40011400 	.word	0x40011400
 8007470:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007478:	2200      	movs	r2, #0
 800747a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800747e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007482:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007486:	4642      	mov	r2, r8
 8007488:	464b      	mov	r3, r9
 800748a:	1891      	adds	r1, r2, r2
 800748c:	6239      	str	r1, [r7, #32]
 800748e:	415b      	adcs	r3, r3
 8007490:	627b      	str	r3, [r7, #36]	; 0x24
 8007492:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007496:	4641      	mov	r1, r8
 8007498:	1854      	adds	r4, r2, r1
 800749a:	4649      	mov	r1, r9
 800749c:	eb43 0501 	adc.w	r5, r3, r1
 80074a0:	f04f 0200 	mov.w	r2, #0
 80074a4:	f04f 0300 	mov.w	r3, #0
 80074a8:	00eb      	lsls	r3, r5, #3
 80074aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074ae:	00e2      	lsls	r2, r4, #3
 80074b0:	4614      	mov	r4, r2
 80074b2:	461d      	mov	r5, r3
 80074b4:	4643      	mov	r3, r8
 80074b6:	18e3      	adds	r3, r4, r3
 80074b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074bc:	464b      	mov	r3, r9
 80074be:	eb45 0303 	adc.w	r3, r5, r3
 80074c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80074d6:	f04f 0200 	mov.w	r2, #0
 80074da:	f04f 0300 	mov.w	r3, #0
 80074de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80074e2:	4629      	mov	r1, r5
 80074e4:	008b      	lsls	r3, r1, #2
 80074e6:	4621      	mov	r1, r4
 80074e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074ec:	4621      	mov	r1, r4
 80074ee:	008a      	lsls	r2, r1, #2
 80074f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80074f4:	f7f9 fade 	bl	8000ab4 <__aeabi_uldivmod>
 80074f8:	4602      	mov	r2, r0
 80074fa:	460b      	mov	r3, r1
 80074fc:	4b60      	ldr	r3, [pc, #384]	; (8007680 <UART_SetConfig+0x4e4>)
 80074fe:	fba3 2302 	umull	r2, r3, r3, r2
 8007502:	095b      	lsrs	r3, r3, #5
 8007504:	011c      	lsls	r4, r3, #4
 8007506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800750a:	2200      	movs	r2, #0
 800750c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007510:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007514:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007518:	4642      	mov	r2, r8
 800751a:	464b      	mov	r3, r9
 800751c:	1891      	adds	r1, r2, r2
 800751e:	61b9      	str	r1, [r7, #24]
 8007520:	415b      	adcs	r3, r3
 8007522:	61fb      	str	r3, [r7, #28]
 8007524:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007528:	4641      	mov	r1, r8
 800752a:	1851      	adds	r1, r2, r1
 800752c:	6139      	str	r1, [r7, #16]
 800752e:	4649      	mov	r1, r9
 8007530:	414b      	adcs	r3, r1
 8007532:	617b      	str	r3, [r7, #20]
 8007534:	f04f 0200 	mov.w	r2, #0
 8007538:	f04f 0300 	mov.w	r3, #0
 800753c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007540:	4659      	mov	r1, fp
 8007542:	00cb      	lsls	r3, r1, #3
 8007544:	4651      	mov	r1, sl
 8007546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800754a:	4651      	mov	r1, sl
 800754c:	00ca      	lsls	r2, r1, #3
 800754e:	4610      	mov	r0, r2
 8007550:	4619      	mov	r1, r3
 8007552:	4603      	mov	r3, r0
 8007554:	4642      	mov	r2, r8
 8007556:	189b      	adds	r3, r3, r2
 8007558:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800755c:	464b      	mov	r3, r9
 800755e:	460a      	mov	r2, r1
 8007560:	eb42 0303 	adc.w	r3, r2, r3
 8007564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	67bb      	str	r3, [r7, #120]	; 0x78
 8007572:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007574:	f04f 0200 	mov.w	r2, #0
 8007578:	f04f 0300 	mov.w	r3, #0
 800757c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007580:	4649      	mov	r1, r9
 8007582:	008b      	lsls	r3, r1, #2
 8007584:	4641      	mov	r1, r8
 8007586:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800758a:	4641      	mov	r1, r8
 800758c:	008a      	lsls	r2, r1, #2
 800758e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007592:	f7f9 fa8f 	bl	8000ab4 <__aeabi_uldivmod>
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	4b39      	ldr	r3, [pc, #228]	; (8007680 <UART_SetConfig+0x4e4>)
 800759c:	fba3 1302 	umull	r1, r3, r3, r2
 80075a0:	095b      	lsrs	r3, r3, #5
 80075a2:	2164      	movs	r1, #100	; 0x64
 80075a4:	fb01 f303 	mul.w	r3, r1, r3
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	011b      	lsls	r3, r3, #4
 80075ac:	3332      	adds	r3, #50	; 0x32
 80075ae:	4a34      	ldr	r2, [pc, #208]	; (8007680 <UART_SetConfig+0x4e4>)
 80075b0:	fba2 2303 	umull	r2, r3, r2, r3
 80075b4:	095b      	lsrs	r3, r3, #5
 80075b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075ba:	441c      	add	r4, r3
 80075bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075c0:	2200      	movs	r2, #0
 80075c2:	673b      	str	r3, [r7, #112]	; 0x70
 80075c4:	677a      	str	r2, [r7, #116]	; 0x74
 80075c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80075ca:	4642      	mov	r2, r8
 80075cc:	464b      	mov	r3, r9
 80075ce:	1891      	adds	r1, r2, r2
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	415b      	adcs	r3, r3
 80075d4:	60fb      	str	r3, [r7, #12]
 80075d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075da:	4641      	mov	r1, r8
 80075dc:	1851      	adds	r1, r2, r1
 80075de:	6039      	str	r1, [r7, #0]
 80075e0:	4649      	mov	r1, r9
 80075e2:	414b      	adcs	r3, r1
 80075e4:	607b      	str	r3, [r7, #4]
 80075e6:	f04f 0200 	mov.w	r2, #0
 80075ea:	f04f 0300 	mov.w	r3, #0
 80075ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075f2:	4659      	mov	r1, fp
 80075f4:	00cb      	lsls	r3, r1, #3
 80075f6:	4651      	mov	r1, sl
 80075f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075fc:	4651      	mov	r1, sl
 80075fe:	00ca      	lsls	r2, r1, #3
 8007600:	4610      	mov	r0, r2
 8007602:	4619      	mov	r1, r3
 8007604:	4603      	mov	r3, r0
 8007606:	4642      	mov	r2, r8
 8007608:	189b      	adds	r3, r3, r2
 800760a:	66bb      	str	r3, [r7, #104]	; 0x68
 800760c:	464b      	mov	r3, r9
 800760e:	460a      	mov	r2, r1
 8007610:	eb42 0303 	adc.w	r3, r2, r3
 8007614:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	663b      	str	r3, [r7, #96]	; 0x60
 8007620:	667a      	str	r2, [r7, #100]	; 0x64
 8007622:	f04f 0200 	mov.w	r2, #0
 8007626:	f04f 0300 	mov.w	r3, #0
 800762a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800762e:	4649      	mov	r1, r9
 8007630:	008b      	lsls	r3, r1, #2
 8007632:	4641      	mov	r1, r8
 8007634:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007638:	4641      	mov	r1, r8
 800763a:	008a      	lsls	r2, r1, #2
 800763c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007640:	f7f9 fa38 	bl	8000ab4 <__aeabi_uldivmod>
 8007644:	4602      	mov	r2, r0
 8007646:	460b      	mov	r3, r1
 8007648:	4b0d      	ldr	r3, [pc, #52]	; (8007680 <UART_SetConfig+0x4e4>)
 800764a:	fba3 1302 	umull	r1, r3, r3, r2
 800764e:	095b      	lsrs	r3, r3, #5
 8007650:	2164      	movs	r1, #100	; 0x64
 8007652:	fb01 f303 	mul.w	r3, r1, r3
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	011b      	lsls	r3, r3, #4
 800765a:	3332      	adds	r3, #50	; 0x32
 800765c:	4a08      	ldr	r2, [pc, #32]	; (8007680 <UART_SetConfig+0x4e4>)
 800765e:	fba2 2303 	umull	r2, r3, r2, r3
 8007662:	095b      	lsrs	r3, r3, #5
 8007664:	f003 020f 	and.w	r2, r3, #15
 8007668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4422      	add	r2, r4
 8007670:	609a      	str	r2, [r3, #8]
}
 8007672:	bf00      	nop
 8007674:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007678:	46bd      	mov	sp, r7
 800767a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800767e:	bf00      	nop
 8007680:	51eb851f 	.word	0x51eb851f

08007684 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007684:	b084      	sub	sp, #16
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	f107 001c 	add.w	r0, r7, #28
 8007692:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007698:	2b01      	cmp	r3, #1
 800769a:	d122      	bne.n	80076e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80076b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80076c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d105      	bne.n	80076d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f9c0 	bl	8007a5c <USB_CoreReset>
 80076dc:	4603      	mov	r3, r0
 80076de:	73fb      	strb	r3, [r7, #15]
 80076e0:	e01a      	b.n	8007718 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f9b4 	bl	8007a5c <USB_CoreReset>
 80076f4:	4603      	mov	r3, r0
 80076f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80076f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d106      	bne.n	800770c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007702:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	639a      	str	r2, [r3, #56]	; 0x38
 800770a:	e005      	b.n	8007718 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007710:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771a:	2b01      	cmp	r3, #1
 800771c:	d10b      	bne.n	8007736 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f043 0206 	orr.w	r2, r3, #6
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f043 0220 	orr.w	r2, r3, #32
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007736:	7bfb      	ldrb	r3, [r7, #15]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007742:	b004      	add	sp, #16
 8007744:	4770      	bx	lr

08007746 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007746:	b480      	push	{r7}
 8007748:	b083      	sub	sp, #12
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f043 0201 	orr.w	r2, r3, #1
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f023 0201 	bic.w	r2, r3, #1
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	460b      	mov	r3, r1
 8007794:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007796:	2300      	movs	r3, #0
 8007798:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80077a6:	78fb      	ldrb	r3, [r7, #3]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d115      	bne.n	80077d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80077b8:	2001      	movs	r0, #1
 80077ba:	f7fa fedb 	bl	8002574 <HAL_Delay>
      ms++;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	3301      	adds	r3, #1
 80077c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f93a 	bl	8007a3e <USB_GetMode>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d01e      	beq.n	800780e <USB_SetCurrentMode+0x84>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2b31      	cmp	r3, #49	; 0x31
 80077d4:	d9f0      	bls.n	80077b8 <USB_SetCurrentMode+0x2e>
 80077d6:	e01a      	b.n	800780e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80077d8:	78fb      	ldrb	r3, [r7, #3]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d115      	bne.n	800780a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80077ea:	2001      	movs	r0, #1
 80077ec:	f7fa fec2 	bl	8002574 <HAL_Delay>
      ms++;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	3301      	adds	r3, #1
 80077f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f921 	bl	8007a3e <USB_GetMode>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d005      	beq.n	800780e <USB_SetCurrentMode+0x84>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2b31      	cmp	r3, #49	; 0x31
 8007806:	d9f0      	bls.n	80077ea <USB_SetCurrentMode+0x60>
 8007808:	e001      	b.n	800780e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e005      	b.n	800781a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2b32      	cmp	r3, #50	; 0x32
 8007812:	d101      	bne.n	8007818 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e000      	b.n	800781a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
	...

08007824 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800782e:	2300      	movs	r3, #0
 8007830:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	3301      	adds	r3, #1
 8007836:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	4a13      	ldr	r2, [pc, #76]	; (8007888 <USB_FlushTxFifo+0x64>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d901      	bls.n	8007844 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	e01b      	b.n	800787c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	2b00      	cmp	r3, #0
 800784a:	daf2      	bge.n	8007832 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	019b      	lsls	r3, r3, #6
 8007854:	f043 0220 	orr.w	r2, r3, #32
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	3301      	adds	r3, #1
 8007860:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	4a08      	ldr	r2, [pc, #32]	; (8007888 <USB_FlushTxFifo+0x64>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d901      	bls.n	800786e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e006      	b.n	800787c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	f003 0320 	and.w	r3, r3, #32
 8007876:	2b20      	cmp	r3, #32
 8007878:	d0f0      	beq.n	800785c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3714      	adds	r7, #20
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr
 8007888:	00030d40 	.word	0x00030d40

0800788c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007894:	2300      	movs	r3, #0
 8007896:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	3301      	adds	r3, #1
 800789c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	4a11      	ldr	r2, [pc, #68]	; (80078e8 <USB_FlushRxFifo+0x5c>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d901      	bls.n	80078aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e018      	b.n	80078dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	daf2      	bge.n	8007898 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80078b2:	2300      	movs	r3, #0
 80078b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2210      	movs	r2, #16
 80078ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	3301      	adds	r3, #1
 80078c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	4a08      	ldr	r2, [pc, #32]	; (80078e8 <USB_FlushRxFifo+0x5c>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d901      	bls.n	80078ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e006      	b.n	80078dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	f003 0310 	and.w	r3, r3, #16
 80078d6:	2b10      	cmp	r3, #16
 80078d8:	d0f0      	beq.n	80078bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	00030d40 	.word	0x00030d40

080078ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b089      	sub	sp, #36	; 0x24
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	4611      	mov	r1, r2
 80078f8:	461a      	mov	r2, r3
 80078fa:	460b      	mov	r3, r1
 80078fc:	71fb      	strb	r3, [r7, #7]
 80078fe:	4613      	mov	r3, r2
 8007900:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800790a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800790e:	2b00      	cmp	r3, #0
 8007910:	d123      	bne.n	800795a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007912:	88bb      	ldrh	r3, [r7, #4]
 8007914:	3303      	adds	r3, #3
 8007916:	089b      	lsrs	r3, r3, #2
 8007918:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800791a:	2300      	movs	r3, #0
 800791c:	61bb      	str	r3, [r7, #24]
 800791e:	e018      	b.n	8007952 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007920:	79fb      	ldrb	r3, [r7, #7]
 8007922:	031a      	lsls	r2, r3, #12
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	4413      	add	r3, r2
 8007928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800792c:	461a      	mov	r2, r3
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	3301      	adds	r3, #1
 8007938:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	3301      	adds	r3, #1
 800793e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	3301      	adds	r3, #1
 8007944:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	3301      	adds	r3, #1
 800794a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	3301      	adds	r3, #1
 8007950:	61bb      	str	r3, [r7, #24]
 8007952:	69ba      	ldr	r2, [r7, #24]
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	429a      	cmp	r2, r3
 8007958:	d3e2      	bcc.n	8007920 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3724      	adds	r7, #36	; 0x24
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007968:	b480      	push	{r7}
 800796a:	b08b      	sub	sp, #44	; 0x2c
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	4613      	mov	r3, r2
 8007974:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800797e:	88fb      	ldrh	r3, [r7, #6]
 8007980:	089b      	lsrs	r3, r3, #2
 8007982:	b29b      	uxth	r3, r3
 8007984:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007986:	88fb      	ldrh	r3, [r7, #6]
 8007988:	f003 0303 	and.w	r3, r3, #3
 800798c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800798e:	2300      	movs	r3, #0
 8007990:	623b      	str	r3, [r7, #32]
 8007992:	e014      	b.n	80079be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	601a      	str	r2, [r3, #0]
    pDest++;
 80079a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a2:	3301      	adds	r3, #1
 80079a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	3301      	adds	r3, #1
 80079aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	3301      	adds	r3, #1
 80079b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b4:	3301      	adds	r3, #1
 80079b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	3301      	adds	r3, #1
 80079bc:	623b      	str	r3, [r7, #32]
 80079be:	6a3a      	ldr	r2, [r7, #32]
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d3e6      	bcc.n	8007994 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80079c6:	8bfb      	ldrh	r3, [r7, #30]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d01e      	beq.n	8007a0a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80079cc:	2300      	movs	r3, #0
 80079ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079d6:	461a      	mov	r2, r3
 80079d8:	f107 0310 	add.w	r3, r7, #16
 80079dc:	6812      	ldr	r2, [r2, #0]
 80079de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	00db      	lsls	r3, r3, #3
 80079e8:	fa22 f303 	lsr.w	r3, r2, r3
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f0:	701a      	strb	r2, [r3, #0]
      i++;
 80079f2:	6a3b      	ldr	r3, [r7, #32]
 80079f4:	3301      	adds	r3, #1
 80079f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80079f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fa:	3301      	adds	r3, #1
 80079fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80079fe:	8bfb      	ldrh	r3, [r7, #30]
 8007a00:	3b01      	subs	r3, #1
 8007a02:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007a04:	8bfb      	ldrh	r3, [r7, #30]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1ea      	bne.n	80079e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	372c      	adds	r7, #44	; 0x2c
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007a30:	68fb      	ldr	r3, [r7, #12]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr

08007a3e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007a3e:	b480      	push	{r7}
 8007a40:	b083      	sub	sp, #12
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	f003 0301 	and.w	r3, r3, #1
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
	...

08007a5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	4a13      	ldr	r2, [pc, #76]	; (8007ac0 <USB_CoreReset+0x64>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d901      	bls.n	8007a7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e01b      	b.n	8007ab2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	daf2      	bge.n	8007a68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a82:	2300      	movs	r3, #0
 8007a84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	f043 0201 	orr.w	r2, r3, #1
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	3301      	adds	r3, #1
 8007a96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4a09      	ldr	r2, [pc, #36]	; (8007ac0 <USB_CoreReset+0x64>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d901      	bls.n	8007aa4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e006      	b.n	8007ab2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d0f0      	beq.n	8007a92 <USB_CoreReset+0x36>

  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	00030d40 	.word	0x00030d40

08007ac4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ac4:	b084      	sub	sp, #16
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b086      	sub	sp, #24
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007ad2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b06:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d018      	beq.n	8007b4c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d10a      	bne.n	8007b36 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b2e:	f043 0304 	orr.w	r3, r3, #4
 8007b32:	6013      	str	r3, [r2, #0]
 8007b34:	e014      	b.n	8007b60 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b44:	f023 0304 	bic.w	r3, r3, #4
 8007b48:	6013      	str	r3, [r2, #0]
 8007b4a:	e009      	b.n	8007b60 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b5a:	f023 0304 	bic.w	r3, r3, #4
 8007b5e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b60:	2110      	movs	r1, #16
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7ff fe5e 	bl	8007824 <USB_FlushTxFifo>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7ff fe8a 	bl	800788c <USB_FlushRxFifo>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007b82:	2300      	movs	r3, #0
 8007b84:	613b      	str	r3, [r7, #16]
 8007b86:	e015      	b.n	8007bb4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	015a      	lsls	r2, r3, #5
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b94:	461a      	mov	r2, r3
 8007b96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b9a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	015a      	lsls	r2, r3, #5
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ba8:	461a      	mov	r2, r3
 8007baa:	2300      	movs	r3, #0
 8007bac:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	613b      	str	r3, [r7, #16]
 8007bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d3e5      	bcc.n	8007b88 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bc8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00b      	beq.n	8007bee <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bdc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a13      	ldr	r2, [pc, #76]	; (8007c30 <USB_HostInit+0x16c>)
 8007be2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a13      	ldr	r2, [pc, #76]	; (8007c34 <USB_HostInit+0x170>)
 8007be8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007bec:	e009      	b.n	8007c02 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2280      	movs	r2, #128	; 0x80
 8007bf2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a10      	ldr	r2, [pc, #64]	; (8007c38 <USB_HostInit+0x174>)
 8007bf8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a0f      	ldr	r2, [pc, #60]	; (8007c3c <USB_HostInit+0x178>)
 8007bfe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d105      	bne.n	8007c14 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	f043 0210 	orr.w	r2, r3, #16
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	699a      	ldr	r2, [r3, #24]
 8007c18:	4b09      	ldr	r3, [pc, #36]	; (8007c40 <USB_HostInit+0x17c>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3718      	adds	r7, #24
 8007c26:	46bd      	mov	sp, r7
 8007c28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c2c:	b004      	add	sp, #16
 8007c2e:	4770      	bx	lr
 8007c30:	01000200 	.word	0x01000200
 8007c34:	00e00300 	.word	0x00e00300
 8007c38:	00600080 	.word	0x00600080
 8007c3c:	004000e0 	.word	0x004000e0
 8007c40:	a3200008 	.word	0xa3200008

08007c44 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c62:	f023 0303 	bic.w	r3, r3, #3
 8007c66:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	78fb      	ldrb	r3, [r7, #3]
 8007c72:	f003 0303 	and.w	r3, r3, #3
 8007c76:	68f9      	ldr	r1, [r7, #12]
 8007c78:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007c80:	78fb      	ldrb	r3, [r7, #3]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d107      	bne.n	8007c96 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007c92:	6053      	str	r3, [r2, #4]
 8007c94:	e009      	b.n	8007caa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007c96:	78fb      	ldrb	r3, [r7, #3]
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d106      	bne.n	8007caa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	f241 7370 	movw	r3, #6000	; 0x1770
 8007ca8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007cd8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ce6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007ce8:	2064      	movs	r0, #100	; 0x64
 8007cea:	f7fa fc43 	bl	8002574 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007cf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cfa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007cfc:	200a      	movs	r0, #10
 8007cfe:	f7fa fc39 	bl	8002574 <HAL_Delay>

  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	460b      	mov	r3, r1
 8007d16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007d30:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d109      	bne.n	8007d50 <USB_DriveVbus+0x44>
 8007d3c:	78fb      	ldrb	r3, [r7, #3]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d106      	bne.n	8007d50 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007d4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007d4e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d5a:	d109      	bne.n	8007d70 <USB_DriveVbus+0x64>
 8007d5c:	78fb      	ldrb	r3, [r7, #3]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d106      	bne.n	8007d70 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007d6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d6e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b085      	sub	sp, #20
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	0c5b      	lsrs	r3, r3, #17
 8007d9c:	f003 0303 	and.w	r3, r3, #3
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3714      	adds	r7, #20
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	b29b      	uxth	r3, r3
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3714      	adds	r7, #20
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
	...

08007dd0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b088      	sub	sp, #32
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	4608      	mov	r0, r1
 8007dda:	4611      	mov	r1, r2
 8007ddc:	461a      	mov	r2, r3
 8007dde:	4603      	mov	r3, r0
 8007de0:	70fb      	strb	r3, [r7, #3]
 8007de2:	460b      	mov	r3, r1
 8007de4:	70bb      	strb	r3, [r7, #2]
 8007de6:	4613      	mov	r3, r2
 8007de8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007df2:	78fb      	ldrb	r3, [r7, #3]
 8007df4:	015a      	lsls	r2, r3, #5
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	4413      	add	r3, r2
 8007dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dfe:	461a      	mov	r2, r3
 8007e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e04:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007e06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007e0a:	2b03      	cmp	r3, #3
 8007e0c:	d87e      	bhi.n	8007f0c <USB_HC_Init+0x13c>
 8007e0e:	a201      	add	r2, pc, #4	; (adr r2, 8007e14 <USB_HC_Init+0x44>)
 8007e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e14:	08007e25 	.word	0x08007e25
 8007e18:	08007ecf 	.word	0x08007ecf
 8007e1c:	08007e25 	.word	0x08007e25
 8007e20:	08007e91 	.word	0x08007e91
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007e24:	78fb      	ldrb	r3, [r7, #3]
 8007e26:	015a      	lsls	r2, r3, #5
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e30:	461a      	mov	r2, r3
 8007e32:	f240 439d 	movw	r3, #1181	; 0x49d
 8007e36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007e38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	da10      	bge.n	8007e62 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007e40:	78fb      	ldrb	r3, [r7, #3]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	78fa      	ldrb	r2, [r7, #3]
 8007e50:	0151      	lsls	r1, r2, #5
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	440a      	add	r2, r1
 8007e56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e5e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007e60:	e057      	b.n	8007f12 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d051      	beq.n	8007f12 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007e6e:	78fb      	ldrb	r3, [r7, #3]
 8007e70:	015a      	lsls	r2, r3, #5
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	78fa      	ldrb	r2, [r7, #3]
 8007e7e:	0151      	lsls	r1, r2, #5
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	440a      	add	r2, r1
 8007e84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007e8c:	60d3      	str	r3, [r2, #12]
      break;
 8007e8e:	e040      	b.n	8007f12 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007e90:	78fb      	ldrb	r3, [r7, #3]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007ea2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007ea4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	da34      	bge.n	8007f16 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007eac:	78fb      	ldrb	r3, [r7, #3]
 8007eae:	015a      	lsls	r2, r3, #5
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	78fa      	ldrb	r2, [r7, #3]
 8007ebc:	0151      	lsls	r1, r2, #5
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	440a      	add	r2, r1
 8007ec2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007eca:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007ecc:	e023      	b.n	8007f16 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ece:	78fb      	ldrb	r3, [r7, #3]
 8007ed0:	015a      	lsls	r2, r3, #5
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eda:	461a      	mov	r2, r3
 8007edc:	f240 2325 	movw	r3, #549	; 0x225
 8007ee0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007ee2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	da17      	bge.n	8007f1a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007eea:	78fb      	ldrb	r3, [r7, #3]
 8007eec:	015a      	lsls	r2, r3, #5
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	78fa      	ldrb	r2, [r7, #3]
 8007efa:	0151      	lsls	r1, r2, #5
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	440a      	add	r2, r1
 8007f00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f04:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007f08:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007f0a:	e006      	b.n	8007f1a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	77fb      	strb	r3, [r7, #31]
      break;
 8007f10:	e004      	b.n	8007f1c <USB_HC_Init+0x14c>
      break;
 8007f12:	bf00      	nop
 8007f14:	e002      	b.n	8007f1c <USB_HC_Init+0x14c>
      break;
 8007f16:	bf00      	nop
 8007f18:	e000      	b.n	8007f1c <USB_HC_Init+0x14c>
      break;
 8007f1a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007f1c:	78fb      	ldrb	r3, [r7, #3]
 8007f1e:	015a      	lsls	r2, r3, #5
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	4413      	add	r3, r2
 8007f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	78fa      	ldrb	r2, [r7, #3]
 8007f2c:	0151      	lsls	r1, r2, #5
 8007f2e:	693a      	ldr	r2, [r7, #16]
 8007f30:	440a      	add	r2, r1
 8007f32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f36:	f043 0302 	orr.w	r3, r3, #2
 8007f3a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f42:	699a      	ldr	r2, [r3, #24]
 8007f44:	78fb      	ldrb	r3, [r7, #3]
 8007f46:	f003 030f 	and.w	r3, r3, #15
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007f50:	6939      	ldr	r1, [r7, #16]
 8007f52:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007f56:	4313      	orrs	r3, r2
 8007f58:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007f66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	da03      	bge.n	8007f76 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f72:	61bb      	str	r3, [r7, #24]
 8007f74:	e001      	b.n	8007f7a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007f76:	2300      	movs	r3, #0
 8007f78:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7ff feff 	bl	8007d7e <USB_GetHostSpeed>
 8007f80:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007f82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d106      	bne.n	8007f98 <USB_HC_Init+0x1c8>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d003      	beq.n	8007f98 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007f90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007f94:	617b      	str	r3, [r7, #20]
 8007f96:	e001      	b.n	8007f9c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007f9c:	787b      	ldrb	r3, [r7, #1]
 8007f9e:	059b      	lsls	r3, r3, #22
 8007fa0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007fa4:	78bb      	ldrb	r3, [r7, #2]
 8007fa6:	02db      	lsls	r3, r3, #11
 8007fa8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007fac:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007fae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007fb2:	049b      	lsls	r3, r3, #18
 8007fb4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007fb8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007fba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007fbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007fc0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007fc6:	78fb      	ldrb	r3, [r7, #3]
 8007fc8:	0159      	lsls	r1, r3, #5
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	440b      	add	r3, r1
 8007fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fd2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007fd8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007fda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007fde:	2b03      	cmp	r3, #3
 8007fe0:	d003      	beq.n	8007fea <USB_HC_Init+0x21a>
 8007fe2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d10f      	bne.n	800800a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007fea:	78fb      	ldrb	r3, [r7, #3]
 8007fec:	015a      	lsls	r2, r3, #5
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	78fa      	ldrb	r2, [r7, #3]
 8007ffa:	0151      	lsls	r1, r2, #5
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	440a      	add	r2, r1
 8008000:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008004:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008008:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800800a:	7ffb      	ldrb	r3, [r7, #31]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3720      	adds	r7, #32
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b08c      	sub	sp, #48	; 0x30
 8008018:	af02      	add	r7, sp, #8
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	4613      	mov	r3, r2
 8008020:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	785b      	ldrb	r3, [r3, #1]
 800802a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800802c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008030:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800803a:	2b00      	cmp	r3, #0
 800803c:	d02d      	beq.n	800809a <USB_HC_StartXfer+0x86>
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	791b      	ldrb	r3, [r3, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d129      	bne.n	800809a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008046:	79fb      	ldrb	r3, [r7, #7]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d117      	bne.n	800807c <USB_HC_StartXfer+0x68>
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	79db      	ldrb	r3, [r3, #7]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d003      	beq.n	800805c <USB_HC_StartXfer+0x48>
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	79db      	ldrb	r3, [r3, #7]
 8008058:	2b02      	cmp	r3, #2
 800805a:	d10f      	bne.n	800807c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	4413      	add	r3, r2
 8008064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	69fa      	ldr	r2, [r7, #28]
 800806c:	0151      	lsls	r1, r2, #5
 800806e:	6a3a      	ldr	r2, [r7, #32]
 8008070:	440a      	add	r2, r1
 8008072:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800807a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800807c:	79fb      	ldrb	r3, [r7, #7]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10b      	bne.n	800809a <USB_HC_StartXfer+0x86>
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	795b      	ldrb	r3, [r3, #5]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d107      	bne.n	800809a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	785b      	ldrb	r3, [r3, #1]
 800808e:	4619      	mov	r1, r3
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f000 fa0f 	bl	80084b4 <USB_DoPing>
      return HAL_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	e0f8      	b.n	800828c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	695b      	ldr	r3, [r3, #20]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d018      	beq.n	80080d4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	68ba      	ldr	r2, [r7, #8]
 80080a8:	8912      	ldrh	r2, [r2, #8]
 80080aa:	4413      	add	r3, r2
 80080ac:	3b01      	subs	r3, #1
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	8912      	ldrh	r2, [r2, #8]
 80080b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80080b6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80080b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80080ba:	8b7b      	ldrh	r3, [r7, #26]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d90b      	bls.n	80080d8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80080c0:	8b7b      	ldrh	r3, [r7, #26]
 80080c2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80080c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	8912      	ldrh	r2, [r2, #8]
 80080ca:	fb03 f202 	mul.w	r2, r3, r2
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	611a      	str	r2, [r3, #16]
 80080d2:	e001      	b.n	80080d8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80080d4:	2301      	movs	r3, #1
 80080d6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	78db      	ldrb	r3, [r3, #3]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d007      	beq.n	80080f0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80080e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	8912      	ldrh	r2, [r2, #8]
 80080e6:	fb03 f202 	mul.w	r2, r3, r2
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	611a      	str	r2, [r3, #16]
 80080ee:	e003      	b.n	80080f8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	695a      	ldr	r2, [r3, #20]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008100:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008102:	04d9      	lsls	r1, r3, #19
 8008104:	4b63      	ldr	r3, [pc, #396]	; (8008294 <USB_HC_StartXfer+0x280>)
 8008106:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008108:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	7a9b      	ldrb	r3, [r3, #10]
 800810e:	075b      	lsls	r3, r3, #29
 8008110:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008114:	69f9      	ldr	r1, [r7, #28]
 8008116:	0148      	lsls	r0, r1, #5
 8008118:	6a39      	ldr	r1, [r7, #32]
 800811a:	4401      	add	r1, r0
 800811c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008120:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008122:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008124:	79fb      	ldrb	r3, [r7, #7]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d009      	beq.n	800813e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	68d9      	ldr	r1, [r3, #12]
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	4413      	add	r3, r2
 8008136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800813a:	460a      	mov	r2, r1
 800813c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	bf0c      	ite	eq
 800814e:	2301      	moveq	r3, #1
 8008150:	2300      	movne	r3, #0
 8008152:	b2db      	uxtb	r3, r3
 8008154:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	015a      	lsls	r2, r3, #5
 800815a:	6a3b      	ldr	r3, [r7, #32]
 800815c:	4413      	add	r3, r2
 800815e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	69fa      	ldr	r2, [r7, #28]
 8008166:	0151      	lsls	r1, r2, #5
 8008168:	6a3a      	ldr	r2, [r7, #32]
 800816a:	440a      	add	r2, r1
 800816c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008170:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008174:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	015a      	lsls	r2, r3, #5
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	4413      	add	r3, r2
 800817e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	7e7b      	ldrb	r3, [r7, #25]
 8008186:	075b      	lsls	r3, r3, #29
 8008188:	69f9      	ldr	r1, [r7, #28]
 800818a:	0148      	lsls	r0, r1, #5
 800818c:	6a39      	ldr	r1, [r7, #32]
 800818e:	4401      	add	r1, r0
 8008190:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008194:	4313      	orrs	r3, r2
 8008196:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081ae:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	78db      	ldrb	r3, [r3, #3]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d004      	beq.n	80081c2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081be:	613b      	str	r3, [r7, #16]
 80081c0:	e003      	b.n	80081ca <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80081c8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081d0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	015a      	lsls	r2, r3, #5
 80081d6:	6a3b      	ldr	r3, [r7, #32]
 80081d8:	4413      	add	r3, r2
 80081da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081de:	461a      	mov	r2, r3
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80081e4:	79fb      	ldrb	r3, [r7, #7]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	e04e      	b.n	800828c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	78db      	ldrb	r3, [r3, #3]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d149      	bne.n	800828a <USB_HC_StartXfer+0x276>
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d045      	beq.n	800828a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	79db      	ldrb	r3, [r3, #7]
 8008202:	2b03      	cmp	r3, #3
 8008204:	d830      	bhi.n	8008268 <USB_HC_StartXfer+0x254>
 8008206:	a201      	add	r2, pc, #4	; (adr r2, 800820c <USB_HC_StartXfer+0x1f8>)
 8008208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820c:	0800821d 	.word	0x0800821d
 8008210:	08008241 	.word	0x08008241
 8008214:	0800821d 	.word	0x0800821d
 8008218:	08008241 	.word	0x08008241
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	3303      	adds	r3, #3
 8008222:	089b      	lsrs	r3, r3, #2
 8008224:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008226:	8afa      	ldrh	r2, [r7, #22]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822c:	b29b      	uxth	r3, r3
 800822e:	429a      	cmp	r2, r3
 8008230:	d91c      	bls.n	800826c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	f043 0220 	orr.w	r2, r3, #32
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	619a      	str	r2, [r3, #24]
        }
        break;
 800823e:	e015      	b.n	800826c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	695b      	ldr	r3, [r3, #20]
 8008244:	3303      	adds	r3, #3
 8008246:	089b      	lsrs	r3, r3, #2
 8008248:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800824a:	8afa      	ldrh	r2, [r7, #22]
 800824c:	6a3b      	ldr	r3, [r7, #32]
 800824e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	b29b      	uxth	r3, r3
 8008256:	429a      	cmp	r2, r3
 8008258:	d90a      	bls.n	8008270 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	619a      	str	r2, [r3, #24]
        }
        break;
 8008266:	e003      	b.n	8008270 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008268:	bf00      	nop
 800826a:	e002      	b.n	8008272 <USB_HC_StartXfer+0x25e>
        break;
 800826c:	bf00      	nop
 800826e:	e000      	b.n	8008272 <USB_HC_StartXfer+0x25e>
        break;
 8008270:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	68d9      	ldr	r1, [r3, #12]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	785a      	ldrb	r2, [r3, #1]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	b29b      	uxth	r3, r3
 8008280:	2000      	movs	r0, #0
 8008282:	9000      	str	r0, [sp, #0]
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f7ff fb31 	bl	80078ec <USB_WritePacket>
  }

  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3728      	adds	r7, #40	; 0x28
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	1ff80000 	.word	0x1ff80000

08008298 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082aa:	695b      	ldr	r3, [r3, #20]
 80082ac:	b29b      	uxth	r3, r3
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3714      	adds	r7, #20
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b089      	sub	sp, #36	; 0x24
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	460b      	mov	r3, r1
 80082c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80082ca:	78fb      	ldrb	r3, [r7, #3]
 80082cc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	0c9b      	lsrs	r3, r3, #18
 80082e2:	f003 0303 	and.w	r3, r3, #3
 80082e6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	015a      	lsls	r2, r3, #5
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	4413      	add	r3, r2
 80082f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	0fdb      	lsrs	r3, r3, #31
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f003 0320 	and.w	r3, r3, #32
 8008306:	2b20      	cmp	r3, #32
 8008308:	d104      	bne.n	8008314 <USB_HC_Halt+0x5a>
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008310:	2300      	movs	r3, #0
 8008312:	e0c8      	b.n	80084a6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d002      	beq.n	8008320 <USB_HC_Halt+0x66>
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	2b02      	cmp	r3, #2
 800831e:	d163      	bne.n	80083e8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	4413      	add	r3, r2
 8008328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	69ba      	ldr	r2, [r7, #24]
 8008330:	0151      	lsls	r1, r2, #5
 8008332:	69fa      	ldr	r2, [r7, #28]
 8008334:	440a      	add	r2, r1
 8008336:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800833a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800833e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f003 0320 	and.w	r3, r3, #32
 8008348:	2b00      	cmp	r3, #0
 800834a:	f040 80ab 	bne.w	80084a4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008352:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008356:	2b00      	cmp	r3, #0
 8008358:	d133      	bne.n	80083c2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	015a      	lsls	r2, r3, #5
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	4413      	add	r3, r2
 8008362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	69ba      	ldr	r2, [r7, #24]
 800836a:	0151      	lsls	r1, r2, #5
 800836c:	69fa      	ldr	r2, [r7, #28]
 800836e:	440a      	add	r2, r1
 8008370:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008374:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008378:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	015a      	lsls	r2, r3, #5
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	4413      	add	r3, r2
 8008382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	0151      	lsls	r1, r2, #5
 800838c:	69fa      	ldr	r2, [r7, #28]
 800838e:	440a      	add	r2, r1
 8008390:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008394:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008398:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	3301      	adds	r3, #1
 800839e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083a6:	d81d      	bhi.n	80083e4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	015a      	lsls	r2, r3, #5
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	4413      	add	r3, r2
 80083b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083be:	d0ec      	beq.n	800839a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083c0:	e070      	b.n	80084a4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	015a      	lsls	r2, r3, #5
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	4413      	add	r3, r2
 80083ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	69ba      	ldr	r2, [r7, #24]
 80083d2:	0151      	lsls	r1, r2, #5
 80083d4:	69fa      	ldr	r2, [r7, #28]
 80083d6:	440a      	add	r2, r1
 80083d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083e0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083e2:	e05f      	b.n	80084a4 <USB_HC_Halt+0x1ea>
            break;
 80083e4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083e6:	e05d      	b.n	80084a4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	015a      	lsls	r2, r3, #5
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	4413      	add	r3, r2
 80083f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	69ba      	ldr	r2, [r7, #24]
 80083f8:	0151      	lsls	r1, r2, #5
 80083fa:	69fa      	ldr	r2, [r7, #28]
 80083fc:	440a      	add	r2, r1
 80083fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008402:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008406:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008414:	2b00      	cmp	r3, #0
 8008416:	d133      	bne.n	8008480 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	4413      	add	r3, r2
 8008420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	69ba      	ldr	r2, [r7, #24]
 8008428:	0151      	lsls	r1, r2, #5
 800842a:	69fa      	ldr	r2, [r7, #28]
 800842c:	440a      	add	r2, r1
 800842e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008432:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008436:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	015a      	lsls	r2, r3, #5
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	4413      	add	r3, r2
 8008440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69ba      	ldr	r2, [r7, #24]
 8008448:	0151      	lsls	r1, r2, #5
 800844a:	69fa      	ldr	r2, [r7, #28]
 800844c:	440a      	add	r2, r1
 800844e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008452:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008456:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	3301      	adds	r3, #1
 800845c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008464:	d81d      	bhi.n	80084a2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	015a      	lsls	r2, r3, #5
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	4413      	add	r3, r2
 800846e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008478:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800847c:	d0ec      	beq.n	8008458 <USB_HC_Halt+0x19e>
 800847e:	e011      	b.n	80084a4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	015a      	lsls	r2, r3, #5
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	4413      	add	r3, r2
 8008488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	69ba      	ldr	r2, [r7, #24]
 8008490:	0151      	lsls	r1, r2, #5
 8008492:	69fa      	ldr	r2, [r7, #28]
 8008494:	440a      	add	r2, r1
 8008496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800849a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800849e:	6013      	str	r3, [r2, #0]
 80084a0:	e000      	b.n	80084a4 <USB_HC_Halt+0x1ea>
          break;
 80084a2:	bf00      	nop
    }
  }

  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3724      	adds	r7, #36	; 0x24
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
	...

080084b4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b087      	sub	sp, #28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80084c4:	78fb      	ldrb	r3, [r7, #3]
 80084c6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80084c8:	2301      	movs	r3, #1
 80084ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	04da      	lsls	r2, r3, #19
 80084d0:	4b15      	ldr	r3, [pc, #84]	; (8008528 <USB_DoPing+0x74>)
 80084d2:	4013      	ands	r3, r2
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	0151      	lsls	r1, r2, #5
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	440a      	add	r2, r1
 80084dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084e4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80084fc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008504:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	4413      	add	r3, r2
 800850e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008512:	461a      	mov	r2, r3
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	371c      	adds	r7, #28
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	1ff80000 	.word	0x1ff80000

0800852c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b088      	sub	sp, #32
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008534:	2300      	movs	r3, #0
 8008536:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800853c:	2300      	movs	r3, #0
 800853e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7ff f911 	bl	8007768 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008546:	2110      	movs	r1, #16
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7ff f96b 	bl	8007824 <USB_FlushTxFifo>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d001      	beq.n	8008558 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7ff f997 	bl	800788c <USB_FlushRxFifo>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d001      	beq.n	8008568 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008568:	2300      	movs	r3, #0
 800856a:	61bb      	str	r3, [r7, #24]
 800856c:	e01f      	b.n	80085ae <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	4413      	add	r3, r2
 8008576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008584:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800858c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008594:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	015a      	lsls	r2, r3, #5
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	4413      	add	r3, r2
 800859e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085a2:	461a      	mov	r2, r3
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	3301      	adds	r3, #1
 80085ac:	61bb      	str	r3, [r7, #24]
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	2b0f      	cmp	r3, #15
 80085b2:	d9dc      	bls.n	800856e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80085b4:	2300      	movs	r3, #0
 80085b6:	61bb      	str	r3, [r7, #24]
 80085b8:	e034      	b.n	8008624 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	015a      	lsls	r2, r3, #5
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	4413      	add	r3, r2
 80085c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085d0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80085e0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	015a      	lsls	r2, r3, #5
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	4413      	add	r3, r2
 80085ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ee:	461a      	mov	r2, r3
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	3301      	adds	r3, #1
 80085f8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008600:	d80c      	bhi.n	800861c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	015a      	lsls	r2, r3, #5
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	4413      	add	r3, r2
 800860a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008618:	d0ec      	beq.n	80085f4 <USB_StopHost+0xc8>
 800861a:	e000      	b.n	800861e <USB_StopHost+0xf2>
        break;
 800861c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	3301      	adds	r3, #1
 8008622:	61bb      	str	r3, [r7, #24]
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	2b0f      	cmp	r3, #15
 8008628:	d9c7      	bls.n	80085ba <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008630:	461a      	mov	r2, r3
 8008632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008636:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800863e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f7ff f880 	bl	8007746 <USB_EnableGlobalInt>

  return ret;
 8008646:	7ffb      	ldrb	r3, [r7, #31]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3720      	adds	r7, #32
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008650:	b590      	push	{r4, r7, lr}
 8008652:	b089      	sub	sp, #36	; 0x24
 8008654:	af04      	add	r7, sp, #16
 8008656:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008658:	2301      	movs	r3, #1
 800865a:	2202      	movs	r2, #2
 800865c:	2102      	movs	r1, #2
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 fc66 	bl	8008f30 <USBH_FindInterface>
 8008664:	4603      	mov	r3, r0
 8008666:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008668:	7bfb      	ldrb	r3, [r7, #15]
 800866a:	2bff      	cmp	r3, #255	; 0xff
 800866c:	d002      	beq.n	8008674 <USBH_CDC_InterfaceInit+0x24>
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d901      	bls.n	8008678 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008674:	2302      	movs	r3, #2
 8008676:	e13d      	b.n	80088f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008678:	7bfb      	ldrb	r3, [r7, #15]
 800867a:	4619      	mov	r1, r3
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fc3b 	bl	8008ef8 <USBH_SelectInterface>
 8008682:	4603      	mov	r3, r0
 8008684:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008686:	7bbb      	ldrb	r3, [r7, #14]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d001      	beq.n	8008690 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800868c:	2302      	movs	r3, #2
 800868e:	e131      	b.n	80088f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008696:	2050      	movs	r0, #80	; 0x50
 8008698:	f002 fafa 	bl	800ac90 <malloc>
 800869c:	4603      	mov	r3, r0
 800869e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086a6:	69db      	ldr	r3, [r3, #28]
 80086a8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d101      	bne.n	80086b4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80086b0:	2302      	movs	r3, #2
 80086b2:	e11f      	b.n	80088f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80086b4:	2250      	movs	r2, #80	; 0x50
 80086b6:	2100      	movs	r1, #0
 80086b8:	68b8      	ldr	r0, [r7, #8]
 80086ba:	f002 faf9 	bl	800acb0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80086be:	7bfb      	ldrb	r3, [r7, #15]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	211a      	movs	r1, #26
 80086c4:	fb01 f303 	mul.w	r3, r1, r3
 80086c8:	4413      	add	r3, r2
 80086ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	b25b      	sxtb	r3, r3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	da15      	bge.n	8008702 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80086d6:	7bfb      	ldrb	r3, [r7, #15]
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	211a      	movs	r1, #26
 80086dc:	fb01 f303 	mul.w	r3, r1, r3
 80086e0:	4413      	add	r3, r2
 80086e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80086e6:	781a      	ldrb	r2, [r3, #0]
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	211a      	movs	r1, #26
 80086f2:	fb01 f303 	mul.w	r3, r1, r3
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80086fc:	881a      	ldrh	r2, [r3, #0]
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	785b      	ldrb	r3, [r3, #1]
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f001 ff2c 	bl	800a566 <USBH_AllocPipe>
 800870e:	4603      	mov	r3, r0
 8008710:	461a      	mov	r2, r3
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	7819      	ldrb	r1, [r3, #0]
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	7858      	ldrb	r0, [r3, #1]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	8952      	ldrh	r2, [r2, #10]
 800872e:	9202      	str	r2, [sp, #8]
 8008730:	2203      	movs	r2, #3
 8008732:	9201      	str	r2, [sp, #4]
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	4623      	mov	r3, r4
 8008738:	4602      	mov	r2, r0
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f001 fee4 	bl	800a508 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	2200      	movs	r2, #0
 8008746:	4619      	mov	r1, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f002 f9f3 	bl	800ab34 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800874e:	2300      	movs	r3, #0
 8008750:	2200      	movs	r2, #0
 8008752:	210a      	movs	r1, #10
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fbeb 	bl	8008f30 <USBH_FindInterface>
 800875a:	4603      	mov	r3, r0
 800875c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800875e:	7bfb      	ldrb	r3, [r7, #15]
 8008760:	2bff      	cmp	r3, #255	; 0xff
 8008762:	d002      	beq.n	800876a <USBH_CDC_InterfaceInit+0x11a>
 8008764:	7bfb      	ldrb	r3, [r7, #15]
 8008766:	2b01      	cmp	r3, #1
 8008768:	d901      	bls.n	800876e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800876a:	2302      	movs	r3, #2
 800876c:	e0c2      	b.n	80088f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800876e:	7bfb      	ldrb	r3, [r7, #15]
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	211a      	movs	r1, #26
 8008774:	fb01 f303 	mul.w	r3, r1, r3
 8008778:	4413      	add	r3, r2
 800877a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	b25b      	sxtb	r3, r3
 8008782:	2b00      	cmp	r3, #0
 8008784:	da16      	bge.n	80087b4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008786:	7bfb      	ldrb	r3, [r7, #15]
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	211a      	movs	r1, #26
 800878c:	fb01 f303 	mul.w	r3, r1, r3
 8008790:	4413      	add	r3, r2
 8008792:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008796:	781a      	ldrb	r2, [r3, #0]
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	211a      	movs	r1, #26
 80087a2:	fb01 f303 	mul.w	r3, r1, r3
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80087ac:	881a      	ldrh	r2, [r3, #0]
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	835a      	strh	r2, [r3, #26]
 80087b2:	e015      	b.n	80087e0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	211a      	movs	r1, #26
 80087ba:	fb01 f303 	mul.w	r3, r1, r3
 80087be:	4413      	add	r3, r2
 80087c0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80087c4:	781a      	ldrb	r2, [r3, #0]
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	211a      	movs	r1, #26
 80087d0:	fb01 f303 	mul.w	r3, r1, r3
 80087d4:	4413      	add	r3, r2
 80087d6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80087da:	881a      	ldrh	r2, [r3, #0]
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80087e0:	7bfb      	ldrb	r3, [r7, #15]
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	211a      	movs	r1, #26
 80087e6:	fb01 f303 	mul.w	r3, r1, r3
 80087ea:	4413      	add	r3, r2
 80087ec:	f203 3356 	addw	r3, r3, #854	; 0x356
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	b25b      	sxtb	r3, r3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	da16      	bge.n	8008826 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	211a      	movs	r1, #26
 80087fe:	fb01 f303 	mul.w	r3, r1, r3
 8008802:	4413      	add	r3, r2
 8008804:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008808:	781a      	ldrb	r2, [r3, #0]
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800880e:	7bfb      	ldrb	r3, [r7, #15]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	211a      	movs	r1, #26
 8008814:	fb01 f303 	mul.w	r3, r1, r3
 8008818:	4413      	add	r3, r2
 800881a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800881e:	881a      	ldrh	r2, [r3, #0]
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	835a      	strh	r2, [r3, #26]
 8008824:	e015      	b.n	8008852 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008826:	7bfb      	ldrb	r3, [r7, #15]
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	211a      	movs	r1, #26
 800882c:	fb01 f303 	mul.w	r3, r1, r3
 8008830:	4413      	add	r3, r2
 8008832:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008836:	781a      	ldrb	r2, [r3, #0]
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800883c:	7bfb      	ldrb	r3, [r7, #15]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	211a      	movs	r1, #26
 8008842:	fb01 f303 	mul.w	r3, r1, r3
 8008846:	4413      	add	r3, r2
 8008848:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800884c:	881a      	ldrh	r2, [r3, #0]
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	7b9b      	ldrb	r3, [r3, #14]
 8008856:	4619      	mov	r1, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f001 fe84 	bl	800a566 <USBH_AllocPipe>
 800885e:	4603      	mov	r3, r0
 8008860:	461a      	mov	r2, r3
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	7bdb      	ldrb	r3, [r3, #15]
 800886a:	4619      	mov	r1, r3
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f001 fe7a 	bl	800a566 <USBH_AllocPipe>
 8008872:	4603      	mov	r3, r0
 8008874:	461a      	mov	r2, r3
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	7b59      	ldrb	r1, [r3, #13]
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	7b98      	ldrb	r0, [r3, #14]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	8b12      	ldrh	r2, [r2, #24]
 8008892:	9202      	str	r2, [sp, #8]
 8008894:	2202      	movs	r2, #2
 8008896:	9201      	str	r2, [sp, #4]
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	4623      	mov	r3, r4
 800889c:	4602      	mov	r2, r0
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f001 fe32 	bl	800a508 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	7b19      	ldrb	r1, [r3, #12]
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	7bd8      	ldrb	r0, [r3, #15]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	8b52      	ldrh	r2, [r2, #26]
 80088bc:	9202      	str	r2, [sp, #8]
 80088be:	2202      	movs	r2, #2
 80088c0:	9201      	str	r2, [sp, #4]
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	4623      	mov	r3, r4
 80088c6:	4602      	mov	r2, r0
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f001 fe1d 	bl	800a508 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	7b5b      	ldrb	r3, [r3, #13]
 80088da:	2200      	movs	r2, #0
 80088dc:	4619      	mov	r1, r3
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f002 f928 	bl	800ab34 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	7b1b      	ldrb	r3, [r3, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	4619      	mov	r1, r3
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f002 f921 	bl	800ab34 <USBH_LL_SetToggle>

  return USBH_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3714      	adds	r7, #20
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd90      	pop	{r4, r7, pc}

080088fc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800890a:	69db      	ldr	r3, [r3, #28]
 800890c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00e      	beq.n	8008934 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	4619      	mov	r1, r3
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f001 fe12 	bl	800a546 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	4619      	mov	r1, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f001 fe3d 	bl	800a5a8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	7b1b      	ldrb	r3, [r3, #12]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00e      	beq.n	800895a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	7b1b      	ldrb	r3, [r3, #12]
 8008940:	4619      	mov	r1, r3
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f001 fdff 	bl	800a546 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	7b1b      	ldrb	r3, [r3, #12]
 800894c:	4619      	mov	r1, r3
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f001 fe2a 	bl	800a5a8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	7b5b      	ldrb	r3, [r3, #13]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00e      	beq.n	8008980 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	7b5b      	ldrb	r3, [r3, #13]
 8008966:	4619      	mov	r1, r3
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f001 fdec 	bl	800a546 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	7b5b      	ldrb	r3, [r3, #13]
 8008972:	4619      	mov	r1, r3
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f001 fe17 	bl	800a5a8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00b      	beq.n	80089a4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008992:	69db      	ldr	r3, [r3, #28]
 8008994:	4618      	mov	r0, r3
 8008996:	f002 f983 	bl	800aca0 <free>
    phost->pActiveClass->pData = 0U;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089a0:	2200      	movs	r2, #0
 80089a2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b084      	sub	sp, #16
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089bc:	69db      	ldr	r3, [r3, #28]
 80089be:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	3340      	adds	r3, #64	; 0x40
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 f8b1 	bl	8008b2e <GetLineCoding>
 80089cc:	4603      	mov	r3, r0
 80089ce:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80089d0:	7afb      	ldrb	r3, [r7, #11]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d105      	bne.n	80089e2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089dc:	2102      	movs	r1, #2
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80089e2:	7afb      	ldrb	r3, [r7, #11]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80089f4:	2301      	movs	r3, #1
 80089f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80089f8:	2300      	movs	r3, #0
 80089fa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a02:	69db      	ldr	r3, [r3, #28]
 8008a04:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008a0c:	2b04      	cmp	r3, #4
 8008a0e:	d877      	bhi.n	8008b00 <USBH_CDC_Process+0x114>
 8008a10:	a201      	add	r2, pc, #4	; (adr r2, 8008a18 <USBH_CDC_Process+0x2c>)
 8008a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a16:	bf00      	nop
 8008a18:	08008a2d 	.word	0x08008a2d
 8008a1c:	08008a33 	.word	0x08008a33
 8008a20:	08008a63 	.word	0x08008a63
 8008a24:	08008ad7 	.word	0x08008ad7
 8008a28:	08008ae5 	.word	0x08008ae5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a30:	e06d      	b.n	8008b0e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a36:	4619      	mov	r1, r3
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 f897 	bl	8008b6c <SetLineCoding>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008a42:	7bbb      	ldrb	r3, [r7, #14]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d104      	bne.n	8008a52 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008a50:	e058      	b.n	8008b04 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008a52:	7bbb      	ldrb	r3, [r7, #14]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d055      	beq.n	8008b04 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	2204      	movs	r2, #4
 8008a5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008a60:	e050      	b.n	8008b04 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	3340      	adds	r3, #64	; 0x40
 8008a66:	4619      	mov	r1, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f860 	bl	8008b2e <GetLineCoding>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008a72:	7bbb      	ldrb	r3, [r7, #14]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d126      	bne.n	8008ac6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a8a:	791b      	ldrb	r3, [r3, #4]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d13b      	bne.n	8008b08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a9a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d133      	bne.n	8008b08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008aaa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d12b      	bne.n	8008b08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ab8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d124      	bne.n	8008b08 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f958 	bl	8008d74 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008ac4:	e020      	b.n	8008b08 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008ac6:	7bbb      	ldrb	r3, [r7, #14]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d01d      	beq.n	8008b08 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	2204      	movs	r2, #4
 8008ad0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008ad4:	e018      	b.n	8008b08 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f867 	bl	8008baa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 f8da 	bl	8008c96 <CDC_ProcessReception>
      break;
 8008ae2:	e014      	b.n	8008b0e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 ffef 	bl	8009aca <USBH_ClrFeature>
 8008aec:	4603      	mov	r3, r0
 8008aee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008af0:	7bbb      	ldrb	r3, [r7, #14]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10a      	bne.n	8008b0c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008afe:	e005      	b.n	8008b0c <USBH_CDC_Process+0x120>

    default:
      break;
 8008b00:	bf00      	nop
 8008b02:	e004      	b.n	8008b0e <USBH_CDC_Process+0x122>
      break;
 8008b04:	bf00      	nop
 8008b06:	e002      	b.n	8008b0e <USBH_CDC_Process+0x122>
      break;
 8008b08:	bf00      	nop
 8008b0a:	e000      	b.n	8008b0e <USBH_CDC_Process+0x122>
      break;
 8008b0c:	bf00      	nop

  }

  return status;
 8008b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr

08008b2e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b082      	sub	sp, #8
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
 8008b36:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	22a1      	movs	r2, #161	; 0xa1
 8008b3c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2221      	movs	r2, #33	; 0x21
 8008b42:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2207      	movs	r2, #7
 8008b54:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	2207      	movs	r2, #7
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f001 fa81 	bl	800a064 <USBH_CtlReq>
 8008b62:	4603      	mov	r3, r0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2221      	movs	r2, #33	; 0x21
 8008b7a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2220      	movs	r2, #32
 8008b80:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2207      	movs	r2, #7
 8008b92:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	2207      	movs	r2, #7
 8008b98:	4619      	mov	r1, r3
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f001 fa62 	bl	800a064 <USBH_CtlReq>
 8008ba0:	4603      	mov	r3, r0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3708      	adds	r7, #8
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b086      	sub	sp, #24
 8008bae:	af02      	add	r7, sp, #8
 8008bb0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bb8:	69db      	ldr	r3, [r3, #28]
 8008bba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d002      	beq.n	8008bd0 <CDC_ProcessTransmission+0x26>
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d023      	beq.n	8008c16 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008bce:	e05e      	b.n	8008c8e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	8b12      	ldrh	r2, [r2, #24]
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d90b      	bls.n	8008bf4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	69d9      	ldr	r1, [r3, #28]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	8b1a      	ldrh	r2, [r3, #24]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	7b5b      	ldrb	r3, [r3, #13]
 8008be8:	2001      	movs	r0, #1
 8008bea:	9000      	str	r0, [sp, #0]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f001 fc48 	bl	800a482 <USBH_BulkSendData>
 8008bf2:	e00b      	b.n	8008c0c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	7b5b      	ldrb	r3, [r3, #13]
 8008c02:	2001      	movs	r0, #1
 8008c04:	9000      	str	r0, [sp, #0]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f001 fc3b 	bl	800a482 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008c14:	e03b      	b.n	8008c8e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	7b5b      	ldrb	r3, [r3, #13]
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f001 ff5f 	bl	800aae0 <USBH_LL_GetURBState>
 8008c22:	4603      	mov	r3, r0
 8008c24:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008c26:	7afb      	ldrb	r3, [r7, #11]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d128      	bne.n	8008c7e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	8b12      	ldrh	r2, [r2, #24]
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d90e      	bls.n	8008c56 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3c:	68fa      	ldr	r2, [r7, #12]
 8008c3e:	8b12      	ldrh	r2, [r2, #24]
 8008c40:	1a9a      	subs	r2, r3, r2
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	8b12      	ldrh	r2, [r2, #24]
 8008c4e:	441a      	add	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	61da      	str	r2, [r3, #28]
 8008c54:	e002      	b.n	8008c5c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d004      	beq.n	8008c6e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008c6c:	e00e      	b.n	8008c8c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f868 	bl	8008d4c <USBH_CDC_TransmitCallback>
      break;
 8008c7c:	e006      	b.n	8008c8c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008c7e:	7afb      	ldrb	r3, [r7, #11]
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d103      	bne.n	8008c8c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008c8c:	bf00      	nop
  }
}
 8008c8e:	bf00      	nop
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b086      	sub	sp, #24
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008cb2:	2b03      	cmp	r3, #3
 8008cb4:	d002      	beq.n	8008cbc <CDC_ProcessReception+0x26>
 8008cb6:	2b04      	cmp	r3, #4
 8008cb8:	d00e      	beq.n	8008cd8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008cba:	e043      	b.n	8008d44 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	6a19      	ldr	r1, [r3, #32]
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	8b5a      	ldrh	r2, [r3, #26]
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	7b1b      	ldrb	r3, [r3, #12]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f001 fbff 	bl	800a4cc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	2204      	movs	r2, #4
 8008cd2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008cd6:	e035      	b.n	8008d44 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	7b1b      	ldrb	r3, [r3, #12]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f001 fefe 	bl	800aae0 <USBH_LL_GetURBState>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008ce8:	7cfb      	ldrb	r3, [r7, #19]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d129      	bne.n	8008d42 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	7b1b      	ldrb	r3, [r3, #12]
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f001 fe61 	bl	800a9bc <USBH_LL_GetLastXferSize>
 8008cfa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d016      	beq.n	8008d34 <CDC_ProcessReception+0x9e>
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	8b5b      	ldrh	r3, [r3, #26]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d910      	bls.n	8008d34 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	1ad2      	subs	r2, r2, r3
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	6a1a      	ldr	r2, [r3, #32]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	441a      	add	r2, r3
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	2203      	movs	r2, #3
 8008d2e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008d32:	e006      	b.n	8008d42 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f80f 	bl	8008d60 <USBH_CDC_ReceiveCallback>
      break;
 8008d42:	bf00      	nop
  }
}
 8008d44:	bf00      	nop
 8008d46:	3718      	adds	r7, #24
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008d54:	bf00      	nop
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008d68:	bf00      	nop
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008d7c:	bf00      	nop
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	4613      	mov	r3, r2
 8008d94:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d101      	bne.n	8008da0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	e029      	b.n	8008df4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	79fa      	ldrb	r2, [r7, #7]
 8008da4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f000 f81f 	bl	8008dfc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d003      	beq.n	8008dec <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f001 fd31 	bl	800a854 <USBH_LL_Init>

  return USBH_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008e04:	2300      	movs	r3, #0
 8008e06:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008e08:	2300      	movs	r3, #0
 8008e0a:	60fb      	str	r3, [r7, #12]
 8008e0c:	e009      	b.n	8008e22 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	33e0      	adds	r3, #224	; 0xe0
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	2200      	movs	r2, #0
 8008e1a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	60fb      	str	r3, [r7, #12]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2b0f      	cmp	r3, #15
 8008e26:	d9f2      	bls.n	8008e0e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008e28:	2300      	movs	r3, #0
 8008e2a:	60fb      	str	r3, [r7, #12]
 8008e2c:	e009      	b.n	8008e42 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4413      	add	r3, r2
 8008e34:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008e38:	2200      	movs	r2, #0
 8008e3a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	60fb      	str	r3, [r7, #12]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e48:	d3f1      	bcc.n	8008e2e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2240      	movs	r2, #64	; 0x40
 8008e6e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3714      	adds	r7, #20
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d016      	beq.n	8008ee6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10e      	bne.n	8008ee0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008ec8:	1c59      	adds	r1, r3, #1
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	33de      	adds	r3, #222	; 0xde
 8008ed4:	6839      	ldr	r1, [r7, #0]
 8008ed6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008eda:	2300      	movs	r3, #0
 8008edc:	73fb      	strb	r3, [r7, #15]
 8008ede:	e004      	b.n	8008eea <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	73fb      	strb	r3, [r7, #15]
 8008ee4:	e001      	b.n	8008eea <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008ee6:	2302      	movs	r3, #2
 8008ee8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3714      	adds	r7, #20
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	460b      	mov	r3, r1
 8008f02:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008f0e:	78fa      	ldrb	r2, [r7, #3]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d204      	bcs.n	8008f1e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	78fa      	ldrb	r2, [r7, #3]
 8008f18:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008f1c:	e001      	b.n	8008f22 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008f1e:	2302      	movs	r3, #2
 8008f20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3714      	adds	r7, #20
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b087      	sub	sp, #28
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	4608      	mov	r0, r1
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	4603      	mov	r3, r0
 8008f40:	70fb      	strb	r3, [r7, #3]
 8008f42:	460b      	mov	r3, r1
 8008f44:	70bb      	strb	r3, [r7, #2]
 8008f46:	4613      	mov	r3, r2
 8008f48:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008f58:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008f5a:	e025      	b.n	8008fa8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008f5c:	7dfb      	ldrb	r3, [r7, #23]
 8008f5e:	221a      	movs	r2, #26
 8008f60:	fb02 f303 	mul.w	r3, r2, r3
 8008f64:	3308      	adds	r3, #8
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	4413      	add	r3, r2
 8008f6a:	3302      	adds	r3, #2
 8008f6c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	795b      	ldrb	r3, [r3, #5]
 8008f72:	78fa      	ldrb	r2, [r7, #3]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d002      	beq.n	8008f7e <USBH_FindInterface+0x4e>
 8008f78:	78fb      	ldrb	r3, [r7, #3]
 8008f7a:	2bff      	cmp	r3, #255	; 0xff
 8008f7c:	d111      	bne.n	8008fa2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008f82:	78ba      	ldrb	r2, [r7, #2]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d002      	beq.n	8008f8e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008f88:	78bb      	ldrb	r3, [r7, #2]
 8008f8a:	2bff      	cmp	r3, #255	; 0xff
 8008f8c:	d109      	bne.n	8008fa2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008f92:	787a      	ldrb	r2, [r7, #1]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d002      	beq.n	8008f9e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008f98:	787b      	ldrb	r3, [r7, #1]
 8008f9a:	2bff      	cmp	r3, #255	; 0xff
 8008f9c:	d101      	bne.n	8008fa2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008f9e:	7dfb      	ldrb	r3, [r7, #23]
 8008fa0:	e006      	b.n	8008fb0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008fa2:	7dfb      	ldrb	r3, [r7, #23]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008fa8:	7dfb      	ldrb	r3, [r7, #23]
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d9d6      	bls.n	8008f5c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008fae:	23ff      	movs	r3, #255	; 0xff
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	371c      	adds	r7, #28
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f001 fc81 	bl	800a8cc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008fca:	2101      	movs	r1, #1
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f001 fd9a 	bl	800ab06 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b088      	sub	sp, #32
 8008fe0:	af04      	add	r7, sp, #16
 8008fe2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d102      	bne.n	8008ffe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2203      	movs	r2, #3
 8008ffc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	b2db      	uxtb	r3, r3
 8009004:	2b0b      	cmp	r3, #11
 8009006:	f200 81be 	bhi.w	8009386 <USBH_Process+0x3aa>
 800900a:	a201      	add	r2, pc, #4	; (adr r2, 8009010 <USBH_Process+0x34>)
 800900c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009010:	08009041 	.word	0x08009041
 8009014:	08009073 	.word	0x08009073
 8009018:	080090db 	.word	0x080090db
 800901c:	08009321 	.word	0x08009321
 8009020:	08009387 	.word	0x08009387
 8009024:	0800917f 	.word	0x0800917f
 8009028:	080092c7 	.word	0x080092c7
 800902c:	080091b5 	.word	0x080091b5
 8009030:	080091d5 	.word	0x080091d5
 8009034:	080091f5 	.word	0x080091f5
 8009038:	08009239 	.word	0x08009239
 800903c:	08009309 	.word	0x08009309
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009046:	b2db      	uxtb	r3, r3
 8009048:	2b00      	cmp	r3, #0
 800904a:	f000 819e 	beq.w	800938a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2201      	movs	r2, #1
 8009052:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009054:	20c8      	movs	r0, #200	; 0xc8
 8009056:	f001 fd9d 	bl	800ab94 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f001 fc93 	bl	800a986 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009070:	e18b      	b.n	800938a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009078:	2b01      	cmp	r3, #1
 800907a:	d107      	bne.n	800908c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2202      	movs	r2, #2
 8009088:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800908a:	e18d      	b.n	80093a8 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009092:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009096:	d914      	bls.n	80090c2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800909e:	3301      	adds	r3, #1
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80090ae:	2b03      	cmp	r3, #3
 80090b0:	d903      	bls.n	80090ba <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	220d      	movs	r2, #13
 80090b6:	701a      	strb	r2, [r3, #0]
      break;
 80090b8:	e176      	b.n	80093a8 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	701a      	strb	r2, [r3, #0]
      break;
 80090c0:	e172      	b.n	80093a8 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80090c8:	f103 020a 	add.w	r2, r3, #10
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80090d2:	200a      	movs	r0, #10
 80090d4:	f001 fd5e 	bl	800ab94 <USBH_Delay>
      break;
 80090d8:	e166      	b.n	80093a8 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d005      	beq.n	80090f0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80090ea:	2104      	movs	r1, #4
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80090f0:	2064      	movs	r0, #100	; 0x64
 80090f2:	f001 fd4f 	bl	800ab94 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f001 fc1e 	bl	800a938 <USBH_LL_GetSpeed>
 80090fc:	4603      	mov	r3, r0
 80090fe:	461a      	mov	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2205      	movs	r2, #5
 800910a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800910c:	2100      	movs	r1, #0
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f001 fa29 	bl	800a566 <USBH_AllocPipe>
 8009114:	4603      	mov	r3, r0
 8009116:	461a      	mov	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800911c:	2180      	movs	r1, #128	; 0x80
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f001 fa21 	bl	800a566 <USBH_AllocPipe>
 8009124:	4603      	mov	r3, r0
 8009126:	461a      	mov	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	7919      	ldrb	r1, [r3, #4]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009140:	b292      	uxth	r2, r2
 8009142:	9202      	str	r2, [sp, #8]
 8009144:	2200      	movs	r2, #0
 8009146:	9201      	str	r2, [sp, #4]
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	4603      	mov	r3, r0
 800914c:	2280      	movs	r2, #128	; 0x80
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f001 f9da 	bl	800a508 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	7959      	ldrb	r1, [r3, #5]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009168:	b292      	uxth	r2, r2
 800916a:	9202      	str	r2, [sp, #8]
 800916c:	2200      	movs	r2, #0
 800916e:	9201      	str	r2, [sp, #4]
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	4603      	mov	r3, r0
 8009174:	2200      	movs	r2, #0
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f001 f9c6 	bl	800a508 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800917c:	e114      	b.n	80093a8 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f918 	bl	80093b4 <USBH_HandleEnum>
 8009184:	4603      	mov	r3, r0
 8009186:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009188:	7bbb      	ldrb	r3, [r7, #14]
 800918a:	b2db      	uxtb	r3, r3
 800918c:	2b00      	cmp	r3, #0
 800918e:	f040 80fe 	bne.w	800938e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d103      	bne.n	80091ac <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2208      	movs	r2, #8
 80091a8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80091aa:	e0f0      	b.n	800938e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2207      	movs	r2, #7
 80091b0:	701a      	strb	r2, [r3, #0]
      break;
 80091b2:	e0ec      	b.n	800938e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f000 80e9 	beq.w	8009392 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80091c6:	2101      	movs	r1, #1
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2208      	movs	r2, #8
 80091d0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80091d2:	e0de      	b.n	8009392 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80091da:	b29b      	uxth	r3, r3
 80091dc:	4619      	mov	r1, r3
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fc2c 	bl	8009a3c <USBH_SetCfg>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f040 80d5 	bne.w	8009396 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2209      	movs	r2, #9
 80091f0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80091f2:	e0d0      	b.n	8009396 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80091fa:	f003 0320 	and.w	r3, r3, #32
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d016      	beq.n	8009230 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009202:	2101      	movs	r1, #1
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fc3c 	bl	8009a82 <USBH_SetFeature>
 800920a:	4603      	mov	r3, r0
 800920c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800920e:	7bbb      	ldrb	r3, [r7, #14]
 8009210:	b2db      	uxtb	r3, r3
 8009212:	2b00      	cmp	r3, #0
 8009214:	d103      	bne.n	800921e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	220a      	movs	r2, #10
 800921a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800921c:	e0bd      	b.n	800939a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800921e:	7bbb      	ldrb	r3, [r7, #14]
 8009220:	b2db      	uxtb	r3, r3
 8009222:	2b03      	cmp	r3, #3
 8009224:	f040 80b9 	bne.w	800939a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	220a      	movs	r2, #10
 800922c:	701a      	strb	r2, [r3, #0]
      break;
 800922e:	e0b4      	b.n	800939a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	220a      	movs	r2, #10
 8009234:	701a      	strb	r2, [r3, #0]
      break;
 8009236:	e0b0      	b.n	800939a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800923e:	2b00      	cmp	r3, #0
 8009240:	f000 80ad 	beq.w	800939e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800924c:	2300      	movs	r3, #0
 800924e:	73fb      	strb	r3, [r7, #15]
 8009250:	e016      	b.n	8009280 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009252:	7bfa      	ldrb	r2, [r7, #15]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	32de      	adds	r2, #222	; 0xde
 8009258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800925c:	791a      	ldrb	r2, [r3, #4]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009264:	429a      	cmp	r2, r3
 8009266:	d108      	bne.n	800927a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009268:	7bfa      	ldrb	r2, [r7, #15]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	32de      	adds	r2, #222	; 0xde
 800926e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009278:	e005      	b.n	8009286 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800927a:	7bfb      	ldrb	r3, [r7, #15]
 800927c:	3301      	adds	r3, #1
 800927e:	73fb      	strb	r3, [r7, #15]
 8009280:	7bfb      	ldrb	r3, [r7, #15]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d0e5      	beq.n	8009252 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800928c:	2b00      	cmp	r3, #0
 800928e:	d016      	beq.n	80092be <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	4798      	blx	r3
 800929c:	4603      	mov	r3, r0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d109      	bne.n	80092b6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2206      	movs	r2, #6
 80092a6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092ae:	2103      	movs	r1, #3
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80092b4:	e073      	b.n	800939e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	220d      	movs	r2, #13
 80092ba:	701a      	strb	r2, [r3, #0]
      break;
 80092bc:	e06f      	b.n	800939e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	220d      	movs	r2, #13
 80092c2:	701a      	strb	r2, [r3, #0]
      break;
 80092c4:	e06b      	b.n	800939e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d017      	beq.n	8009300 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	4798      	blx	r3
 80092dc:	4603      	mov	r3, r0
 80092de:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80092e0:	7bbb      	ldrb	r3, [r7, #14]
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d103      	bne.n	80092f0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	220b      	movs	r2, #11
 80092ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80092ee:	e058      	b.n	80093a2 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80092f0:	7bbb      	ldrb	r3, [r7, #14]
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d154      	bne.n	80093a2 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	220d      	movs	r2, #13
 80092fc:	701a      	strb	r2, [r3, #0]
      break;
 80092fe:	e050      	b.n	80093a2 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	220d      	movs	r2, #13
 8009304:	701a      	strb	r2, [r3, #0]
      break;
 8009306:	e04c      	b.n	80093a2 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800930e:	2b00      	cmp	r3, #0
 8009310:	d049      	beq.n	80093a6 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009318:	695b      	ldr	r3, [r3, #20]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	4798      	blx	r3
      }
      break;
 800931e:	e042      	b.n	80093a6 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f7ff fd67 	bl	8008dfc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009334:	2b00      	cmp	r3, #0
 8009336:	d009      	beq.n	800934c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009352:	2b00      	cmp	r3, #0
 8009354:	d005      	beq.n	8009362 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800935c:	2105      	movs	r1, #5
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b01      	cmp	r3, #1
 800936c:	d107      	bne.n	800937e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7ff fe20 	bl	8008fbc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800937c:	e014      	b.n	80093a8 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f001 faa4 	bl	800a8cc <USBH_LL_Start>
      break;
 8009384:	e010      	b.n	80093a8 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8009386:	bf00      	nop
 8009388:	e00e      	b.n	80093a8 <USBH_Process+0x3cc>
      break;
 800938a:	bf00      	nop
 800938c:	e00c      	b.n	80093a8 <USBH_Process+0x3cc>
      break;
 800938e:	bf00      	nop
 8009390:	e00a      	b.n	80093a8 <USBH_Process+0x3cc>
    break;
 8009392:	bf00      	nop
 8009394:	e008      	b.n	80093a8 <USBH_Process+0x3cc>
      break;
 8009396:	bf00      	nop
 8009398:	e006      	b.n	80093a8 <USBH_Process+0x3cc>
      break;
 800939a:	bf00      	nop
 800939c:	e004      	b.n	80093a8 <USBH_Process+0x3cc>
      break;
 800939e:	bf00      	nop
 80093a0:	e002      	b.n	80093a8 <USBH_Process+0x3cc>
      break;
 80093a2:	bf00      	nop
 80093a4:	e000      	b.n	80093a8 <USBH_Process+0x3cc>
      break;
 80093a6:	bf00      	nop
  }
  return USBH_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop

080093b4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b088      	sub	sp, #32
 80093b8:	af04      	add	r7, sp, #16
 80093ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80093bc:	2301      	movs	r3, #1
 80093be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80093c0:	2301      	movs	r3, #1
 80093c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	785b      	ldrb	r3, [r3, #1]
 80093c8:	2b07      	cmp	r3, #7
 80093ca:	f200 81c1 	bhi.w	8009750 <USBH_HandleEnum+0x39c>
 80093ce:	a201      	add	r2, pc, #4	; (adr r2, 80093d4 <USBH_HandleEnum+0x20>)
 80093d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d4:	080093f5 	.word	0x080093f5
 80093d8:	080094b3 	.word	0x080094b3
 80093dc:	0800951d 	.word	0x0800951d
 80093e0:	080095ab 	.word	0x080095ab
 80093e4:	08009615 	.word	0x08009615
 80093e8:	08009685 	.word	0x08009685
 80093ec:	080096cb 	.word	0x080096cb
 80093f0:	08009711 	.word	0x08009711
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80093f4:	2108      	movs	r1, #8
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 fa50 	bl	800989c <USBH_Get_DevDesc>
 80093fc:	4603      	mov	r3, r0
 80093fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009400:	7bbb      	ldrb	r3, [r7, #14]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d130      	bne.n	8009468 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	7919      	ldrb	r1, [r3, #4]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800942a:	b292      	uxth	r2, r2
 800942c:	9202      	str	r2, [sp, #8]
 800942e:	2200      	movs	r2, #0
 8009430:	9201      	str	r2, [sp, #4]
 8009432:	9300      	str	r3, [sp, #0]
 8009434:	4603      	mov	r3, r0
 8009436:	2280      	movs	r2, #128	; 0x80
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f001 f865 	bl	800a508 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	7959      	ldrb	r1, [r3, #5]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009452:	b292      	uxth	r2, r2
 8009454:	9202      	str	r2, [sp, #8]
 8009456:	2200      	movs	r2, #0
 8009458:	9201      	str	r2, [sp, #4]
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	4603      	mov	r3, r0
 800945e:	2200      	movs	r2, #0
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f001 f851 	bl	800a508 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009466:	e175      	b.n	8009754 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009468:	7bbb      	ldrb	r3, [r7, #14]
 800946a:	2b03      	cmp	r3, #3
 800946c:	f040 8172 	bne.w	8009754 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009476:	3301      	adds	r3, #1
 8009478:	b2da      	uxtb	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009486:	2b03      	cmp	r3, #3
 8009488:	d903      	bls.n	8009492 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	220d      	movs	r2, #13
 800948e:	701a      	strb	r2, [r3, #0]
      break;
 8009490:	e160      	b.n	8009754 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	795b      	ldrb	r3, [r3, #5]
 8009496:	4619      	mov	r1, r3
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f001 f885 	bl	800a5a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	791b      	ldrb	r3, [r3, #4]
 80094a2:	4619      	mov	r1, r3
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f001 f87f 	bl	800a5a8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	701a      	strb	r2, [r3, #0]
      break;
 80094b0:	e150      	b.n	8009754 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80094b2:	2112      	movs	r1, #18
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 f9f1 	bl	800989c <USBH_Get_DevDesc>
 80094ba:	4603      	mov	r3, r0
 80094bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80094be:	7bbb      	ldrb	r3, [r7, #14]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d103      	bne.n	80094cc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2202      	movs	r2, #2
 80094c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80094ca:	e145      	b.n	8009758 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094cc:	7bbb      	ldrb	r3, [r7, #14]
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	f040 8142 	bne.w	8009758 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80094da:	3301      	adds	r3, #1
 80094dc:	b2da      	uxtb	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80094ea:	2b03      	cmp	r3, #3
 80094ec:	d903      	bls.n	80094f6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	220d      	movs	r2, #13
 80094f2:	701a      	strb	r2, [r3, #0]
      break;
 80094f4:	e130      	b.n	8009758 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	795b      	ldrb	r3, [r3, #5]
 80094fa:	4619      	mov	r1, r3
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f001 f853 	bl	800a5a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	791b      	ldrb	r3, [r3, #4]
 8009506:	4619      	mov	r1, r3
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f001 f84d 	bl	800a5a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	701a      	strb	r2, [r3, #0]
      break;
 800951a:	e11d      	b.n	8009758 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800951c:	2101      	movs	r1, #1
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 fa68 	bl	80099f4 <USBH_SetAddress>
 8009524:	4603      	mov	r3, r0
 8009526:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009528:	7bbb      	ldrb	r3, [r7, #14]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d132      	bne.n	8009594 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800952e:	2002      	movs	r0, #2
 8009530:	f001 fb30 	bl	800ab94 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2203      	movs	r2, #3
 8009540:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	7919      	ldrb	r1, [r3, #4]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009556:	b292      	uxth	r2, r2
 8009558:	9202      	str	r2, [sp, #8]
 800955a:	2200      	movs	r2, #0
 800955c:	9201      	str	r2, [sp, #4]
 800955e:	9300      	str	r3, [sp, #0]
 8009560:	4603      	mov	r3, r0
 8009562:	2280      	movs	r2, #128	; 0x80
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 ffcf 	bl	800a508 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	7959      	ldrb	r1, [r3, #5]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800957e:	b292      	uxth	r2, r2
 8009580:	9202      	str	r2, [sp, #8]
 8009582:	2200      	movs	r2, #0
 8009584:	9201      	str	r2, [sp, #4]
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	4603      	mov	r3, r0
 800958a:	2200      	movs	r2, #0
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 ffbb 	bl	800a508 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009592:	e0e3      	b.n	800975c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009594:	7bbb      	ldrb	r3, [r7, #14]
 8009596:	2b03      	cmp	r3, #3
 8009598:	f040 80e0 	bne.w	800975c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	220d      	movs	r2, #13
 80095a0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	705a      	strb	r2, [r3, #1]
      break;
 80095a8:	e0d8      	b.n	800975c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80095aa:	2109      	movs	r1, #9
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 f99d 	bl	80098ec <USBH_Get_CfgDesc>
 80095b2:	4603      	mov	r3, r0
 80095b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80095b6:	7bbb      	ldrb	r3, [r7, #14]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d103      	bne.n	80095c4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2204      	movs	r2, #4
 80095c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80095c2:	e0cd      	b.n	8009760 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095c4:	7bbb      	ldrb	r3, [r7, #14]
 80095c6:	2b03      	cmp	r3, #3
 80095c8:	f040 80ca 	bne.w	8009760 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80095d2:	3301      	adds	r3, #1
 80095d4:	b2da      	uxtb	r2, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80095e2:	2b03      	cmp	r3, #3
 80095e4:	d903      	bls.n	80095ee <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	220d      	movs	r2, #13
 80095ea:	701a      	strb	r2, [r3, #0]
      break;
 80095ec:	e0b8      	b.n	8009760 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	795b      	ldrb	r3, [r3, #5]
 80095f2:	4619      	mov	r1, r3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 ffd7 	bl	800a5a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	791b      	ldrb	r3, [r3, #4]
 80095fe:	4619      	mov	r1, r3
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 ffd1 	bl	800a5a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	701a      	strb	r2, [r3, #0]
      break;
 8009612:	e0a5      	b.n	8009760 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800961a:	4619      	mov	r1, r3
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 f965 	bl	80098ec <USBH_Get_CfgDesc>
 8009622:	4603      	mov	r3, r0
 8009624:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009626:	7bbb      	ldrb	r3, [r7, #14]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d103      	bne.n	8009634 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2205      	movs	r2, #5
 8009630:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009632:	e097      	b.n	8009764 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009634:	7bbb      	ldrb	r3, [r7, #14]
 8009636:	2b03      	cmp	r3, #3
 8009638:	f040 8094 	bne.w	8009764 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009642:	3301      	adds	r3, #1
 8009644:	b2da      	uxtb	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009652:	2b03      	cmp	r3, #3
 8009654:	d903      	bls.n	800965e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	220d      	movs	r2, #13
 800965a:	701a      	strb	r2, [r3, #0]
      break;
 800965c:	e082      	b.n	8009764 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	795b      	ldrb	r3, [r3, #5]
 8009662:	4619      	mov	r1, r3
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 ff9f 	bl	800a5a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	791b      	ldrb	r3, [r3, #4]
 800966e:	4619      	mov	r1, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 ff99 	bl	800a5a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	701a      	strb	r2, [r3, #0]
      break;
 8009682:	e06f      	b.n	8009764 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800968a:	2b00      	cmp	r3, #0
 800968c:	d019      	beq.n	80096c2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800969a:	23ff      	movs	r3, #255	; 0xff
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 f949 	bl	8009934 <USBH_Get_StringDesc>
 80096a2:	4603      	mov	r3, r0
 80096a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80096a6:	7bbb      	ldrb	r3, [r7, #14]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d103      	bne.n	80096b4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2206      	movs	r2, #6
 80096b0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80096b2:	e059      	b.n	8009768 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096b4:	7bbb      	ldrb	r3, [r7, #14]
 80096b6:	2b03      	cmp	r3, #3
 80096b8:	d156      	bne.n	8009768 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2206      	movs	r2, #6
 80096be:	705a      	strb	r2, [r3, #1]
      break;
 80096c0:	e052      	b.n	8009768 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2206      	movs	r2, #6
 80096c6:	705a      	strb	r2, [r3, #1]
      break;
 80096c8:	e04e      	b.n	8009768 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d019      	beq.n	8009708 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80096e0:	23ff      	movs	r3, #255	; 0xff
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 f926 	bl	8009934 <USBH_Get_StringDesc>
 80096e8:	4603      	mov	r3, r0
 80096ea:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80096ec:	7bbb      	ldrb	r3, [r7, #14]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d103      	bne.n	80096fa <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2207      	movs	r2, #7
 80096f6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80096f8:	e038      	b.n	800976c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096fa:	7bbb      	ldrb	r3, [r7, #14]
 80096fc:	2b03      	cmp	r3, #3
 80096fe:	d135      	bne.n	800976c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2207      	movs	r2, #7
 8009704:	705a      	strb	r2, [r3, #1]
      break;
 8009706:	e031      	b.n	800976c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2207      	movs	r2, #7
 800970c:	705a      	strb	r2, [r3, #1]
      break;
 800970e:	e02d      	b.n	800976c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009716:	2b00      	cmp	r3, #0
 8009718:	d017      	beq.n	800974a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009726:	23ff      	movs	r3, #255	; 0xff
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f903 	bl	8009934 <USBH_Get_StringDesc>
 800972e:	4603      	mov	r3, r0
 8009730:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009732:	7bbb      	ldrb	r3, [r7, #14]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d102      	bne.n	800973e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009738:	2300      	movs	r3, #0
 800973a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800973c:	e018      	b.n	8009770 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800973e:	7bbb      	ldrb	r3, [r7, #14]
 8009740:	2b03      	cmp	r3, #3
 8009742:	d115      	bne.n	8009770 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009744:	2300      	movs	r3, #0
 8009746:	73fb      	strb	r3, [r7, #15]
      break;
 8009748:	e012      	b.n	8009770 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	73fb      	strb	r3, [r7, #15]
      break;
 800974e:	e00f      	b.n	8009770 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009750:	bf00      	nop
 8009752:	e00e      	b.n	8009772 <USBH_HandleEnum+0x3be>
      break;
 8009754:	bf00      	nop
 8009756:	e00c      	b.n	8009772 <USBH_HandleEnum+0x3be>
      break;
 8009758:	bf00      	nop
 800975a:	e00a      	b.n	8009772 <USBH_HandleEnum+0x3be>
      break;
 800975c:	bf00      	nop
 800975e:	e008      	b.n	8009772 <USBH_HandleEnum+0x3be>
      break;
 8009760:	bf00      	nop
 8009762:	e006      	b.n	8009772 <USBH_HandleEnum+0x3be>
      break;
 8009764:	bf00      	nop
 8009766:	e004      	b.n	8009772 <USBH_HandleEnum+0x3be>
      break;
 8009768:	bf00      	nop
 800976a:	e002      	b.n	8009772 <USBH_HandleEnum+0x3be>
      break;
 800976c:	bf00      	nop
 800976e:	e000      	b.n	8009772 <USBH_HandleEnum+0x3be>
      break;
 8009770:	bf00      	nop
  }
  return Status;
 8009772:	7bfb      	ldrb	r3, [r7, #15]
}
 8009774:	4618      	mov	r0, r3
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	683a      	ldr	r2, [r7, #0]
 800978a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800978e:	bf00      	nop
 8009790:	370c      	adds	r7, #12
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr

0800979a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b082      	sub	sp, #8
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80097a8:	1c5a      	adds	r2, r3, #1
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 f804 	bl	80097be <USBH_HandleSof>
}
 80097b6:	bf00      	nop
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b082      	sub	sp, #8
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	2b0b      	cmp	r3, #11
 80097ce:	d10a      	bne.n	80097e6 <USBH_HandleSof+0x28>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d005      	beq.n	80097e6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097e0:	699b      	ldr	r3, [r3, #24]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	4798      	blx	r3
  }
}
 80097e6:	bf00      	nop
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b083      	sub	sp, #12
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80097fe:	bf00      	nop
}
 8009800:	370c      	adds	r7, #12
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr

0800980a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800980a:	b480      	push	{r7}
 800980c:	b083      	sub	sp, #12
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800981a:	bf00      	nop
}
 800981c:	370c      	adds	r7, #12
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr

08009826 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009826:	b480      	push	{r7}
 8009828:	b083      	sub	sp, #12
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f001 f844 	bl	800a902 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	791b      	ldrb	r3, [r3, #4]
 800987e:	4619      	mov	r1, r3
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 fe91 	bl	800a5a8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	795b      	ldrb	r3, [r3, #5]
 800988a:	4619      	mov	r1, r3
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 fe8b 	bl	800a5a8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3708      	adds	r7, #8
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b086      	sub	sp, #24
 80098a0:	af02      	add	r7, sp, #8
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	460b      	mov	r3, r1
 80098a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80098ae:	78fb      	ldrb	r3, [r7, #3]
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	4613      	mov	r3, r2
 80098b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098ba:	2100      	movs	r1, #0
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 f864 	bl	800998a <USBH_GetDescriptor>
 80098c2:	4603      	mov	r3, r0
 80098c4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80098c6:	7bfb      	ldrb	r3, [r7, #15]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d10a      	bne.n	80098e2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f203 3026 	addw	r0, r3, #806	; 0x326
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80098d8:	78fa      	ldrb	r2, [r7, #3]
 80098da:	b292      	uxth	r2, r2
 80098dc:	4619      	mov	r1, r3
 80098de:	f000 f918 	bl	8009b12 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80098e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b086      	sub	sp, #24
 80098f0:	af02      	add	r7, sp, #8
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	460b      	mov	r3, r1
 80098f6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	331c      	adds	r3, #28
 80098fc:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80098fe:	887b      	ldrh	r3, [r7, #2]
 8009900:	9300      	str	r3, [sp, #0]
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009908:	2100      	movs	r1, #0
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 f83d 	bl	800998a <USBH_GetDescriptor>
 8009910:	4603      	mov	r3, r0
 8009912:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009914:	7bfb      	ldrb	r3, [r7, #15]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d107      	bne.n	800992a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800991a:	887b      	ldrh	r3, [r7, #2]
 800991c:	461a      	mov	r2, r3
 800991e:	68b9      	ldr	r1, [r7, #8]
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f987 	bl	8009c34 <USBH_ParseCfgDesc>
 8009926:	4603      	mov	r3, r0
 8009928:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800992a:	7bfb      	ldrb	r3, [r7, #15]
}
 800992c:	4618      	mov	r0, r3
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b088      	sub	sp, #32
 8009938:	af02      	add	r7, sp, #8
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	607a      	str	r2, [r7, #4]
 800993e:	461a      	mov	r2, r3
 8009940:	460b      	mov	r3, r1
 8009942:	72fb      	strb	r3, [r7, #11]
 8009944:	4613      	mov	r3, r2
 8009946:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009948:	7afb      	ldrb	r3, [r7, #11]
 800994a:	b29b      	uxth	r3, r3
 800994c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009950:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009958:	893b      	ldrh	r3, [r7, #8]
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	460b      	mov	r3, r1
 800995e:	2100      	movs	r1, #0
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f000 f812 	bl	800998a <USBH_GetDescriptor>
 8009966:	4603      	mov	r3, r0
 8009968:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800996a:	7dfb      	ldrb	r3, [r7, #23]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d107      	bne.n	8009980 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009976:	893a      	ldrh	r2, [r7, #8]
 8009978:	6879      	ldr	r1, [r7, #4]
 800997a:	4618      	mov	r0, r3
 800997c:	f000 fb24 	bl	8009fc8 <USBH_ParseStringDesc>
  }

  return status;
 8009980:	7dfb      	ldrb	r3, [r7, #23]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3718      	adds	r7, #24
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b084      	sub	sp, #16
 800998e:	af00      	add	r7, sp, #0
 8009990:	60f8      	str	r0, [r7, #12]
 8009992:	607b      	str	r3, [r7, #4]
 8009994:	460b      	mov	r3, r1
 8009996:	72fb      	strb	r3, [r7, #11]
 8009998:	4613      	mov	r3, r2
 800999a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	789b      	ldrb	r3, [r3, #2]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d11c      	bne.n	80099de <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80099a4:	7afb      	ldrb	r3, [r7, #11]
 80099a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80099aa:	b2da      	uxtb	r2, r3
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2206      	movs	r2, #6
 80099b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	893a      	ldrh	r2, [r7, #8]
 80099ba:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80099bc:	893b      	ldrh	r3, [r7, #8]
 80099be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80099c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099c6:	d104      	bne.n	80099d2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f240 4209 	movw	r2, #1033	; 0x409
 80099ce:	829a      	strh	r2, [r3, #20]
 80099d0:	e002      	b.n	80099d8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2200      	movs	r2, #0
 80099d6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	8b3a      	ldrh	r2, [r7, #24]
 80099dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80099de:	8b3b      	ldrh	r3, [r7, #24]
 80099e0:	461a      	mov	r2, r3
 80099e2:	6879      	ldr	r1, [r7, #4]
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f000 fb3d 	bl	800a064 <USBH_CtlReq>
 80099ea:	4603      	mov	r3, r0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	460b      	mov	r3, r1
 80099fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	789b      	ldrb	r3, [r3, #2]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d10f      	bne.n	8009a28 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2205      	movs	r2, #5
 8009a12:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009a14:	78fb      	ldrb	r3, [r7, #3]
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009a28:	2200      	movs	r2, #0
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fb19 	bl	800a064 <USBH_CtlReq>
 8009a32:	4603      	mov	r3, r0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	460b      	mov	r3, r1
 8009a46:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	789b      	ldrb	r3, [r3, #2]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d10e      	bne.n	8009a6e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2209      	movs	r2, #9
 8009a5a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	887a      	ldrh	r2, [r7, #2]
 8009a60:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009a6e:	2200      	movs	r2, #0
 8009a70:	2100      	movs	r1, #0
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 faf6 	bl	800a064 <USBH_CtlReq>
 8009a78:	4603      	mov	r3, r0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3708      	adds	r7, #8
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b082      	sub	sp, #8
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	789b      	ldrb	r3, [r3, #2]
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d10f      	bne.n	8009ab6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2203      	movs	r2, #3
 8009aa0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009aa2:	78fb      	ldrb	r3, [r7, #3]
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	2100      	movs	r1, #0
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 fad2 	bl	800a064 <USBH_CtlReq>
 8009ac0:	4603      	mov	r3, r0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3708      	adds	r7, #8
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b082      	sub	sp, #8
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	789b      	ldrb	r3, [r3, #2]
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d10f      	bne.n	8009afe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2202      	movs	r2, #2
 8009ae2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009af0:	78fb      	ldrb	r3, [r7, #3]
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8009afe:	2200      	movs	r2, #0
 8009b00:	2100      	movs	r1, #0
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 faae 	bl	800a064 <USBH_CtlReq>
 8009b08:	4603      	mov	r3, r0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009b12:	b480      	push	{r7}
 8009b14:	b085      	sub	sp, #20
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	60f8      	str	r0, [r7, #12]
 8009b1a:	60b9      	str	r1, [r7, #8]
 8009b1c:	4613      	mov	r3, r2
 8009b1e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	781a      	ldrb	r2, [r3, #0]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	785a      	ldrb	r2, [r3, #1]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	3302      	adds	r3, #2
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	b29a      	uxth	r2, r3
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	3303      	adds	r3, #3
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	021b      	lsls	r3, r3, #8
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	4313      	orrs	r3, r2
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	791a      	ldrb	r2, [r3, #4]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	795a      	ldrb	r2, [r3, #5]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	799a      	ldrb	r2, [r3, #6]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	79da      	ldrb	r2, [r3, #7]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	79db      	ldrb	r3, [r3, #7]
 8009b70:	2b20      	cmp	r3, #32
 8009b72:	dc11      	bgt.n	8009b98 <USBH_ParseDevDesc+0x86>
 8009b74:	2b08      	cmp	r3, #8
 8009b76:	db16      	blt.n	8009ba6 <USBH_ParseDevDesc+0x94>
 8009b78:	3b08      	subs	r3, #8
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b80:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8009b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	bf14      	ite	ne
 8009b8c:	2301      	movne	r3, #1
 8009b8e:	2300      	moveq	r3, #0
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d102      	bne.n	8009b9c <USBH_ParseDevDesc+0x8a>
 8009b96:	e006      	b.n	8009ba6 <USBH_ParseDevDesc+0x94>
 8009b98:	2b40      	cmp	r3, #64	; 0x40
 8009b9a:	d104      	bne.n	8009ba6 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	79da      	ldrb	r2, [r3, #7]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	71da      	strb	r2, [r3, #7]
      break;
 8009ba4:	e003      	b.n	8009bae <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2240      	movs	r2, #64	; 0x40
 8009baa:	71da      	strb	r2, [r3, #7]
      break;
 8009bac:	bf00      	nop
  }

  if (length > 8U)
 8009bae:	88fb      	ldrh	r3, [r7, #6]
 8009bb0:	2b08      	cmp	r3, #8
 8009bb2:	d939      	bls.n	8009c28 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	3308      	adds	r3, #8
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	3309      	adds	r3, #9
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	021b      	lsls	r3, r3, #8
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	b29a      	uxth	r2, r3
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	330a      	adds	r3, #10
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	330b      	adds	r3, #11
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	021b      	lsls	r3, r3, #8
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	4313      	orrs	r3, r2
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	330c      	adds	r3, #12
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	b29a      	uxth	r2, r3
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	330d      	adds	r3, #13
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	021b      	lsls	r3, r3, #8
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	4313      	orrs	r3, r2
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	7b9a      	ldrb	r2, [r3, #14]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	7bda      	ldrb	r2, [r3, #15]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	7c1a      	ldrb	r2, [r3, #16]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	7c5a      	ldrb	r2, [r3, #17]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	745a      	strb	r2, [r3, #17]
  }
}
 8009c28:	bf00      	nop
 8009c2a:	3714      	adds	r7, #20
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b08c      	sub	sp, #48	; 0x30
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009c48:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009c54:	2300      	movs	r3, #0
 8009c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	781a      	ldrb	r2, [r3, #0]
 8009c68:	6a3b      	ldr	r3, [r7, #32]
 8009c6a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	785a      	ldrb	r2, [r3, #1]
 8009c70:	6a3b      	ldr	r3, [r7, #32]
 8009c72:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	3302      	adds	r3, #2
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	3303      	adds	r3, #3
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	021b      	lsls	r3, r3, #8
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c90:	bf28      	it	cs
 8009c92:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8009c96:	b29a      	uxth	r2, r3
 8009c98:	6a3b      	ldr	r3, [r7, #32]
 8009c9a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	791a      	ldrb	r2, [r3, #4]
 8009ca0:	6a3b      	ldr	r3, [r7, #32]
 8009ca2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	795a      	ldrb	r2, [r3, #5]
 8009ca8:	6a3b      	ldr	r3, [r7, #32]
 8009caa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	799a      	ldrb	r2, [r3, #6]
 8009cb0:	6a3b      	ldr	r3, [r7, #32]
 8009cb2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	79da      	ldrb	r2, [r3, #7]
 8009cb8:	6a3b      	ldr	r3, [r7, #32]
 8009cba:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	7a1a      	ldrb	r2, [r3, #8]
 8009cc0:	6a3b      	ldr	r3, [r7, #32]
 8009cc2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8009cc4:	6a3b      	ldr	r3, [r7, #32]
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	2b09      	cmp	r3, #9
 8009cca:	d002      	beq.n	8009cd2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	2209      	movs	r2, #9
 8009cd0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009cd2:	88fb      	ldrh	r3, [r7, #6]
 8009cd4:	2b09      	cmp	r3, #9
 8009cd6:	f240 809d 	bls.w	8009e14 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8009cda:	2309      	movs	r3, #9
 8009cdc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009ce2:	e081      	b.n	8009de8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009ce4:	f107 0316 	add.w	r3, r7, #22
 8009ce8:	4619      	mov	r1, r3
 8009cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cec:	f000 f99f 	bl	800a02e <USBH_GetNextDesc>
 8009cf0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf4:	785b      	ldrb	r3, [r3, #1]
 8009cf6:	2b04      	cmp	r3, #4
 8009cf8:	d176      	bne.n	8009de8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	2b09      	cmp	r3, #9
 8009d00:	d002      	beq.n	8009d08 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d04:	2209      	movs	r2, #9
 8009d06:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d0c:	221a      	movs	r2, #26
 8009d0e:	fb02 f303 	mul.w	r3, r2, r3
 8009d12:	3308      	adds	r3, #8
 8009d14:	6a3a      	ldr	r2, [r7, #32]
 8009d16:	4413      	add	r3, r2
 8009d18:	3302      	adds	r3, #2
 8009d1a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d1e:	69f8      	ldr	r0, [r7, #28]
 8009d20:	f000 f87e 	bl	8009e20 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009d24:	2300      	movs	r3, #0
 8009d26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009d2e:	e043      	b.n	8009db8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009d30:	f107 0316 	add.w	r3, r7, #22
 8009d34:	4619      	mov	r1, r3
 8009d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d38:	f000 f979 	bl	800a02e <USBH_GetNextDesc>
 8009d3c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d40:	785b      	ldrb	r3, [r3, #1]
 8009d42:	2b05      	cmp	r3, #5
 8009d44:	d138      	bne.n	8009db8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	795b      	ldrb	r3, [r3, #5]
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d10f      	bne.n	8009d6e <USBH_ParseCfgDesc+0x13a>
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	799b      	ldrb	r3, [r3, #6]
 8009d52:	2b02      	cmp	r3, #2
 8009d54:	d10b      	bne.n	8009d6e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	79db      	ldrb	r3, [r3, #7]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d10f      	bne.n	8009d7e <USBH_ParseCfgDesc+0x14a>
 8009d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	2b09      	cmp	r3, #9
 8009d64:	d00b      	beq.n	8009d7e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8009d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d68:	2209      	movs	r2, #9
 8009d6a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009d6c:	e007      	b.n	8009d7e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8009d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	2b07      	cmp	r3, #7
 8009d74:	d004      	beq.n	8009d80 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d78:	2207      	movs	r2, #7
 8009d7a:	701a      	strb	r2, [r3, #0]
 8009d7c:	e000      	b.n	8009d80 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009d7e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d84:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009d88:	3201      	adds	r2, #1
 8009d8a:	00d2      	lsls	r2, r2, #3
 8009d8c:	211a      	movs	r1, #26
 8009d8e:	fb01 f303 	mul.w	r3, r1, r3
 8009d92:	4413      	add	r3, r2
 8009d94:	3308      	adds	r3, #8
 8009d96:	6a3a      	ldr	r2, [r7, #32]
 8009d98:	4413      	add	r3, r2
 8009d9a:	3304      	adds	r3, #4
 8009d9c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009da0:	69b9      	ldr	r1, [r7, #24]
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f000 f86b 	bl	8009e7e <USBH_ParseEPDesc>
 8009da8:	4603      	mov	r3, r0
 8009daa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8009dae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009db2:	3301      	adds	r3, #1
 8009db4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	791b      	ldrb	r3, [r3, #4]
 8009dbc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d204      	bcs.n	8009dce <USBH_ParseCfgDesc+0x19a>
 8009dc4:	6a3b      	ldr	r3, [r7, #32]
 8009dc6:	885a      	ldrh	r2, [r3, #2]
 8009dc8:	8afb      	ldrh	r3, [r7, #22]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d8b0      	bhi.n	8009d30 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009dce:	69fb      	ldr	r3, [r7, #28]
 8009dd0:	791b      	ldrb	r3, [r3, #4]
 8009dd2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d201      	bcs.n	8009dde <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	e01c      	b.n	8009e18 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8009dde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009de2:	3301      	adds	r3, #1
 8009de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d805      	bhi.n	8009dfc <USBH_ParseCfgDesc+0x1c8>
 8009df0:	6a3b      	ldr	r3, [r7, #32]
 8009df2:	885a      	ldrh	r2, [r3, #2]
 8009df4:	8afb      	ldrh	r3, [r7, #22]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	f63f af74 	bhi.w	8009ce4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
 8009dfe:	791b      	ldrb	r3, [r3, #4]
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	bf28      	it	cs
 8009e04:	2302      	movcs	r3, #2
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d201      	bcs.n	8009e14 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8009e10:	2303      	movs	r3, #3
 8009e12:	e001      	b.n	8009e18 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8009e14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3730      	adds	r7, #48	; 0x30
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	781a      	ldrb	r2, [r3, #0]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	785a      	ldrb	r2, [r3, #1]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	789a      	ldrb	r2, [r3, #2]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	78da      	ldrb	r2, [r3, #3]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	791a      	ldrb	r2, [r3, #4]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	795a      	ldrb	r2, [r3, #5]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	799a      	ldrb	r2, [r3, #6]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	79da      	ldrb	r2, [r3, #7]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	7a1a      	ldrb	r2, [r3, #8]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	721a      	strb	r2, [r3, #8]
}
 8009e72:	bf00      	nop
 8009e74:	370c      	adds	r7, #12
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8009e7e:	b480      	push	{r7}
 8009e80:	b087      	sub	sp, #28
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	60f8      	str	r0, [r7, #12]
 8009e86:	60b9      	str	r1, [r7, #8]
 8009e88:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	781a      	ldrb	r2, [r3, #0]
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	785a      	ldrb	r2, [r3, #1]
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	789a      	ldrb	r2, [r3, #2]
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	78da      	ldrb	r2, [r3, #3]
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	3304      	adds	r3, #4
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	3305      	adds	r3, #5
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	021b      	lsls	r3, r3, #8
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	799a      	ldrb	r2, [r3, #6]
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	889b      	ldrh	r3, [r3, #4]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d102      	bne.n	8009ee0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8009eda:	2303      	movs	r3, #3
 8009edc:	75fb      	strb	r3, [r7, #23]
 8009ede:	e033      	b.n	8009f48 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	889b      	ldrh	r3, [r3, #4]
 8009ee4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009ee8:	f023 0307 	bic.w	r3, r3, #7
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	889b      	ldrh	r3, [r3, #4]
 8009ef6:	b21a      	sxth	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	3304      	adds	r3, #4
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	b299      	uxth	r1, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	3305      	adds	r3, #5
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	021b      	lsls	r3, r3, #8
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	430b      	orrs	r3, r1
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d110      	bne.n	8009f3a <USBH_ParseEPDesc+0xbc>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	3304      	adds	r3, #4
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	b299      	uxth	r1, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	3305      	adds	r3, #5
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	021b      	lsls	r3, r3, #8
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	430b      	orrs	r3, r1
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	b21b      	sxth	r3, r3
 8009f32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009f36:	b21b      	sxth	r3, r3
 8009f38:	e001      	b.n	8009f3e <USBH_ParseEPDesc+0xc0>
 8009f3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	b21b      	sxth	r3, r3
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d116      	bne.n	8009f80 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	78db      	ldrb	r3, [r3, #3]
 8009f56:	f003 0303 	and.w	r3, r3, #3
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d005      	beq.n	8009f6a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	78db      	ldrb	r3, [r3, #3]
 8009f62:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009f66:	2b03      	cmp	r3, #3
 8009f68:	d127      	bne.n	8009fba <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	799b      	ldrb	r3, [r3, #6]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d003      	beq.n	8009f7a <USBH_ParseEPDesc+0xfc>
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	799b      	ldrb	r3, [r3, #6]
 8009f76:	2b10      	cmp	r3, #16
 8009f78:	d91f      	bls.n	8009fba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009f7a:	2303      	movs	r3, #3
 8009f7c:	75fb      	strb	r3, [r7, #23]
 8009f7e:	e01c      	b.n	8009fba <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	78db      	ldrb	r3, [r3, #3]
 8009f84:	f003 0303 	and.w	r3, r3, #3
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d10a      	bne.n	8009fa2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	799b      	ldrb	r3, [r3, #6]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d003      	beq.n	8009f9c <USBH_ParseEPDesc+0x11e>
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	799b      	ldrb	r3, [r3, #6]
 8009f98:	2b10      	cmp	r3, #16
 8009f9a:	d90e      	bls.n	8009fba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	75fb      	strb	r3, [r7, #23]
 8009fa0:	e00b      	b.n	8009fba <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	78db      	ldrb	r3, [r3, #3]
 8009fa6:	f003 0303 	and.w	r3, r3, #3
 8009faa:	2b03      	cmp	r3, #3
 8009fac:	d105      	bne.n	8009fba <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	799b      	ldrb	r3, [r3, #6]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d101      	bne.n	8009fba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8009fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	371c      	adds	r7, #28
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b087      	sub	sp, #28
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	4613      	mov	r3, r2
 8009fd4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	2b03      	cmp	r3, #3
 8009fde:	d120      	bne.n	800a022 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	1e9a      	subs	r2, r3, #2
 8009fe6:	88fb      	ldrh	r3, [r7, #6]
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	bf28      	it	cs
 8009fec:	4613      	movcs	r3, r2
 8009fee:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	3302      	adds	r3, #2
 8009ff4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	82fb      	strh	r3, [r7, #22]
 8009ffa:	e00b      	b.n	800a014 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009ffc:	8afb      	ldrh	r3, [r7, #22]
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	4413      	add	r3, r2
 800a002:	781a      	ldrb	r2, [r3, #0]
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	3301      	adds	r3, #1
 800a00c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a00e:	8afb      	ldrh	r3, [r7, #22]
 800a010:	3302      	adds	r3, #2
 800a012:	82fb      	strh	r3, [r7, #22]
 800a014:	8afa      	ldrh	r2, [r7, #22]
 800a016:	8abb      	ldrh	r3, [r7, #20]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d3ef      	bcc.n	8009ffc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	2200      	movs	r2, #0
 800a020:	701a      	strb	r2, [r3, #0]
  }
}
 800a022:	bf00      	nop
 800a024:	371c      	adds	r7, #28
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr

0800a02e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a02e:	b480      	push	{r7}
 800a030:	b085      	sub	sp, #20
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	881a      	ldrh	r2, [r3, #0]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	b29b      	uxth	r3, r3
 800a042:	4413      	add	r3, r2
 800a044:	b29a      	uxth	r2, r3
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4413      	add	r3, r2
 800a054:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a056:	68fb      	ldr	r3, [r7, #12]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3714      	adds	r7, #20
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b086      	sub	sp, #24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	4613      	mov	r3, r2
 800a070:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a072:	2301      	movs	r3, #1
 800a074:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	789b      	ldrb	r3, [r3, #2]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d002      	beq.n	800a084 <USBH_CtlReq+0x20>
 800a07e:	2b02      	cmp	r3, #2
 800a080:	d00f      	beq.n	800a0a2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a082:	e027      	b.n	800a0d4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	68ba      	ldr	r2, [r7, #8]
 800a088:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	88fa      	ldrh	r2, [r7, #6]
 800a08e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2201      	movs	r2, #1
 800a094:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2202      	movs	r2, #2
 800a09a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a09c:	2301      	movs	r3, #1
 800a09e:	75fb      	strb	r3, [r7, #23]
      break;
 800a0a0:	e018      	b.n	800a0d4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f000 f81c 	bl	800a0e0 <USBH_HandleControl>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a0ac:	7dfb      	ldrb	r3, [r7, #23]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d002      	beq.n	800a0b8 <USBH_CtlReq+0x54>
 800a0b2:	7dfb      	ldrb	r3, [r7, #23]
 800a0b4:	2b03      	cmp	r3, #3
 800a0b6:	d106      	bne.n	800a0c6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	761a      	strb	r2, [r3, #24]
      break;
 800a0c4:	e005      	b.n	800a0d2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a0c6:	7dfb      	ldrb	r3, [r7, #23]
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d102      	bne.n	800a0d2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	709a      	strb	r2, [r3, #2]
      break;
 800a0d2:	bf00      	nop
  }
  return status;
 800a0d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3718      	adds	r7, #24
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
	...

0800a0e0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b086      	sub	sp, #24
 800a0e4:	af02      	add	r7, sp, #8
 800a0e6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	7e1b      	ldrb	r3, [r3, #24]
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	2b0a      	cmp	r3, #10
 800a0f8:	f200 8156 	bhi.w	800a3a8 <USBH_HandleControl+0x2c8>
 800a0fc:	a201      	add	r2, pc, #4	; (adr r2, 800a104 <USBH_HandleControl+0x24>)
 800a0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a102:	bf00      	nop
 800a104:	0800a131 	.word	0x0800a131
 800a108:	0800a14b 	.word	0x0800a14b
 800a10c:	0800a1b5 	.word	0x0800a1b5
 800a110:	0800a1db 	.word	0x0800a1db
 800a114:	0800a213 	.word	0x0800a213
 800a118:	0800a23d 	.word	0x0800a23d
 800a11c:	0800a28f 	.word	0x0800a28f
 800a120:	0800a2b1 	.word	0x0800a2b1
 800a124:	0800a2ed 	.word	0x0800a2ed
 800a128:	0800a313 	.word	0x0800a313
 800a12c:	0800a351 	.word	0x0800a351
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f103 0110 	add.w	r1, r3, #16
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	795b      	ldrb	r3, [r3, #5]
 800a13a:	461a      	mov	r2, r3
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 f943 	bl	800a3c8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2202      	movs	r2, #2
 800a146:	761a      	strb	r2, [r3, #24]
      break;
 800a148:	e139      	b.n	800a3be <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	795b      	ldrb	r3, [r3, #5]
 800a14e:	4619      	mov	r1, r3
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fcc5 	bl	800aae0 <USBH_LL_GetURBState>
 800a156:	4603      	mov	r3, r0
 800a158:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a15a:	7bbb      	ldrb	r3, [r7, #14]
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d11e      	bne.n	800a19e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	7c1b      	ldrb	r3, [r3, #16]
 800a164:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a168:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	8adb      	ldrh	r3, [r3, #22]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00a      	beq.n	800a188 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a172:	7b7b      	ldrb	r3, [r7, #13]
 800a174:	2b80      	cmp	r3, #128	; 0x80
 800a176:	d103      	bne.n	800a180 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2203      	movs	r2, #3
 800a17c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a17e:	e115      	b.n	800a3ac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2205      	movs	r2, #5
 800a184:	761a      	strb	r2, [r3, #24]
      break;
 800a186:	e111      	b.n	800a3ac <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a188:	7b7b      	ldrb	r3, [r7, #13]
 800a18a:	2b80      	cmp	r3, #128	; 0x80
 800a18c:	d103      	bne.n	800a196 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2209      	movs	r2, #9
 800a192:	761a      	strb	r2, [r3, #24]
      break;
 800a194:	e10a      	b.n	800a3ac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2207      	movs	r2, #7
 800a19a:	761a      	strb	r2, [r3, #24]
      break;
 800a19c:	e106      	b.n	800a3ac <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a19e:	7bbb      	ldrb	r3, [r7, #14]
 800a1a0:	2b04      	cmp	r3, #4
 800a1a2:	d003      	beq.n	800a1ac <USBH_HandleControl+0xcc>
 800a1a4:	7bbb      	ldrb	r3, [r7, #14]
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	f040 8100 	bne.w	800a3ac <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	220b      	movs	r2, #11
 800a1b0:	761a      	strb	r2, [r3, #24]
      break;
 800a1b2:	e0fb      	b.n	800a3ac <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a1ba:	b29a      	uxth	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6899      	ldr	r1, [r3, #8]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	899a      	ldrh	r2, [r3, #12]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	791b      	ldrb	r3, [r3, #4]
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 f93a 	bl	800a446 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2204      	movs	r2, #4
 800a1d6:	761a      	strb	r2, [r3, #24]
      break;
 800a1d8:	e0f1      	b.n	800a3be <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	791b      	ldrb	r3, [r3, #4]
 800a1de:	4619      	mov	r1, r3
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 fc7d 	bl	800aae0 <USBH_LL_GetURBState>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a1ea:	7bbb      	ldrb	r3, [r7, #14]
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d102      	bne.n	800a1f6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2209      	movs	r2, #9
 800a1f4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a1f6:	7bbb      	ldrb	r3, [r7, #14]
 800a1f8:	2b05      	cmp	r3, #5
 800a1fa:	d102      	bne.n	800a202 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a200:	e0d6      	b.n	800a3b0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a202:	7bbb      	ldrb	r3, [r7, #14]
 800a204:	2b04      	cmp	r3, #4
 800a206:	f040 80d3 	bne.w	800a3b0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	220b      	movs	r2, #11
 800a20e:	761a      	strb	r2, [r3, #24]
      break;
 800a210:	e0ce      	b.n	800a3b0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6899      	ldr	r1, [r3, #8]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	899a      	ldrh	r2, [r3, #12]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	795b      	ldrb	r3, [r3, #5]
 800a21e:	2001      	movs	r0, #1
 800a220:	9000      	str	r0, [sp, #0]
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f8ea 	bl	800a3fc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a22e:	b29a      	uxth	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2206      	movs	r2, #6
 800a238:	761a      	strb	r2, [r3, #24]
      break;
 800a23a:	e0c0      	b.n	800a3be <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	795b      	ldrb	r3, [r3, #5]
 800a240:	4619      	mov	r1, r3
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 fc4c 	bl	800aae0 <USBH_LL_GetURBState>
 800a248:	4603      	mov	r3, r0
 800a24a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a24c:	7bbb      	ldrb	r3, [r7, #14]
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d103      	bne.n	800a25a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2207      	movs	r2, #7
 800a256:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a258:	e0ac      	b.n	800a3b4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a25a:	7bbb      	ldrb	r3, [r7, #14]
 800a25c:	2b05      	cmp	r3, #5
 800a25e:	d105      	bne.n	800a26c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	220c      	movs	r2, #12
 800a264:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a266:	2303      	movs	r3, #3
 800a268:	73fb      	strb	r3, [r7, #15]
      break;
 800a26a:	e0a3      	b.n	800a3b4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a26c:	7bbb      	ldrb	r3, [r7, #14]
 800a26e:	2b02      	cmp	r3, #2
 800a270:	d103      	bne.n	800a27a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2205      	movs	r2, #5
 800a276:	761a      	strb	r2, [r3, #24]
      break;
 800a278:	e09c      	b.n	800a3b4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a27a:	7bbb      	ldrb	r3, [r7, #14]
 800a27c:	2b04      	cmp	r3, #4
 800a27e:	f040 8099 	bne.w	800a3b4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	220b      	movs	r2, #11
 800a286:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a288:	2302      	movs	r3, #2
 800a28a:	73fb      	strb	r3, [r7, #15]
      break;
 800a28c:	e092      	b.n	800a3b4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	791b      	ldrb	r3, [r3, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	2100      	movs	r1, #0
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 f8d5 	bl	800a446 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a2a2:	b29a      	uxth	r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2208      	movs	r2, #8
 800a2ac:	761a      	strb	r2, [r3, #24]

      break;
 800a2ae:	e086      	b.n	800a3be <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	791b      	ldrb	r3, [r3, #4]
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fc12 	bl	800aae0 <USBH_LL_GetURBState>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a2c0:	7bbb      	ldrb	r3, [r7, #14]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d105      	bne.n	800a2d2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	220d      	movs	r2, #13
 800a2ca:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a2d0:	e072      	b.n	800a3b8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a2d2:	7bbb      	ldrb	r3, [r7, #14]
 800a2d4:	2b04      	cmp	r3, #4
 800a2d6:	d103      	bne.n	800a2e0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	220b      	movs	r2, #11
 800a2dc:	761a      	strb	r2, [r3, #24]
      break;
 800a2de:	e06b      	b.n	800a3b8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a2e0:	7bbb      	ldrb	r3, [r7, #14]
 800a2e2:	2b05      	cmp	r3, #5
 800a2e4:	d168      	bne.n	800a3b8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	73fb      	strb	r3, [r7, #15]
      break;
 800a2ea:	e065      	b.n	800a3b8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	795b      	ldrb	r3, [r3, #5]
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	9200      	str	r2, [sp, #0]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 f87f 	bl	800a3fc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a304:	b29a      	uxth	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	220a      	movs	r2, #10
 800a30e:	761a      	strb	r2, [r3, #24]
      break;
 800a310:	e055      	b.n	800a3be <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	795b      	ldrb	r3, [r3, #5]
 800a316:	4619      	mov	r1, r3
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 fbe1 	bl	800aae0 <USBH_LL_GetURBState>
 800a31e:	4603      	mov	r3, r0
 800a320:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a322:	7bbb      	ldrb	r3, [r7, #14]
 800a324:	2b01      	cmp	r3, #1
 800a326:	d105      	bne.n	800a334 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	220d      	movs	r2, #13
 800a330:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a332:	e043      	b.n	800a3bc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a334:	7bbb      	ldrb	r3, [r7, #14]
 800a336:	2b02      	cmp	r3, #2
 800a338:	d103      	bne.n	800a342 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2209      	movs	r2, #9
 800a33e:	761a      	strb	r2, [r3, #24]
      break;
 800a340:	e03c      	b.n	800a3bc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a342:	7bbb      	ldrb	r3, [r7, #14]
 800a344:	2b04      	cmp	r3, #4
 800a346:	d139      	bne.n	800a3bc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	220b      	movs	r2, #11
 800a34c:	761a      	strb	r2, [r3, #24]
      break;
 800a34e:	e035      	b.n	800a3bc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	7e5b      	ldrb	r3, [r3, #25]
 800a354:	3301      	adds	r3, #1
 800a356:	b2da      	uxtb	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	765a      	strb	r2, [r3, #25]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	7e5b      	ldrb	r3, [r3, #25]
 800a360:	2b02      	cmp	r3, #2
 800a362:	d806      	bhi.n	800a372 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2201      	movs	r2, #1
 800a36e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a370:	e025      	b.n	800a3be <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a378:	2106      	movs	r1, #6
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2200      	movs	r2, #0
 800a382:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	795b      	ldrb	r3, [r3, #5]
 800a388:	4619      	mov	r1, r3
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 f90c 	bl	800a5a8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	791b      	ldrb	r3, [r3, #4]
 800a394:	4619      	mov	r1, r3
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 f906 	bl	800a5a8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a3a2:	2302      	movs	r3, #2
 800a3a4:	73fb      	strb	r3, [r7, #15]
      break;
 800a3a6:	e00a      	b.n	800a3be <USBH_HandleControl+0x2de>

    default:
      break;
 800a3a8:	bf00      	nop
 800a3aa:	e008      	b.n	800a3be <USBH_HandleControl+0x2de>
      break;
 800a3ac:	bf00      	nop
 800a3ae:	e006      	b.n	800a3be <USBH_HandleControl+0x2de>
      break;
 800a3b0:	bf00      	nop
 800a3b2:	e004      	b.n	800a3be <USBH_HandleControl+0x2de>
      break;
 800a3b4:	bf00      	nop
 800a3b6:	e002      	b.n	800a3be <USBH_HandleControl+0x2de>
      break;
 800a3b8:	bf00      	nop
 800a3ba:	e000      	b.n	800a3be <USBH_HandleControl+0x2de>
      break;
 800a3bc:	bf00      	nop
  }

  return status;
 800a3be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b088      	sub	sp, #32
 800a3cc:	af04      	add	r7, sp, #16
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a3d6:	79f9      	ldrb	r1, [r7, #7]
 800a3d8:	2300      	movs	r3, #0
 800a3da:	9303      	str	r3, [sp, #12]
 800a3dc:	2308      	movs	r3, #8
 800a3de:	9302      	str	r3, [sp, #8]
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	9301      	str	r3, [sp, #4]
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	68f8      	ldr	r0, [r7, #12]
 800a3ee:	f000 fb46 	bl	800aa7e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a3f2:	2300      	movs	r3, #0
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3710      	adds	r7, #16
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b088      	sub	sp, #32
 800a400:	af04      	add	r7, sp, #16
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	4611      	mov	r1, r2
 800a408:	461a      	mov	r2, r3
 800a40a:	460b      	mov	r3, r1
 800a40c:	80fb      	strh	r3, [r7, #6]
 800a40e:	4613      	mov	r3, r2
 800a410:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d001      	beq.n	800a420 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a41c:	2300      	movs	r3, #0
 800a41e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a420:	7979      	ldrb	r1, [r7, #5]
 800a422:	7e3b      	ldrb	r3, [r7, #24]
 800a424:	9303      	str	r3, [sp, #12]
 800a426:	88fb      	ldrh	r3, [r7, #6]
 800a428:	9302      	str	r3, [sp, #8]
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	9301      	str	r3, [sp, #4]
 800a42e:	2301      	movs	r3, #1
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	2300      	movs	r3, #0
 800a434:	2200      	movs	r2, #0
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f000 fb21 	bl	800aa7e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a43c:	2300      	movs	r3, #0
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b088      	sub	sp, #32
 800a44a:	af04      	add	r7, sp, #16
 800a44c:	60f8      	str	r0, [r7, #12]
 800a44e:	60b9      	str	r1, [r7, #8]
 800a450:	4611      	mov	r1, r2
 800a452:	461a      	mov	r2, r3
 800a454:	460b      	mov	r3, r1
 800a456:	80fb      	strh	r3, [r7, #6]
 800a458:	4613      	mov	r3, r2
 800a45a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a45c:	7979      	ldrb	r1, [r7, #5]
 800a45e:	2300      	movs	r3, #0
 800a460:	9303      	str	r3, [sp, #12]
 800a462:	88fb      	ldrh	r3, [r7, #6]
 800a464:	9302      	str	r3, [sp, #8]
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	9301      	str	r3, [sp, #4]
 800a46a:	2301      	movs	r3, #1
 800a46c:	9300      	str	r3, [sp, #0]
 800a46e:	2300      	movs	r3, #0
 800a470:	2201      	movs	r2, #1
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f000 fb03 	bl	800aa7e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a478:	2300      	movs	r3, #0

}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b088      	sub	sp, #32
 800a486:	af04      	add	r7, sp, #16
 800a488:	60f8      	str	r0, [r7, #12]
 800a48a:	60b9      	str	r1, [r7, #8]
 800a48c:	4611      	mov	r1, r2
 800a48e:	461a      	mov	r2, r3
 800a490:	460b      	mov	r3, r1
 800a492:	80fb      	strh	r3, [r7, #6]
 800a494:	4613      	mov	r3, r2
 800a496:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d001      	beq.n	800a4a6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a4a6:	7979      	ldrb	r1, [r7, #5]
 800a4a8:	7e3b      	ldrb	r3, [r7, #24]
 800a4aa:	9303      	str	r3, [sp, #12]
 800a4ac:	88fb      	ldrh	r3, [r7, #6]
 800a4ae:	9302      	str	r3, [sp, #8]
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	9301      	str	r3, [sp, #4]
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	2302      	movs	r3, #2
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f000 fade 	bl	800aa7e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3710      	adds	r7, #16
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b088      	sub	sp, #32
 800a4d0:	af04      	add	r7, sp, #16
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	4611      	mov	r1, r2
 800a4d8:	461a      	mov	r2, r3
 800a4da:	460b      	mov	r3, r1
 800a4dc:	80fb      	strh	r3, [r7, #6]
 800a4de:	4613      	mov	r3, r2
 800a4e0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a4e2:	7979      	ldrb	r1, [r7, #5]
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	9303      	str	r3, [sp, #12]
 800a4e8:	88fb      	ldrh	r3, [r7, #6]
 800a4ea:	9302      	str	r3, [sp, #8]
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	9301      	str	r3, [sp, #4]
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	9300      	str	r3, [sp, #0]
 800a4f4:	2302      	movs	r3, #2
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f000 fac0 	bl	800aa7e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a4fe:	2300      	movs	r3, #0
}
 800a500:	4618      	mov	r0, r3
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b086      	sub	sp, #24
 800a50c:	af04      	add	r7, sp, #16
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	4608      	mov	r0, r1
 800a512:	4611      	mov	r1, r2
 800a514:	461a      	mov	r2, r3
 800a516:	4603      	mov	r3, r0
 800a518:	70fb      	strb	r3, [r7, #3]
 800a51a:	460b      	mov	r3, r1
 800a51c:	70bb      	strb	r3, [r7, #2]
 800a51e:	4613      	mov	r3, r2
 800a520:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a522:	7878      	ldrb	r0, [r7, #1]
 800a524:	78ba      	ldrb	r2, [r7, #2]
 800a526:	78f9      	ldrb	r1, [r7, #3]
 800a528:	8b3b      	ldrh	r3, [r7, #24]
 800a52a:	9302      	str	r3, [sp, #8]
 800a52c:	7d3b      	ldrb	r3, [r7, #20]
 800a52e:	9301      	str	r3, [sp, #4]
 800a530:	7c3b      	ldrb	r3, [r7, #16]
 800a532:	9300      	str	r3, [sp, #0]
 800a534:	4603      	mov	r3, r0
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 fa53 	bl	800a9e2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3708      	adds	r7, #8
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b082      	sub	sp, #8
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
 800a54e:	460b      	mov	r3, r1
 800a550:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a552:	78fb      	ldrb	r3, [r7, #3]
 800a554:	4619      	mov	r1, r3
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 fa72 	bl	800aa40 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3708      	adds	r7, #8
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b084      	sub	sp, #16
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
 800a56e:	460b      	mov	r3, r1
 800a570:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 f836 	bl	800a5e4 <USBH_GetFreePipe>
 800a578:	4603      	mov	r3, r0
 800a57a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a57c:	89fb      	ldrh	r3, [r7, #14]
 800a57e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a582:	4293      	cmp	r3, r2
 800a584:	d00a      	beq.n	800a59c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a586:	78fa      	ldrb	r2, [r7, #3]
 800a588:	89fb      	ldrh	r3, [r7, #14]
 800a58a:	f003 030f 	and.w	r3, r3, #15
 800a58e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a592:	6879      	ldr	r1, [r7, #4]
 800a594:	33e0      	adds	r3, #224	; 0xe0
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	440b      	add	r3, r1
 800a59a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a59c:	89fb      	ldrh	r3, [r7, #14]
 800a59e:	b2db      	uxtb	r3, r3
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3710      	adds	r7, #16
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a5b4:	78fb      	ldrb	r3, [r7, #3]
 800a5b6:	2b0f      	cmp	r3, #15
 800a5b8:	d80d      	bhi.n	800a5d6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a5ba:	78fb      	ldrb	r3, [r7, #3]
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	33e0      	adds	r3, #224	; 0xe0
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	4413      	add	r3, r2
 800a5c4:	685a      	ldr	r2, [r3, #4]
 800a5c6:	78fb      	ldrb	r3, [r7, #3]
 800a5c8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a5cc:	6879      	ldr	r1, [r7, #4]
 800a5ce:	33e0      	adds	r3, #224	; 0xe0
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	440b      	add	r3, r1
 800a5d4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	73fb      	strb	r3, [r7, #15]
 800a5f4:	e00f      	b.n	800a616 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a5f6:	7bfb      	ldrb	r3, [r7, #15]
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	33e0      	adds	r3, #224	; 0xe0
 800a5fc:	009b      	lsls	r3, r3, #2
 800a5fe:	4413      	add	r3, r2
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a606:	2b00      	cmp	r3, #0
 800a608:	d102      	bne.n	800a610 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a60a:	7bfb      	ldrb	r3, [r7, #15]
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	e007      	b.n	800a620 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a610:	7bfb      	ldrb	r3, [r7, #15]
 800a612:	3301      	adds	r3, #1
 800a614:	73fb      	strb	r3, [r7, #15]
 800a616:	7bfb      	ldrb	r3, [r7, #15]
 800a618:	2b0f      	cmp	r3, #15
 800a61a:	d9ec      	bls.n	800a5f6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a61c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a620:	4618      	mov	r0, r3
 800a622:	3714      	adds	r7, #20
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a630:	2201      	movs	r2, #1
 800a632:	490e      	ldr	r1, [pc, #56]	; (800a66c <MX_USB_HOST_Init+0x40>)
 800a634:	480e      	ldr	r0, [pc, #56]	; (800a670 <MX_USB_HOST_Init+0x44>)
 800a636:	f7fe fba7 	bl	8008d88 <USBH_Init>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d001      	beq.n	800a644 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a640:	f7f7 fc70 	bl	8001f24 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a644:	490b      	ldr	r1, [pc, #44]	; (800a674 <MX_USB_HOST_Init+0x48>)
 800a646:	480a      	ldr	r0, [pc, #40]	; (800a670 <MX_USB_HOST_Init+0x44>)
 800a648:	f7fe fc2c 	bl	8008ea4 <USBH_RegisterClass>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d001      	beq.n	800a656 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a652:	f7f7 fc67 	bl	8001f24 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a656:	4806      	ldr	r0, [pc, #24]	; (800a670 <MX_USB_HOST_Init+0x44>)
 800a658:	f7fe fcb0 	bl	8008fbc <USBH_Start>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d001      	beq.n	800a666 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a662:	f7f7 fc5f 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a666:	bf00      	nop
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	0800a68d 	.word	0x0800a68d
 800a670:	200002d8 	.word	0x200002d8
 800a674:	2000000c 	.word	0x2000000c

0800a678 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a67c:	4802      	ldr	r0, [pc, #8]	; (800a688 <MX_USB_HOST_Process+0x10>)
 800a67e:	f7fe fcad 	bl	8008fdc <USBH_Process>
}
 800a682:	bf00      	nop
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	200002d8 	.word	0x200002d8

0800a68c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	460b      	mov	r3, r1
 800a696:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a698:	78fb      	ldrb	r3, [r7, #3]
 800a69a:	3b01      	subs	r3, #1
 800a69c:	2b04      	cmp	r3, #4
 800a69e:	d819      	bhi.n	800a6d4 <USBH_UserProcess+0x48>
 800a6a0:	a201      	add	r2, pc, #4	; (adr r2, 800a6a8 <USBH_UserProcess+0x1c>)
 800a6a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a6:	bf00      	nop
 800a6a8:	0800a6d5 	.word	0x0800a6d5
 800a6ac:	0800a6c5 	.word	0x0800a6c5
 800a6b0:	0800a6d5 	.word	0x0800a6d5
 800a6b4:	0800a6cd 	.word	0x0800a6cd
 800a6b8:	0800a6bd 	.word	0x0800a6bd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a6bc:	4b09      	ldr	r3, [pc, #36]	; (800a6e4 <USBH_UserProcess+0x58>)
 800a6be:	2203      	movs	r2, #3
 800a6c0:	701a      	strb	r2, [r3, #0]
  break;
 800a6c2:	e008      	b.n	800a6d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a6c4:	4b07      	ldr	r3, [pc, #28]	; (800a6e4 <USBH_UserProcess+0x58>)
 800a6c6:	2202      	movs	r2, #2
 800a6c8:	701a      	strb	r2, [r3, #0]
  break;
 800a6ca:	e004      	b.n	800a6d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a6cc:	4b05      	ldr	r3, [pc, #20]	; (800a6e4 <USBH_UserProcess+0x58>)
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	701a      	strb	r2, [r3, #0]
  break;
 800a6d2:	e000      	b.n	800a6d6 <USBH_UserProcess+0x4a>

  default:
  break;
 800a6d4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a6d6:	bf00      	nop
 800a6d8:	370c      	adds	r7, #12
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	200006b0 	.word	0x200006b0

0800a6e8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b08a      	sub	sp, #40	; 0x28
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6f0:	f107 0314 	add.w	r3, r7, #20
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	601a      	str	r2, [r3, #0]
 800a6f8:	605a      	str	r2, [r3, #4]
 800a6fa:	609a      	str	r2, [r3, #8]
 800a6fc:	60da      	str	r2, [r3, #12]
 800a6fe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a708:	d147      	bne.n	800a79a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a70a:	2300      	movs	r3, #0
 800a70c:	613b      	str	r3, [r7, #16]
 800a70e:	4b25      	ldr	r3, [pc, #148]	; (800a7a4 <HAL_HCD_MspInit+0xbc>)
 800a710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a712:	4a24      	ldr	r2, [pc, #144]	; (800a7a4 <HAL_HCD_MspInit+0xbc>)
 800a714:	f043 0301 	orr.w	r3, r3, #1
 800a718:	6313      	str	r3, [r2, #48]	; 0x30
 800a71a:	4b22      	ldr	r3, [pc, #136]	; (800a7a4 <HAL_HCD_MspInit+0xbc>)
 800a71c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a71e:	f003 0301 	and.w	r3, r3, #1
 800a722:	613b      	str	r3, [r7, #16]
 800a724:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a72a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a72c:	2300      	movs	r3, #0
 800a72e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a730:	2300      	movs	r3, #0
 800a732:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a734:	f107 0314 	add.w	r3, r7, #20
 800a738:	4619      	mov	r1, r3
 800a73a:	481b      	ldr	r0, [pc, #108]	; (800a7a8 <HAL_HCD_MspInit+0xc0>)
 800a73c:	f7f8 fb3a 	bl	8002db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a740:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a746:	2302      	movs	r3, #2
 800a748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a74a:	2300      	movs	r3, #0
 800a74c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a74e:	2303      	movs	r3, #3
 800a750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a752:	230a      	movs	r3, #10
 800a754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a756:	f107 0314 	add.w	r3, r7, #20
 800a75a:	4619      	mov	r1, r3
 800a75c:	4812      	ldr	r0, [pc, #72]	; (800a7a8 <HAL_HCD_MspInit+0xc0>)
 800a75e:	f7f8 fb29 	bl	8002db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a762:	4b10      	ldr	r3, [pc, #64]	; (800a7a4 <HAL_HCD_MspInit+0xbc>)
 800a764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a766:	4a0f      	ldr	r2, [pc, #60]	; (800a7a4 <HAL_HCD_MspInit+0xbc>)
 800a768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a76c:	6353      	str	r3, [r2, #52]	; 0x34
 800a76e:	2300      	movs	r3, #0
 800a770:	60fb      	str	r3, [r7, #12]
 800a772:	4b0c      	ldr	r3, [pc, #48]	; (800a7a4 <HAL_HCD_MspInit+0xbc>)
 800a774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a776:	4a0b      	ldr	r2, [pc, #44]	; (800a7a4 <HAL_HCD_MspInit+0xbc>)
 800a778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a77c:	6453      	str	r3, [r2, #68]	; 0x44
 800a77e:	4b09      	ldr	r3, [pc, #36]	; (800a7a4 <HAL_HCD_MspInit+0xbc>)
 800a780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a786:	60fb      	str	r3, [r7, #12]
 800a788:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a78a:	2200      	movs	r2, #0
 800a78c:	2100      	movs	r1, #0
 800a78e:	2043      	movs	r0, #67	; 0x43
 800a790:	f7f7 ffef 	bl	8002772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a794:	2043      	movs	r0, #67	; 0x43
 800a796:	f7f8 f808 	bl	80027aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a79a:	bf00      	nop
 800a79c:	3728      	adds	r7, #40	; 0x28
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	40023800 	.word	0x40023800
 800a7a8:	40020000 	.word	0x40020000

0800a7ac <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7fe ffed 	bl	800979a <USBH_LL_IncTimer>
}
 800a7c0:	bf00      	nop
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7ff f825 	bl	8009826 <USBH_LL_Connect>
}
 800a7dc:	bf00      	nop
 800a7de:	3708      	adds	r7, #8
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7ff f82e 	bl	8009854 <USBH_LL_Disconnect>
}
 800a7f8:	bf00      	nop
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	460b      	mov	r3, r1
 800a80a:	70fb      	strb	r3, [r7, #3]
 800a80c:	4613      	mov	r3, r2
 800a80e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a810:	bf00      	nop
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7fe ffdf 	bl	80097ee <USBH_LL_PortEnabled>
}
 800a830:	bf00      	nop
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a846:	4618      	mov	r0, r3
 800a848:	f7fe ffdf 	bl	800980a <USBH_LL_PortDisabled>
}
 800a84c:	bf00      	nop
 800a84e:	3708      	adds	r7, #8
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a862:	2b01      	cmp	r3, #1
 800a864:	d12a      	bne.n	800a8bc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a866:	4a18      	ldr	r2, [pc, #96]	; (800a8c8 <USBH_LL_Init+0x74>)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	4a15      	ldr	r2, [pc, #84]	; (800a8c8 <USBH_LL_Init+0x74>)
 800a872:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a876:	4b14      	ldr	r3, [pc, #80]	; (800a8c8 <USBH_LL_Init+0x74>)
 800a878:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a87c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a87e:	4b12      	ldr	r3, [pc, #72]	; (800a8c8 <USBH_LL_Init+0x74>)
 800a880:	2208      	movs	r2, #8
 800a882:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a884:	4b10      	ldr	r3, [pc, #64]	; (800a8c8 <USBH_LL_Init+0x74>)
 800a886:	2201      	movs	r2, #1
 800a888:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a88a:	4b0f      	ldr	r3, [pc, #60]	; (800a8c8 <USBH_LL_Init+0x74>)
 800a88c:	2200      	movs	r2, #0
 800a88e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a890:	4b0d      	ldr	r3, [pc, #52]	; (800a8c8 <USBH_LL_Init+0x74>)
 800a892:	2202      	movs	r2, #2
 800a894:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a896:	4b0c      	ldr	r3, [pc, #48]	; (800a8c8 <USBH_LL_Init+0x74>)
 800a898:	2200      	movs	r2, #0
 800a89a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a89c:	480a      	ldr	r0, [pc, #40]	; (800a8c8 <USBH_LL_Init+0x74>)
 800a89e:	f7f8 fc26 	bl	80030ee <HAL_HCD_Init>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d001      	beq.n	800a8ac <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a8a8:	f7f7 fb3c 	bl	8001f24 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a8ac:	4806      	ldr	r0, [pc, #24]	; (800a8c8 <USBH_LL_Init+0x74>)
 800a8ae:	f7f9 f80a 	bl	80038c6 <HAL_HCD_GetCurrentFrame>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f7fe ff60 	bl	800977c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3708      	adds	r7, #8
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	200006b4 	.word	0x200006b4

0800a8cc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7f8 ff79 	bl	80037da <HAL_HCD_Start>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f000 f95c 	bl	800abac <USBH_Get_USB_Status>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b084      	sub	sp, #16
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a90a:	2300      	movs	r3, #0
 800a90c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a90e:	2300      	movs	r3, #0
 800a910:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a918:	4618      	mov	r0, r3
 800a91a:	f7f8 ff81 	bl	8003820 <HAL_HCD_Stop>
 800a91e:	4603      	mov	r3, r0
 800a920:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a922:	7bfb      	ldrb	r3, [r7, #15]
 800a924:	4618      	mov	r0, r3
 800a926:	f000 f941 	bl	800abac <USBH_Get_USB_Status>
 800a92a:	4603      	mov	r3, r0
 800a92c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a92e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a930:	4618      	mov	r0, r3
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a940:	2301      	movs	r3, #1
 800a942:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7f8 ffc9 	bl	80038e2 <HAL_HCD_GetCurrentSpeed>
 800a950:	4603      	mov	r3, r0
 800a952:	2b02      	cmp	r3, #2
 800a954:	d00c      	beq.n	800a970 <USBH_LL_GetSpeed+0x38>
 800a956:	2b02      	cmp	r3, #2
 800a958:	d80d      	bhi.n	800a976 <USBH_LL_GetSpeed+0x3e>
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d002      	beq.n	800a964 <USBH_LL_GetSpeed+0x2c>
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d003      	beq.n	800a96a <USBH_LL_GetSpeed+0x32>
 800a962:	e008      	b.n	800a976 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a964:	2300      	movs	r3, #0
 800a966:	73fb      	strb	r3, [r7, #15]
    break;
 800a968:	e008      	b.n	800a97c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a96a:	2301      	movs	r3, #1
 800a96c:	73fb      	strb	r3, [r7, #15]
    break;
 800a96e:	e005      	b.n	800a97c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a970:	2302      	movs	r3, #2
 800a972:	73fb      	strb	r3, [r7, #15]
    break;
 800a974:	e002      	b.n	800a97c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a976:	2301      	movs	r3, #1
 800a978:	73fb      	strb	r3, [r7, #15]
    break;
 800a97a:	bf00      	nop
  }
  return  speed;
 800a97c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3710      	adds	r7, #16
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a986:	b580      	push	{r7, lr}
 800a988:	b084      	sub	sp, #16
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a98e:	2300      	movs	r3, #0
 800a990:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7f8 ff5c 	bl	800385a <HAL_HCD_ResetPort>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a9a6:	7bfb      	ldrb	r3, [r7, #15]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f000 f8ff 	bl	800abac <USBH_Get_USB_Status>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a9ce:	78fa      	ldrb	r2, [r7, #3]
 800a9d0:	4611      	mov	r1, r2
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7f8 ff63 	bl	800389e <HAL_HCD_HC_GetXferCount>
 800a9d8:	4603      	mov	r3, r0
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3708      	adds	r7, #8
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a9e2:	b590      	push	{r4, r7, lr}
 800a9e4:	b089      	sub	sp, #36	; 0x24
 800a9e6:	af04      	add	r7, sp, #16
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	4608      	mov	r0, r1
 800a9ec:	4611      	mov	r1, r2
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	70fb      	strb	r3, [r7, #3]
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	70bb      	strb	r3, [r7, #2]
 800a9f8:	4613      	mov	r3, r2
 800a9fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa00:	2300      	movs	r3, #0
 800aa02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800aa0a:	787c      	ldrb	r4, [r7, #1]
 800aa0c:	78ba      	ldrb	r2, [r7, #2]
 800aa0e:	78f9      	ldrb	r1, [r7, #3]
 800aa10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aa12:	9302      	str	r3, [sp, #8]
 800aa14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aa18:	9301      	str	r3, [sp, #4]
 800aa1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	4623      	mov	r3, r4
 800aa22:	f7f8 fbc6 	bl	80031b2 <HAL_HCD_HC_Init>
 800aa26:	4603      	mov	r3, r0
 800aa28:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa2a:	7bfb      	ldrb	r3, [r7, #15]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f000 f8bd 	bl	800abac <USBH_Get_USB_Status>
 800aa32:	4603      	mov	r3, r0
 800aa34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa36:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3714      	adds	r7, #20
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd90      	pop	{r4, r7, pc}

0800aa40 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	460b      	mov	r3, r1
 800aa4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa50:	2300      	movs	r3, #0
 800aa52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aa5a:	78fa      	ldrb	r2, [r7, #3]
 800aa5c:	4611      	mov	r1, r2
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7f8 fc36 	bl	80032d0 <HAL_HCD_HC_Halt>
 800aa64:	4603      	mov	r3, r0
 800aa66:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa68:	7bfb      	ldrb	r3, [r7, #15]
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f000 f89e 	bl	800abac <USBH_Get_USB_Status>
 800aa70:	4603      	mov	r3, r0
 800aa72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa74:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800aa7e:	b590      	push	{r4, r7, lr}
 800aa80:	b089      	sub	sp, #36	; 0x24
 800aa82:	af04      	add	r7, sp, #16
 800aa84:	6078      	str	r0, [r7, #4]
 800aa86:	4608      	mov	r0, r1
 800aa88:	4611      	mov	r1, r2
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	70fb      	strb	r3, [r7, #3]
 800aa90:	460b      	mov	r3, r1
 800aa92:	70bb      	strb	r3, [r7, #2]
 800aa94:	4613      	mov	r3, r2
 800aa96:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800aaa6:	787c      	ldrb	r4, [r7, #1]
 800aaa8:	78ba      	ldrb	r2, [r7, #2]
 800aaaa:	78f9      	ldrb	r1, [r7, #3]
 800aaac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aab0:	9303      	str	r3, [sp, #12]
 800aab2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aab4:	9302      	str	r3, [sp, #8]
 800aab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab8:	9301      	str	r3, [sp, #4]
 800aaba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aabe:	9300      	str	r3, [sp, #0]
 800aac0:	4623      	mov	r3, r4
 800aac2:	f7f8 fc29 	bl	8003318 <HAL_HCD_HC_SubmitRequest>
 800aac6:	4603      	mov	r3, r0
 800aac8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800aaca:	7bfb      	ldrb	r3, [r7, #15]
 800aacc:	4618      	mov	r0, r3
 800aace:	f000 f86d 	bl	800abac <USBH_Get_USB_Status>
 800aad2:	4603      	mov	r3, r0
 800aad4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aad6:	7bbb      	ldrb	r3, [r7, #14]
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3714      	adds	r7, #20
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd90      	pop	{r4, r7, pc}

0800aae0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b082      	sub	sp, #8
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	460b      	mov	r3, r1
 800aaea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aaf2:	78fa      	ldrb	r2, [r7, #3]
 800aaf4:	4611      	mov	r1, r2
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7f8 febd 	bl	8003876 <HAL_HCD_HC_GetURBState>
 800aafc:	4603      	mov	r3, r0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3708      	adds	r7, #8
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}

0800ab06 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ab06:	b580      	push	{r7, lr}
 800ab08:	b082      	sub	sp, #8
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
 800ab0e:	460b      	mov	r3, r1
 800ab10:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d103      	bne.n	800ab24 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ab1c:	78fb      	ldrb	r3, [r7, #3]
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f000 f870 	bl	800ac04 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ab24:	20c8      	movs	r0, #200	; 0xc8
 800ab26:	f7f7 fd25 	bl	8002574 <HAL_Delay>
  return USBH_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3708      	adds	r7, #8
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b085      	sub	sp, #20
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	70fb      	strb	r3, [r7, #3]
 800ab40:	4613      	mov	r3, r2
 800ab42:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab4a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ab4c:	78fb      	ldrb	r3, [r7, #3]
 800ab4e:	68fa      	ldr	r2, [r7, #12]
 800ab50:	212c      	movs	r1, #44	; 0x2c
 800ab52:	fb01 f303 	mul.w	r3, r1, r3
 800ab56:	4413      	add	r3, r2
 800ab58:	333b      	adds	r3, #59	; 0x3b
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d009      	beq.n	800ab74 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ab60:	78fb      	ldrb	r3, [r7, #3]
 800ab62:	68fa      	ldr	r2, [r7, #12]
 800ab64:	212c      	movs	r1, #44	; 0x2c
 800ab66:	fb01 f303 	mul.w	r3, r1, r3
 800ab6a:	4413      	add	r3, r2
 800ab6c:	3354      	adds	r3, #84	; 0x54
 800ab6e:	78ba      	ldrb	r2, [r7, #2]
 800ab70:	701a      	strb	r2, [r3, #0]
 800ab72:	e008      	b.n	800ab86 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ab74:	78fb      	ldrb	r3, [r7, #3]
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	212c      	movs	r1, #44	; 0x2c
 800ab7a:	fb01 f303 	mul.w	r3, r1, r3
 800ab7e:	4413      	add	r3, r2
 800ab80:	3355      	adds	r3, #85	; 0x55
 800ab82:	78ba      	ldrb	r2, [r7, #2]
 800ab84:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3714      	adds	r7, #20
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f7f7 fce9 	bl	8002574 <HAL_Delay>
}
 800aba2:	bf00      	nop
 800aba4:	3708      	adds	r7, #8
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
	...

0800abac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	4603      	mov	r3, r0
 800abb4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800abb6:	2300      	movs	r3, #0
 800abb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800abba:	79fb      	ldrb	r3, [r7, #7]
 800abbc:	2b03      	cmp	r3, #3
 800abbe:	d817      	bhi.n	800abf0 <USBH_Get_USB_Status+0x44>
 800abc0:	a201      	add	r2, pc, #4	; (adr r2, 800abc8 <USBH_Get_USB_Status+0x1c>)
 800abc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc6:	bf00      	nop
 800abc8:	0800abd9 	.word	0x0800abd9
 800abcc:	0800abdf 	.word	0x0800abdf
 800abd0:	0800abe5 	.word	0x0800abe5
 800abd4:	0800abeb 	.word	0x0800abeb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800abd8:	2300      	movs	r3, #0
 800abda:	73fb      	strb	r3, [r7, #15]
    break;
 800abdc:	e00b      	b.n	800abf6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800abde:	2302      	movs	r3, #2
 800abe0:	73fb      	strb	r3, [r7, #15]
    break;
 800abe2:	e008      	b.n	800abf6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800abe4:	2301      	movs	r3, #1
 800abe6:	73fb      	strb	r3, [r7, #15]
    break;
 800abe8:	e005      	b.n	800abf6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800abea:	2302      	movs	r3, #2
 800abec:	73fb      	strb	r3, [r7, #15]
    break;
 800abee:	e002      	b.n	800abf6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800abf0:	2302      	movs	r3, #2
 800abf2:	73fb      	strb	r3, [r7, #15]
    break;
 800abf4:	bf00      	nop
  }
  return usb_status;
 800abf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3714      	adds	r7, #20
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ac0e:	79fb      	ldrb	r3, [r7, #7]
 800ac10:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ac12:	79fb      	ldrb	r3, [r7, #7]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d102      	bne.n	800ac1e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	73fb      	strb	r3, [r7, #15]
 800ac1c:	e001      	b.n	800ac22 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ac22:	7bfb      	ldrb	r3, [r7, #15]
 800ac24:	461a      	mov	r2, r3
 800ac26:	2101      	movs	r1, #1
 800ac28:	4803      	ldr	r0, [pc, #12]	; (800ac38 <MX_DriverVbusFS+0x34>)
 800ac2a:	f7f8 fa47 	bl	80030bc <HAL_GPIO_WritePin>
}
 800ac2e:	bf00      	nop
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	40020800 	.word	0x40020800

0800ac3c <__errno>:
 800ac3c:	4b01      	ldr	r3, [pc, #4]	; (800ac44 <__errno+0x8>)
 800ac3e:	6818      	ldr	r0, [r3, #0]
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	2000002c 	.word	0x2000002c

0800ac48 <__libc_init_array>:
 800ac48:	b570      	push	{r4, r5, r6, lr}
 800ac4a:	4d0d      	ldr	r5, [pc, #52]	; (800ac80 <__libc_init_array+0x38>)
 800ac4c:	4c0d      	ldr	r4, [pc, #52]	; (800ac84 <__libc_init_array+0x3c>)
 800ac4e:	1b64      	subs	r4, r4, r5
 800ac50:	10a4      	asrs	r4, r4, #2
 800ac52:	2600      	movs	r6, #0
 800ac54:	42a6      	cmp	r6, r4
 800ac56:	d109      	bne.n	800ac6c <__libc_init_array+0x24>
 800ac58:	4d0b      	ldr	r5, [pc, #44]	; (800ac88 <__libc_init_array+0x40>)
 800ac5a:	4c0c      	ldr	r4, [pc, #48]	; (800ac8c <__libc_init_array+0x44>)
 800ac5c:	f000 f92e 	bl	800aebc <_init>
 800ac60:	1b64      	subs	r4, r4, r5
 800ac62:	10a4      	asrs	r4, r4, #2
 800ac64:	2600      	movs	r6, #0
 800ac66:	42a6      	cmp	r6, r4
 800ac68:	d105      	bne.n	800ac76 <__libc_init_array+0x2e>
 800ac6a:	bd70      	pop	{r4, r5, r6, pc}
 800ac6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac70:	4798      	blx	r3
 800ac72:	3601      	adds	r6, #1
 800ac74:	e7ee      	b.n	800ac54 <__libc_init_array+0xc>
 800ac76:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac7a:	4798      	blx	r3
 800ac7c:	3601      	adds	r6, #1
 800ac7e:	e7f2      	b.n	800ac66 <__libc_init_array+0x1e>
 800ac80:	0800af00 	.word	0x0800af00
 800ac84:	0800af00 	.word	0x0800af00
 800ac88:	0800af00 	.word	0x0800af00
 800ac8c:	0800af04 	.word	0x0800af04

0800ac90 <malloc>:
 800ac90:	4b02      	ldr	r3, [pc, #8]	; (800ac9c <malloc+0xc>)
 800ac92:	4601      	mov	r1, r0
 800ac94:	6818      	ldr	r0, [r3, #0]
 800ac96:	f000 b87f 	b.w	800ad98 <_malloc_r>
 800ac9a:	bf00      	nop
 800ac9c:	2000002c 	.word	0x2000002c

0800aca0 <free>:
 800aca0:	4b02      	ldr	r3, [pc, #8]	; (800acac <free+0xc>)
 800aca2:	4601      	mov	r1, r0
 800aca4:	6818      	ldr	r0, [r3, #0]
 800aca6:	f000 b80b 	b.w	800acc0 <_free_r>
 800acaa:	bf00      	nop
 800acac:	2000002c 	.word	0x2000002c

0800acb0 <memset>:
 800acb0:	4402      	add	r2, r0
 800acb2:	4603      	mov	r3, r0
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d100      	bne.n	800acba <memset+0xa>
 800acb8:	4770      	bx	lr
 800acba:	f803 1b01 	strb.w	r1, [r3], #1
 800acbe:	e7f9      	b.n	800acb4 <memset+0x4>

0800acc0 <_free_r>:
 800acc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acc2:	2900      	cmp	r1, #0
 800acc4:	d044      	beq.n	800ad50 <_free_r+0x90>
 800acc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acca:	9001      	str	r0, [sp, #4]
 800accc:	2b00      	cmp	r3, #0
 800acce:	f1a1 0404 	sub.w	r4, r1, #4
 800acd2:	bfb8      	it	lt
 800acd4:	18e4      	addlt	r4, r4, r3
 800acd6:	f000 f8e3 	bl	800aea0 <__malloc_lock>
 800acda:	4a1e      	ldr	r2, [pc, #120]	; (800ad54 <_free_r+0x94>)
 800acdc:	9801      	ldr	r0, [sp, #4]
 800acde:	6813      	ldr	r3, [r2, #0]
 800ace0:	b933      	cbnz	r3, 800acf0 <_free_r+0x30>
 800ace2:	6063      	str	r3, [r4, #4]
 800ace4:	6014      	str	r4, [r2, #0]
 800ace6:	b003      	add	sp, #12
 800ace8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acec:	f000 b8de 	b.w	800aeac <__malloc_unlock>
 800acf0:	42a3      	cmp	r3, r4
 800acf2:	d908      	bls.n	800ad06 <_free_r+0x46>
 800acf4:	6825      	ldr	r5, [r4, #0]
 800acf6:	1961      	adds	r1, r4, r5
 800acf8:	428b      	cmp	r3, r1
 800acfa:	bf01      	itttt	eq
 800acfc:	6819      	ldreq	r1, [r3, #0]
 800acfe:	685b      	ldreq	r3, [r3, #4]
 800ad00:	1949      	addeq	r1, r1, r5
 800ad02:	6021      	streq	r1, [r4, #0]
 800ad04:	e7ed      	b.n	800ace2 <_free_r+0x22>
 800ad06:	461a      	mov	r2, r3
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	b10b      	cbz	r3, 800ad10 <_free_r+0x50>
 800ad0c:	42a3      	cmp	r3, r4
 800ad0e:	d9fa      	bls.n	800ad06 <_free_r+0x46>
 800ad10:	6811      	ldr	r1, [r2, #0]
 800ad12:	1855      	adds	r5, r2, r1
 800ad14:	42a5      	cmp	r5, r4
 800ad16:	d10b      	bne.n	800ad30 <_free_r+0x70>
 800ad18:	6824      	ldr	r4, [r4, #0]
 800ad1a:	4421      	add	r1, r4
 800ad1c:	1854      	adds	r4, r2, r1
 800ad1e:	42a3      	cmp	r3, r4
 800ad20:	6011      	str	r1, [r2, #0]
 800ad22:	d1e0      	bne.n	800ace6 <_free_r+0x26>
 800ad24:	681c      	ldr	r4, [r3, #0]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	6053      	str	r3, [r2, #4]
 800ad2a:	4421      	add	r1, r4
 800ad2c:	6011      	str	r1, [r2, #0]
 800ad2e:	e7da      	b.n	800ace6 <_free_r+0x26>
 800ad30:	d902      	bls.n	800ad38 <_free_r+0x78>
 800ad32:	230c      	movs	r3, #12
 800ad34:	6003      	str	r3, [r0, #0]
 800ad36:	e7d6      	b.n	800ace6 <_free_r+0x26>
 800ad38:	6825      	ldr	r5, [r4, #0]
 800ad3a:	1961      	adds	r1, r4, r5
 800ad3c:	428b      	cmp	r3, r1
 800ad3e:	bf04      	itt	eq
 800ad40:	6819      	ldreq	r1, [r3, #0]
 800ad42:	685b      	ldreq	r3, [r3, #4]
 800ad44:	6063      	str	r3, [r4, #4]
 800ad46:	bf04      	itt	eq
 800ad48:	1949      	addeq	r1, r1, r5
 800ad4a:	6021      	streq	r1, [r4, #0]
 800ad4c:	6054      	str	r4, [r2, #4]
 800ad4e:	e7ca      	b.n	800ace6 <_free_r+0x26>
 800ad50:	b003      	add	sp, #12
 800ad52:	bd30      	pop	{r4, r5, pc}
 800ad54:	200009b8 	.word	0x200009b8

0800ad58 <sbrk_aligned>:
 800ad58:	b570      	push	{r4, r5, r6, lr}
 800ad5a:	4e0e      	ldr	r6, [pc, #56]	; (800ad94 <sbrk_aligned+0x3c>)
 800ad5c:	460c      	mov	r4, r1
 800ad5e:	6831      	ldr	r1, [r6, #0]
 800ad60:	4605      	mov	r5, r0
 800ad62:	b911      	cbnz	r1, 800ad6a <sbrk_aligned+0x12>
 800ad64:	f000 f88c 	bl	800ae80 <_sbrk_r>
 800ad68:	6030      	str	r0, [r6, #0]
 800ad6a:	4621      	mov	r1, r4
 800ad6c:	4628      	mov	r0, r5
 800ad6e:	f000 f887 	bl	800ae80 <_sbrk_r>
 800ad72:	1c43      	adds	r3, r0, #1
 800ad74:	d00a      	beq.n	800ad8c <sbrk_aligned+0x34>
 800ad76:	1cc4      	adds	r4, r0, #3
 800ad78:	f024 0403 	bic.w	r4, r4, #3
 800ad7c:	42a0      	cmp	r0, r4
 800ad7e:	d007      	beq.n	800ad90 <sbrk_aligned+0x38>
 800ad80:	1a21      	subs	r1, r4, r0
 800ad82:	4628      	mov	r0, r5
 800ad84:	f000 f87c 	bl	800ae80 <_sbrk_r>
 800ad88:	3001      	adds	r0, #1
 800ad8a:	d101      	bne.n	800ad90 <sbrk_aligned+0x38>
 800ad8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ad90:	4620      	mov	r0, r4
 800ad92:	bd70      	pop	{r4, r5, r6, pc}
 800ad94:	200009bc 	.word	0x200009bc

0800ad98 <_malloc_r>:
 800ad98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad9c:	1ccd      	adds	r5, r1, #3
 800ad9e:	f025 0503 	bic.w	r5, r5, #3
 800ada2:	3508      	adds	r5, #8
 800ada4:	2d0c      	cmp	r5, #12
 800ada6:	bf38      	it	cc
 800ada8:	250c      	movcc	r5, #12
 800adaa:	2d00      	cmp	r5, #0
 800adac:	4607      	mov	r7, r0
 800adae:	db01      	blt.n	800adb4 <_malloc_r+0x1c>
 800adb0:	42a9      	cmp	r1, r5
 800adb2:	d905      	bls.n	800adc0 <_malloc_r+0x28>
 800adb4:	230c      	movs	r3, #12
 800adb6:	603b      	str	r3, [r7, #0]
 800adb8:	2600      	movs	r6, #0
 800adba:	4630      	mov	r0, r6
 800adbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adc0:	4e2e      	ldr	r6, [pc, #184]	; (800ae7c <_malloc_r+0xe4>)
 800adc2:	f000 f86d 	bl	800aea0 <__malloc_lock>
 800adc6:	6833      	ldr	r3, [r6, #0]
 800adc8:	461c      	mov	r4, r3
 800adca:	bb34      	cbnz	r4, 800ae1a <_malloc_r+0x82>
 800adcc:	4629      	mov	r1, r5
 800adce:	4638      	mov	r0, r7
 800add0:	f7ff ffc2 	bl	800ad58 <sbrk_aligned>
 800add4:	1c43      	adds	r3, r0, #1
 800add6:	4604      	mov	r4, r0
 800add8:	d14d      	bne.n	800ae76 <_malloc_r+0xde>
 800adda:	6834      	ldr	r4, [r6, #0]
 800addc:	4626      	mov	r6, r4
 800adde:	2e00      	cmp	r6, #0
 800ade0:	d140      	bne.n	800ae64 <_malloc_r+0xcc>
 800ade2:	6823      	ldr	r3, [r4, #0]
 800ade4:	4631      	mov	r1, r6
 800ade6:	4638      	mov	r0, r7
 800ade8:	eb04 0803 	add.w	r8, r4, r3
 800adec:	f000 f848 	bl	800ae80 <_sbrk_r>
 800adf0:	4580      	cmp	r8, r0
 800adf2:	d13a      	bne.n	800ae6a <_malloc_r+0xd2>
 800adf4:	6821      	ldr	r1, [r4, #0]
 800adf6:	3503      	adds	r5, #3
 800adf8:	1a6d      	subs	r5, r5, r1
 800adfa:	f025 0503 	bic.w	r5, r5, #3
 800adfe:	3508      	adds	r5, #8
 800ae00:	2d0c      	cmp	r5, #12
 800ae02:	bf38      	it	cc
 800ae04:	250c      	movcc	r5, #12
 800ae06:	4629      	mov	r1, r5
 800ae08:	4638      	mov	r0, r7
 800ae0a:	f7ff ffa5 	bl	800ad58 <sbrk_aligned>
 800ae0e:	3001      	adds	r0, #1
 800ae10:	d02b      	beq.n	800ae6a <_malloc_r+0xd2>
 800ae12:	6823      	ldr	r3, [r4, #0]
 800ae14:	442b      	add	r3, r5
 800ae16:	6023      	str	r3, [r4, #0]
 800ae18:	e00e      	b.n	800ae38 <_malloc_r+0xa0>
 800ae1a:	6822      	ldr	r2, [r4, #0]
 800ae1c:	1b52      	subs	r2, r2, r5
 800ae1e:	d41e      	bmi.n	800ae5e <_malloc_r+0xc6>
 800ae20:	2a0b      	cmp	r2, #11
 800ae22:	d916      	bls.n	800ae52 <_malloc_r+0xba>
 800ae24:	1961      	adds	r1, r4, r5
 800ae26:	42a3      	cmp	r3, r4
 800ae28:	6025      	str	r5, [r4, #0]
 800ae2a:	bf18      	it	ne
 800ae2c:	6059      	strne	r1, [r3, #4]
 800ae2e:	6863      	ldr	r3, [r4, #4]
 800ae30:	bf08      	it	eq
 800ae32:	6031      	streq	r1, [r6, #0]
 800ae34:	5162      	str	r2, [r4, r5]
 800ae36:	604b      	str	r3, [r1, #4]
 800ae38:	4638      	mov	r0, r7
 800ae3a:	f104 060b 	add.w	r6, r4, #11
 800ae3e:	f000 f835 	bl	800aeac <__malloc_unlock>
 800ae42:	f026 0607 	bic.w	r6, r6, #7
 800ae46:	1d23      	adds	r3, r4, #4
 800ae48:	1af2      	subs	r2, r6, r3
 800ae4a:	d0b6      	beq.n	800adba <_malloc_r+0x22>
 800ae4c:	1b9b      	subs	r3, r3, r6
 800ae4e:	50a3      	str	r3, [r4, r2]
 800ae50:	e7b3      	b.n	800adba <_malloc_r+0x22>
 800ae52:	6862      	ldr	r2, [r4, #4]
 800ae54:	42a3      	cmp	r3, r4
 800ae56:	bf0c      	ite	eq
 800ae58:	6032      	streq	r2, [r6, #0]
 800ae5a:	605a      	strne	r2, [r3, #4]
 800ae5c:	e7ec      	b.n	800ae38 <_malloc_r+0xa0>
 800ae5e:	4623      	mov	r3, r4
 800ae60:	6864      	ldr	r4, [r4, #4]
 800ae62:	e7b2      	b.n	800adca <_malloc_r+0x32>
 800ae64:	4634      	mov	r4, r6
 800ae66:	6876      	ldr	r6, [r6, #4]
 800ae68:	e7b9      	b.n	800adde <_malloc_r+0x46>
 800ae6a:	230c      	movs	r3, #12
 800ae6c:	603b      	str	r3, [r7, #0]
 800ae6e:	4638      	mov	r0, r7
 800ae70:	f000 f81c 	bl	800aeac <__malloc_unlock>
 800ae74:	e7a1      	b.n	800adba <_malloc_r+0x22>
 800ae76:	6025      	str	r5, [r4, #0]
 800ae78:	e7de      	b.n	800ae38 <_malloc_r+0xa0>
 800ae7a:	bf00      	nop
 800ae7c:	200009b8 	.word	0x200009b8

0800ae80 <_sbrk_r>:
 800ae80:	b538      	push	{r3, r4, r5, lr}
 800ae82:	4d06      	ldr	r5, [pc, #24]	; (800ae9c <_sbrk_r+0x1c>)
 800ae84:	2300      	movs	r3, #0
 800ae86:	4604      	mov	r4, r0
 800ae88:	4608      	mov	r0, r1
 800ae8a:	602b      	str	r3, [r5, #0]
 800ae8c:	f7f7 fa8e 	bl	80023ac <_sbrk>
 800ae90:	1c43      	adds	r3, r0, #1
 800ae92:	d102      	bne.n	800ae9a <_sbrk_r+0x1a>
 800ae94:	682b      	ldr	r3, [r5, #0]
 800ae96:	b103      	cbz	r3, 800ae9a <_sbrk_r+0x1a>
 800ae98:	6023      	str	r3, [r4, #0]
 800ae9a:	bd38      	pop	{r3, r4, r5, pc}
 800ae9c:	200009c0 	.word	0x200009c0

0800aea0 <__malloc_lock>:
 800aea0:	4801      	ldr	r0, [pc, #4]	; (800aea8 <__malloc_lock+0x8>)
 800aea2:	f000 b809 	b.w	800aeb8 <__retarget_lock_acquire_recursive>
 800aea6:	bf00      	nop
 800aea8:	200009c4 	.word	0x200009c4

0800aeac <__malloc_unlock>:
 800aeac:	4801      	ldr	r0, [pc, #4]	; (800aeb4 <__malloc_unlock+0x8>)
 800aeae:	f000 b804 	b.w	800aeba <__retarget_lock_release_recursive>
 800aeb2:	bf00      	nop
 800aeb4:	200009c4 	.word	0x200009c4

0800aeb8 <__retarget_lock_acquire_recursive>:
 800aeb8:	4770      	bx	lr

0800aeba <__retarget_lock_release_recursive>:
 800aeba:	4770      	bx	lr

0800aebc <_init>:
 800aebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aebe:	bf00      	nop
 800aec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aec2:	bc08      	pop	{r3}
 800aec4:	469e      	mov	lr, r3
 800aec6:	4770      	bx	lr

0800aec8 <_fini>:
 800aec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeca:	bf00      	nop
 800aecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aece:	bc08      	pop	{r3}
 800aed0:	469e      	mov	lr, r3
 800aed2:	4770      	bx	lr
